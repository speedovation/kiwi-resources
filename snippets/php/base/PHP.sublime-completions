{
    "scope": "source.php - variable.other.php",

    "completions":
    [
        "php", "echo", "print", "include", "include_once", "require", "require_once",


        { "trigger": "__autoload()", "contents": "__autoload(${1:class})$0" },
        { "trigger": "__call()", "contents": "__call(${1:name}, ${2:arguments})$0" },
        { "trigger": "__callStatic()", "contents": "__callStatic(${1:name}, ${2:arguments})$0" },
        { "trigger": "__clone()", "contents": "__clone()" },
        { "trigger": "__construct()", "contents": "__construct($1)$0" },
        { "trigger": "__destruct()", "contents": "__destruct()" },
        { "trigger": "__get()", "contents": "__get(${1:name})$0" },
        { "trigger": "__halt_compiler()", "contents": "__halt_compiler()" },
        { "trigger": "__invoke()", "contents": "__invoke($1)$0" },
        { "trigger": "__isset()", "contents": "__isset(${1:name})$0" },
        { "trigger": "__set_state()", "contents": "__set_state($1)$0" },
        { "trigger": "__sleep()", "contents": "__sleep()" },
        { "trigger": "__toString()", "contents": "__toString()" },
        { "trigger": "__unset()", "contents": "__unset(${1:name})$0" },
        { "trigger": "__wakeup()", "contents": "__wakeup()" },

        { "trigger": "abs()", "contents": "abs(${1:number})$0" },
        { "trigger": "acos()", "contents": "acos(${1:arg})$0" },
        { "trigger": "acosh()", "contents": "acosh(${1:arg})$0" },
        { "trigger": "addcslashes()", "contents": "addcslashes(${1:str}, ${2:charlist})$0" },
        { "trigger": "addslashes()", "contents": "addslashes(${1:str})$0" },
        { "trigger": "aggregate()", "contents": "aggregate(${1:object}, ${2:class_name})$0" },
        { "trigger": "aggregate_info()", "contents": "aggregate_info(${1:object})$0" },
        { "trigger": "aggregate_methods()", "contents": "aggregate_methods(${1:object}, ${2:class_name})$0" },
        { "trigger": "aggregate_methods_by_list()", "contents": "aggregate_methods_by_list(${1:object}, ${2:class_name}, ${3:methods_list})$0" },
        { "trigger": "aggregate_methods_by_regexp()", "contents": "aggregate_methods_by_regexp(${1:object}, ${2:class_name}, ${3:regexp})$0" },
        { "trigger": "aggregate_properties()", "contents": "aggregate_properties(${1:object}, ${2:class_name})$0" },
        { "trigger": "aggregate_properties_by_list()", "contents": "aggregate_properties_by_list(${1:object}, ${2:class_name}, ${3:properties_list})$0" },
        { "trigger": "aggregate_properties_by_regexp()", "contents": "aggregate_properties_by_regexp(${1:object}, ${2:class_name}, ${3:regexp})$0" },
        { "trigger": "aggregation_info()", "contents": "aggregation_info(${1:object})$0" },
        // Advanced Message Queue Protocol
        "AMQPChannnel",
        { "trigger": "AMQPChannel()", "contents": "AMQPChannel(${1:amqp_connection})$0" },
        "AMQPConnection",
        { "trigger": "AMQPConnection()", "contents": "AMQPConnection(${1:[array(credentials)]})$0" },
        "AMQPEnvelope",
        "AMQPExchange",
        { "trigger": "AMQPExchange()", "contents": "AMQPExchange(${1:amqp_channel})$0" },
        "AMQPQueue",
        { "trigger": "AMQPQueue()", "contents": "AMQPQueue(${1:amqp_connection})$0" },

        { "trigger": "apache_child_terminate()", "contents": "apache_child_terminate()" },
        { "trigger": "apache_get_modules()", "contents": "apache_get_modules()" },
        { "trigger": "apache_get_version()", "contents": "apache_get_version()" },
        { "trigger": "apache_getenv()", "contents": "apache_getenv(${1:variable}${2:[, walk_to_top]})$0" },
        { "trigger": "apache_lookup_uri()", "contents": "apache_lookup_uri(${1:filename})$0" },
        { "trigger": "apache_note()", "contents": "apache_note(${1:note_name}${2:[, note_value]})$0" },
        { "trigger": "apache_request_headers()", "contents": "apache_request_headers()" },
        { "trigger": "apache_reset_timeout()", "contents": "apache_reset_timeout()" },
        { "trigger": "apache_response_headers()", "contents": "apache_response_headers()" },
        { "trigger": "apache_setenv()", "contents": "apache_setenv(${1:variable}, ${2:value}${3:[, walk_to_top]})$0" },
        // Alternative PHP Cache (APC)
        { "trigger": "apc_add()\tbool", "contents": "apc_add(${1:key}${2:[, var]}${3:[, ttl]})$0" },
        { "trigger": "apc_add()\tarray", "contents": "apc_add(${1:values}${2:[, unused]}${3:[, ttl]})$0" },
        { "trigger": "apc_bin_dump()", "contents": "apc_bin_dump(${1:files}${2:[, user_vars]})$0" },
        { "trigger": "apc_bin_dumpfile()", "contents": "apc_bin_dumpfile(${1:files}, ${2:user_vars}, ${3:filename})$0" },
        { "trigger": "apc_bin_load()", "contents": "apc_bin_load(${1:data})$0" },
        { "trigger": "apc_bin_loadfile()", "contents": "apc_bin_loadfile(${1:filename})$0" },
        { "trigger": "apc_cache_info()", "contents": "apc_cache_info(${1:[cache_type, ]}${2:[limited]})$0" },
        { "trigger": "apc_cas()", "contents": "apc_cas(${1:key}, ${2:old}, ${3:new})$0" },
        { "trigger": "apc_clear_cache()", "contents": "apc_clear_cache(${1:[cache_type]})$0" },
        { "trigger": "apc_compile_file()", "contents": "apc_compile_file(${1:filename})$0" },
        { "trigger": "apc_dec()", "contents": "apc_dec(${1:key})$0" },
        { "trigger": "apc_define_constants()", "contents": "apc_define_constants(${1:key}, ${2:constants})$0" },
        { "trigger": "apc_delete()", "contents": "apc_delete(${1:key})$0" },
        { "trigger": "apc_delete_file()", "contents": "apc_delete_file(${1:keys})$0" },
        { "trigger": "apc_exists()", "contents": "apc_exists(${1:keys})$0" },
        { "trigger": "apc_fetch()", "contents": "apc_fetch(${1:key})$0" },
        { "trigger": "apc_inc()", "contents": "apc_inc(${1:key})$0" },
        { "trigger": "apc_load_constants()", "contents": "apc_load_constants(${1:key})$0" },
        { "trigger": "apc_sma_info()", "contents": "apc_sma_info(${1:[limited]})$0" },
        { "trigger": "apc_store()", "contents": "apc_store(${1:key}, ${2:var})$0" },
        "APCIterator",
        { "trigger": "APCIterator()\tctor", "contents": "APCIterator(${1:cache}${2:[, search]}${3:[, format]}${4:[, chunk_size]}${5:[, list]})$0" },
        // Advanced PHP Debugger
        { "trigger": "apd_breakpoint()", "contents": "apd_breakpoint(${1:debug_level})$0" },
        { "trigger": "apd_callstack()", "contents": "apd_callstack()" },
        { "trigger": "apd_clunk()", "contents": "apd_clunk(${1:warning})$0" },
        { "trigger": "apd_continue()", "contents": "apd_continue(${1:debug_level})$0" },
        { "trigger": "apd_croak()", "contents": "apd_croak(${1:warning})$0" },
        { "trigger": "apd_dump_function_table()", "contents": "apd_dump_function_table()" },
        { "trigger": "apd_dump_persistent_resources()", "contents": "apd_dump_persistent_resources()" },
        { "trigger": "apd_dump_regular_resources()", "contents": "apd_dump_regular_resources()" },
        { "trigger": "apd_echo()", "contents": "apd_echo(${1:output})$0" },
        { "trigger": "apd_get_active_symbols()", "contents": "apd_get_active_symbols()" },
        { "trigger": "apd_set_pprof_trace()", "contents": "apd_set_pprof_trace(${1:[dump_directory, ]}${2:[fragment]})$0" },
        { "trigger": "apd_set_session()", "contents": "apd_set_session(${1:debug_level})$0" },
        { "trigger": "apd_set_session_trace()", "contents": "apd_set_session_trace(${1:debug_level})$0" },
        { "trigger": "apd_set_session_trace_socket()", "contents": "apd_set_session_trace_socket(${1:tcp_server}, ${2:socket_type}, ${3:port}, ${4:debug_level})$0" },
        "AppendIterator",
        { "trigger": "array()", "contents": "array($1)$0" },
        { "trigger": "array_change_key_case()", "contents": "array_change_key_case(${1:input}${2:[, case]})$0" },
        { "trigger": "array_chunk()", "contents": "array_chunk(${1:input}, ${2:size}${3:[, preserve_keys]})$0" },
        { "trigger": "array_combine()", "contents": "array_combine(${1:keys}, ${2:values})$0" },
        { "trigger": "array_count_values()", "contents": "array_count_values(${1:input})$0" },
        { "trigger": "array_diff()", "contents": "array_diff(${1:array1}, ${2:arrays})$0" },
        { "trigger": "array_diff_assoc()", "contents": "array_diff_assoc(${1:array1}, ${2:arrays})$0" },
        { "trigger": "array_diff_key()", "contents": "array_diff_key(${1:array1}, ${2:arrays})$0" },
        { "trigger": "array_diff_uassoc()", "contents": "array_diff_uassoc(${1:arrays}${2:[, key_compare_func]})$0" },
        { "trigger": "array_diff_ukey()", "contents": "array_diff_ukey(${1:arrays}${2:[, key_compare_func]})$0" },
        { "trigger": "array_fill()", "contents": "array_fill(${1:start_index}, ${2:num}, ${3:value})$0" },
        { "trigger": "array_fill_keys()", "contents": "array_fill_keys(${1:keys}, ${2:value})$0" },
        { "trigger": "array_filter()", "contents": "array_filter(${1:input}${2:[, callback]})$0" },
        { "trigger": "array_flip()", "contents": "array_flip(${1:trans})$0" },
        { "trigger": "array_intersect()", "contents": "array_intersect(${1:array1}, ${2:arrays})$0" },
        { "trigger": "array_intersect_assoc()", "contents": "array_intersect_assoc(${1:array1}, ${2:arrays})$0" },
        { "trigger": "array_intersect_key()", "contents": "array_intersect_key(${1:array1}, ${2:arrays})$0" },
        { "trigger": "array_intersect_uassoc()", "contents": "array_intersect_uassoc(${1:arrays}${2:[, key_compare_func]})$0" },
        { "trigger": "array_intersect_ukey()", "contents": "array_intersect_ukey(${1:arrays}${2:[, key_compare_func]})$0" },
        { "trigger": "array_key_exists()", "contents": "array_key_exists(${1:key}, ${2:search})$0" },
        { "trigger": "array_keys()", "contents": "array_keys(${1:input}${2:[, search_value]}${3:[, strict]})$0" },
        { "trigger": "array_map()", "contents": "array_map(${1:callback}, ${2:array1}${3:[, array_args]})$0" },
        { "trigger": "array_merge()", "contents": "array_merge(${1:array1}${2:[, array]})$0" },
        { "trigger": "array_merge_recursive()", "contents": "array_merge_recursive(${1:array1}${2:[, array]})$0" },
        { "trigger": "array_multisort()", "contents": "array_multisort(${1:arr}${2:[, args]})$0" },
        { "trigger": "array_pad()", "contents": "array_pad(${1:input}, ${2:pad_size}, ${3:pad_value})$0" },
        { "trigger": "array_pop()", "contents": "array_pop(${1:array})$0" },
        { "trigger": "array_product()", "contents": "array_product(${1:array})$0" },
        { "trigger": "array_push()", "contents": "array_push(${1:array}, ${2:var})$0" },
        { "trigger": "array_rand()", "contents": "array_rand(${1:input}${2:[, num_req=1]})$0" },
        { "trigger": "array_reduce()", "contents": "array_reduce(${1:input}, ${2:function}${3:[, initial]})$0" },
        { "trigger": "array_replace()", "contents": "array_replace(${1:array}, ${2:arrays})$0" },
        { "trigger": "array_replace_recursive()", "contents": "array_replace_recursive(${1:array}, ${2:arrays})$0" },
        { "trigger": "array_reverse()", "contents": "array_reverse(${1:array}${2:[, preserve_keys]})$0" },
        { "trigger": "array_search()", "contents": "array_search(${1:needle}, ${2:haystack}${3:[, strict]})$0" },
        { "trigger": "array_shift()", "contents": "array_shift(${1:array})$0" },
        { "trigger": "array_slice()", "contents": "array_slice(${1:array}, ${2:offset}${3:[, length]}${4:[, preserve_keys]})$0" },
        { "trigger": "array_splice()", "contents": "array_splice(${1:input}, ${2:offset}${3:[, length]}${4:[, replacement]})$0" },
        { "trigger": "array_sum()", "contents": "array_sum(${1:array})$0" },
        { "trigger": "array_udiff()", "contents": "array_udiff(${1:arrays}, ${2:data_compare_func})$0" },
        { "trigger": "array_udiff_assoc()", "contents": "array_udiff_assoc(${1:arrays}, ${2:data_compare_func})$0" },
        { "trigger": "array_udiff_uassoc()", "contents": "array_udiff_uassoc(${1:arrays}, ${2:data_compare_func}, ${3:key_compare_func})$0" },
        { "trigger": "array_uintersect()", "contents": "array_uintersect(${1:arrays}, ${2:data_compare_func})$0" },
        { "trigger": "array_uintersect_assoc()", "contents": "array_uintersect_assoc(${1:arrays}, ${2:data_compare_func})$0" },
        { "trigger": "array_uintersect_uassoc()", "contents": "array_uintersect_uassoc(${1:arrays}, ${2:data_compare_func}, ${3:key_compare_func})$0" },
        { "trigger": "array_unique()", "contents": "array_unique(${1:array}${2:[, sort_flags]})$0" },
        { "trigger": "array_unshift()", "contents": "array_unshift(${1:array}, ${2:var})$0" },
        { "trigger": "array_values()", "contents": "array_values(${1:input})$0" },
        { "trigger": "array_walk()", "contents": "array_walk(${1:array}, ${2:funcname}${3:[, userdata]})$0" },
        { "trigger": "array_walk_recursive()", "contents": "array_walk_recursive(${1:input}, ${2:funcname}${3:[, userdata]})$0" },
        "ArrayAccess",
        "ArrayIterator",
        { "trigger": "ArrayIterator()\tctor", "contents": "ArrayIterator(${1:array})$0" },
        "ArrayObject",
        { "trigger": "ArrayObject()", "contents": "ArrayObject(${1:[input, ]}${2:[flags]}${3:[, iterator_class]})$0" },
        { "trigger": "arsort()", "contents": "arsort(${1:array}${2:[, sort_flags]})$0" },
        { "trigger": "asin()", "contents": "asin(${1:arg})$0" },
        { "trigger": "asinh()", "contents": "asinh(${1:arg})$0" },
        { "trigger": "asort()", "contents": "asort(${1:array}${2:[, sort_flags]})$0" },
        { "trigger": "assert()", "contents": "assert(${1:assertion})$0" },
        { "trigger": "assert_options()", "contents": "assert_options(${1:what}${2:[, value]})$0" },
        { "trigger": "atan()", "contents": "atan(${1:arg})$0" },
        { "trigger": "atan2()", "contents": "atan2(${1:y}, ${2:x})$0" },
        { "trigger": "atanh()", "contents": "atanh(${1:arg})$0" },
        { "trigger": "autoload()", "contents": "autoload(${1:class})$0" },
        "BadFunctionCallException",
        "BadMethodCallException",
        { "trigger": "base64_decode()", "contents": "base64_decode(${1:data}${2:[, strict]})$0" },
        { "trigger": "base64_encode()", "contents": "base64_encode(${1:data})$0" },
        { "trigger": "base_convert()", "contents": "base_convert(${1:number}, ${2:frombase}, ${3:tobase})$0" },
        { "trigger": "basename()", "contents": "basename(${1:path}${2:[, suffix]})$0" },
        // Bulletin Board Code
        { "trigger": "bbcode_add_element()", "contents": "bbcode_add_element(${1:bbcode_container}, ${2:tag_name}, ${3:tag_rules})$0" },
        { "trigger": "bbcode_add_smiley()", "contents": "bbcode_add_smiley(${1:bbcode_container}, ${2:smiley}, ${3:replace_by})$0" },
        { "trigger": "bbcode_create()", "contents": "bbcode_create(${1:[bbcode_initial_tags]})$0" },
        { "trigger": "bbcode_destroy()", "contents": "bbcode_destroy(${1:bbcode_container})$0" },
        { "trigger": "bbcode_parse()", "contents": "bbcode_parse(${1:bbcode_container}, ${2:to_parse})$0" },
        { "trigger": "bbcode_set_arg_parser()", "contents": "bbcode_set_arg_parser(${1:bbcode_container}, ${2:bbcode_arg_parser})$0" },
        { "trigger": "bbcode_set_flags()", "contents": "bbcode_set_flags(${1:bbcode_container}, ${2:flags})$0" },
        // Binary Calculator - arbitrary precision mathematics
        { "trigger": "bcadd()", "contents": "bcadd(${1:left_operand}, ${2:right_operand}${3:[, scale]})$0" },
        { "trigger": "bccomp()", "contents": "bccomp(${1:left_operand}, ${2:right_operand}${3:[, scale]})$0" },
        { "trigger": "bcdiv()", "contents": "bcdiv(${1:left_operand}, ${2:right_operand}${3:[, scale]})$0" },
        { "trigger": "bcmod()", "contents": "bcmod(${1:left_operand}, ${2:modulus})$0" },
        { "trigger": "bcmul()", "contents": "bcmul(${1:left_operand}, ${2:right_operand}${3:[, scale]})$0" },
        // PHP bytecode compiler
        { "trigger": "bcompiler_load()", "contents": "bcompiler_load(${1:filename})$0" },
        { "trigger": "bcompiler_load_exe()", "contents": "bcompiler_load_exe(${1:filename})$0" },
        { "trigger": "bcompiler_parse_class()", "contents": "bcompiler_parse_class(${1:class}, ${2:callback})$0" },
        { "trigger": "bcompiler_read()", "contents": "bcompiler_read(${1:filehandle})$0" },
        { "trigger": "bcompiler_write_class()", "contents": "bcompiler_write_class(${1:filehandle}, ${2:className})$0" },
        { "trigger": "bcompiler_write_constant()", "contents": "bcompiler_write_constant(${1:filehandle}, ${2:constantName})$0" },
        { "trigger": "bcompiler_write_exe_footer()", "contents": "bcompiler_write_exe_footer(${1:filehandle}, ${2:startpos})$0" },
        { "trigger": "bcompiler_write_file()", "contents": "bcompiler_write_file(${1:filehandle}, ${2:filename})$0" },
        { "trigger": "bcompiler_write_footer()", "contents": "bcompiler_write_footer(${1:filehandle})$0" },
        { "trigger": "bcompiler_write_function()", "contents": "bcompiler_write_function(${1:filehandle}, ${2:functionName})$0" },
        { "trigger": "bcompiler_write_functions_from_file()", "contents": "bcompiler_write_functions_from_file(${1:filehandle}, ${2:fileName})$0" },
        { "trigger": "bcompiler_write_header()", "contents": "bcompiler_write_header(${1:filehandle})$0" },
        { "trigger": "bcompiler_write_included_filename()", "contents": "bcompiler_write_included_filename(${1:filehandle}, ${2:filename})$0" },
        // Binary Calculator - arbitrary precision mathematics
        { "trigger": "bcpow()", "contents": "bcpow(${1:left_operand}, ${2:right_operand}${3:[, scale]})$0" },
        { "trigger": "bcpowmod()", "contents": "bcpowmod(${1:left_operand}, ${2:right_operand}, ${3:modulus}${4:[, scale]})$0" },
        { "trigger": "bcscale()", "contents": "bcscale(${1:scale})$0" },
        { "trigger": "bcsqrt()", "contents": "bcsqrt(${1:operand}${2:[, scale]})$0" },
        { "trigger": "bcsub()", "contents": "bcsub(${1:left_operand}, ${2:right_operand}${3:[, scale]})$0" },

        { "trigger": "bin2hex()", "contents": "bin2hex(${1:str})$0" },
        { "trigger": "bind_textdomain_codeset()", "contents": "bind_textdomain_codeset(${1:domain}, ${2:codeset})$0" },
        { "trigger": "bindec()", "contents": "bindec(${1:binary_string})$0" },
        { "trigger": "bindtextdomain()", "contents": "bindtextdomain(${1:domain}, ${2:directory})$0" },
        { "trigger": "bson_decode()", "contents": "bson_decode(${1:bson})$0" },
        { "trigger": "bson_encode()", "contents": "bson_encode(${1:anything})$0" },
        { "trigger": "bumpvalue()", "contents": "bumpvalue(${1:offset})$0" },
        // BZip2 compressed files
        { "trigger": "bzclose()", "contents": "bzclose(${1:bz})$0" },
        { "trigger": "bzcompress()", "contents": "bzcompress(${1:source})$0" },
        { "trigger": "bzdecompress()", "contents": "bzdecompress(${1:source})$0" },
        { "trigger": "bzerrno()", "contents": "bzerrno(${1:bz})$0" },
        { "trigger": "bzerror()", "contents": "bzerror(${1:bz})$0" },
        { "trigger": "bzerrstr()", "contents": "bzerrstr(${1:bz})$0" },
        { "trigger": "bzflush()", "contents": "bzflush(${1:bz})$0" },
        { "trigger": "bzopen()", "contents": "bzopen(${1:filename}, ${2:mode})$0" },
        { "trigger": "bzread()", "contents": "bzread(${1:bz})$0" },
        { "trigger": "bzwrite()", "contents": "bzwrite(${1:bz}, ${2:data})$0" },
        "CachingIterator",
        { "trigger": "CachingIterator()\tctor", "contents": "CachingIterator(${1:iterator}${2:[, flags]})$0" },
        /*
        "Cairo",
        { "trigger": "cairo_create()", "contents": "cairo_create(${1:surface})$0" },
        { "trigger": "cairo_font_face_get_type()", "contents": "cairo_font_face_get_type(${1:fontface})$0" },
        { "trigger": "cairo_font_face_status()", "contents": "cairo_font_face_status(${1:fontface})$0" },
        { "trigger": "cairo_font_options_create()", "contents": "cairo_font_options_create()" },
        { "trigger": "cairo_font_options_equal()", "contents": "cairo_font_options_equal(${1:options}, ${2:other})$0" },
        { "trigger": "cairo_font_options_get_antialias()", "contents": "cairo_font_options_get_antialias(${1:options})$0" },
        { "trigger": "cairo_font_options_get_hint_metrics()", "contents": "cairo_font_options_get_hint_metrics(${1:options})$0" },
        { "trigger": "cairo_font_options_get_hint_style()", "contents": "cairo_font_options_get_hint_style(${1:options})$0" },
        { "trigger": "cairo_font_options_get_subpixel_order()", "contents": "cairo_font_options_get_subpixel_order(${1:options})$0" },
        { "trigger": "cairo_font_options_hash()", "contents": "cairo_font_options_hash(${1:options})$0" },
        { "trigger": "cairo_font_options_merge()", "contents": "cairo_font_options_merge(${1:options}, ${2:other})$0" },
        { "trigger": "cairo_font_options_set_antialias()", "contents": "cairo_font_options_set_antialias(${1:options}, ${2:antialias})$0" },
        { "trigger": "cairo_font_options_set_hint_metrics()", "contents": "cairo_font_options_set_hint_metrics(${1:options}, ${2:hint_metrics})$0" },
        { "trigger": "cairo_font_options_set_hint_style()", "contents": "cairo_font_options_set_hint_style(${1:options}, ${2:hint_style})$0" },
        { "trigger": "cairo_font_options_set_subpixel_order()", "contents": "cairo_font_options_set_subpixel_order(${1:options}, ${2:subpixel_order})$0" },
        { "trigger": "cairo_font_options_status()", "contents": "cairo_font_options_status(${1:options})$0" },
        { "trigger": "cairo_format_stride_for_width()", "contents": "cairo_format_stride_for_width(${1:format}, ${2:width})$0" },
        { "trigger": "cairo_image_surface_create()", "contents": "cairo_image_surface_create(${1:format}, ${2:width}, ${3:height})$0" },
        { "trigger": "cairo_image_surface_create_for_data()", "contents": "cairo_image_surface_create_for_data(${1:data}, ${2:format}, ${3:width}, ${4:height})$0" },
        { "trigger": "cairo_image_surface_create_from_png()", "contents": "cairo_image_surface_create_from_png(${1:file})$0" },
        { "trigger": "cairo_image_surface_get_data()", "contents": "cairo_image_surface_get_data(${1:surface})$0" },
        { "trigger": "cairo_image_surface_get_format()", "contents": "cairo_image_surface_get_format(${1:surface})$0" },
        { "trigger": "cairo_image_surface_get_height()", "contents": "cairo_image_surface_get_height(${1:surface})$0" },
        { "trigger": "cairo_image_surface_get_stride()", "contents": "cairo_image_surface_get_stride(${1:surface})$0" },
        { "trigger": "cairo_image_surface_get_width()", "contents": "cairo_image_surface_get_width(${1:surface})$0" },
        { "trigger": "cairo_matrix_create_scale()\tdeprecated ", "contents": "cairo_matrix_create_scale($1)$0" },
        { "trigger": "cairo_matrix_create_translate()\tdeprecated ", "contents": "cairo_matrix_create_translate($1)$0" },
        { "trigger": "cairo_matrix_invert()", "contents": "cairo_matrix_invert(${1:matrix})$0" },
        { "trigger": "cairo_matrix_multiply()", "contents": "cairo_matrix_multiply(${1:matrix1}, ${2:matrix2})$0" },
        { "trigger": "cairo_matrix_rotate()", "contents": "cairo_matrix_rotate(${1:matrix}, ${2:radians})$0" },
        { "trigger": "cairo_matrix_transform_distance()", "contents": "cairo_matrix_transform_distance(${1:matrix}, ${2:dx}, ${3:dy})$0" },
        { "trigger": "cairo_matrix_transform_point()", "contents": "cairo_matrix_transform_point(${1:matrix}, ${2:dx}, ${3:dy})$0" },
        { "trigger": "cairo_matrix_translate()", "contents": "cairo_matrix_translate(${1:matrix}, ${2:tx}, ${3:ty})$0" },
        { "trigger": "cairo_pattern_add_color_stop_rgb()", "contents": "cairo_pattern_add_color_stop_rgb(${1:pattern}, ${2:offset}, ${3:red}, ${4:green}, ${5:blue})$0" },
        { "trigger": "cairo_pattern_add_color_stop_rgba()", "contents": "cairo_pattern_add_color_stop_rgba(${1:pattern}, ${2:offset}, ${3:red}, ${4:green}, ${5:blue}, ${6:alpha})$0" },
        { "trigger": "cairo_pattern_create_for_surface()", "contents": "cairo_pattern_create_for_surface(${1:surface})$0" },
        { "trigger": "cairo_pattern_create_linear()", "contents": "cairo_pattern_create_linear(${1:x0}, ${2:y0}, ${3:x1}, ${4:y1})$0" },
        { "trigger": "cairo_pattern_create_radial()", "contents": "cairo_pattern_create_radial(${1:x0}, ${2:y0}, ${3:r0}, ${4:x1}, ${5:y1}, ${6:r1})$0" },
        { "trigger": "cairo_pattern_create_rgb()", "contents": "cairo_pattern_create_rgb(${1:red}, ${2:green}, ${3:blue})$0" },
        { "trigger": "cairo_pattern_create_rgba()", "contents": "cairo_pattern_create_rgba(${1:red}, ${2:green}, ${3:blue}, ${4:alpha})$0" },
        { "trigger": "cairo_pattern_get_color_stop_count()", "contents": "cairo_pattern_get_color_stop_count(${1:pattern})$0" },
        { "trigger": "cairo_pattern_get_color_stop_rgba()", "contents": "cairo_pattern_get_color_stop_rgba(${1:pattern}, ${2:index})$0" },
        { "trigger": "cairo_pattern_get_extend()", "contents": "cairo_pattern_get_extend(${1:pattern})$0" },
        { "trigger": "cairo_pattern_get_filter()", "contents": "cairo_pattern_get_filter(${1:pattern})$0" },
        { "trigger": "cairo_pattern_get_linear_points()", "contents": "cairo_pattern_get_linear_points(${1:pattern})$0" },
        { "trigger": "cairo_pattern_get_matrix()", "contents": "cairo_pattern_get_matrix(${1:pattern})$0" },
        { "trigger": "cairo_pattern_get_radial_circles()", "contents": "cairo_pattern_get_radial_circles(${1:pattern})$0" },
        { "trigger": "cairo_pattern_get_rgba()", "contents": "cairo_pattern_get_rgba(${1:pattern})$0" },
        { "trigger": "cairo_pattern_get_surface()", "contents": "cairo_pattern_get_surface(${1:pattern})$0" },
        { "trigger": "cairo_pattern_get_type()", "contents": "cairo_pattern_get_type(${1:pattern})$0" },
        { "trigger": "cairo_pattern_set_extend()", "contents": "cairo_pattern_set_extend(${1:pattern}, ${2:extend})$0" },
        { "trigger": "cairo_pattern_set_filter()", "contents": "cairo_pattern_set_filter(${1:pattern}, ${2:filter})$0" },
        { "trigger": "cairo_pattern_set_matrix()", "contents": "cairo_pattern_set_matrix(${1:pattern}, ${2:matrix})$0" },
        { "trigger": "cairo_pattern_status()", "contents": "cairo_pattern_status(${1:pattern})$0" },
        { "trigger": "cairo_pdf_surface_create()", "contents": "cairo_pdf_surface_create(${1:file}, ${2:width}, ${3:height})$0" },
        { "trigger": "cairo_pdf_surface_set_size()", "contents": "cairo_pdf_surface_set_size(${1:surface}, ${2:width}, ${3:height})$0" },
        { "trigger": "cairo_ps_get_levels()", "contents": "cairo_ps_get_levels()" },
        { "trigger": "cairo_ps_level_to_string()", "contents": "cairo_ps_level_to_string(${1:level})$0" },
        { "trigger": "cairo_ps_surface_create()", "contents": "cairo_ps_surface_create(${1:file}, ${2:width}, ${3:height})$0" },
        { "trigger": "cairo_ps_surface_dsc_begin_page_setup()", "contents": "cairo_ps_surface_dsc_begin_page_setup(${1:surface})$0" },
        { "trigger": "cairo_ps_surface_dsc_begin_setup()", "contents": "cairo_ps_surface_dsc_begin_setup(${1:surface})$0" },
        { "trigger": "cairo_ps_surface_dsc_comment()", "contents": "cairo_ps_surface_dsc_comment(${1:surface}, ${2:comment})$0" },
        { "trigger": "cairo_ps_surface_get_eps()", "contents": "cairo_ps_surface_get_eps(${1:surface})$0" },
        { "trigger": "cairo_ps_surface_restrict_to_level()", "contents": "cairo_ps_surface_restrict_to_level(${1:surface}, ${2:level})$0" },
        { "trigger": "cairo_ps_surface_set_eps()", "contents": "cairo_ps_surface_set_eps(${1:surface}, ${2:level})$0" },
        { "trigger": "cairo_ps_surface_set_size()", "contents": "cairo_ps_surface_set_size(${1:surface}, ${2:width}, ${3:height})$0" },
        { "trigger": "cairo_scaled_font_create()", "contents": "cairo_scaled_font_create(${1:fontface}, ${2:matrix}, ${3:ctm}, ${4:fontoptions})$0" },
        { "trigger": "cairo_scaled_font_extents()", "contents": "cairo_scaled_font_extents(${1:scaledfont})$0" },
        { "trigger": "cairo_scaled_font_get_ctm()", "contents": "cairo_scaled_font_get_ctm(${1:scaledfont})$0" },
        { "trigger": "cairo_scaled_font_get_font_face()", "contents": "cairo_scaled_font_get_font_face(${1:scaledfont})$0" },
        { "trigger": "cairo_scaled_font_get_font_matrix()", "contents": "cairo_scaled_font_get_font_matrix(${1:scaledfont})$0" },
        { "trigger": "cairo_scaled_font_get_font_options()", "contents": "cairo_scaled_font_get_font_options(${1:scaledfont})$0" },
        { "trigger": "cairo_scaled_font_get_scale_matrix()", "contents": "cairo_scaled_font_get_scale_matrix(${1:scaledfont})$0" },
        { "trigger": "cairo_scaled_font_get_type()", "contents": "cairo_scaled_font_get_type(${1:scaledfont})$0" },
        { "trigger": "cairo_scaled_font_glyph_extents()", "contents": "cairo_scaled_font_glyph_extents(${1:scaledfont}, ${2:glyphs})$0" },
        { "trigger": "cairo_scaled_font_status()", "contents": "cairo_scaled_font_status(${1:scaledfont})$0" },
        { "trigger": "cairo_scaled_font_text_extents()", "contents": "cairo_scaled_font_text_extents(${1:scaledfont}, ${2:text})$0" },
        { "trigger": "cairo_surface_copy_page()", "contents": "cairo_surface_copy_page(${1:surface})$0" },
        { "trigger": "cairo_surface_create_similar()", "contents": "cairo_surface_create_similar(${1:surface}, ${2:content}, ${3:width}, ${4:height})$0" },
        { "trigger": "cairo_surface_finish()", "contents": "cairo_surface_finish(${1:surface})$0" },
        { "trigger": "cairo_surface_flush()", "contents": "cairo_surface_flush(${1:surface})$0" },
        { "trigger": "cairo_surface_get_content()", "contents": "cairo_surface_get_content(${1:surface})$0" },
        { "trigger": "cairo_surface_get_device_offset()", "contents": "cairo_surface_get_device_offset(${1:surface})$0" },
        { "trigger": "cairo_surface_get_font_options()", "contents": "cairo_surface_get_font_options(${1:surface})$0" },
        { "trigger": "cairo_surface_get_type()", "contents": "cairo_surface_get_type(${1:surface})$0" },
        { "trigger": "cairo_surface_mark_dirty()", "contents": "cairo_surface_mark_dirty(${1:surface})$0" },
        { "trigger": "cairo_surface_mark_dirty_rectangle()", "contents": "cairo_surface_mark_dirty_rectangle(${1:surface}, ${2:x}, ${3:y}, ${4:width}, ${5:height})$0" },
        { "trigger": "cairo_surface_set_device_offset()", "contents": "cairo_surface_set_device_offset(${1:surface}, ${2:x}, ${3:y})$0" },
        { "trigger": "cairo_surface_set_fallback_resolution()", "contents": "cairo_surface_set_fallback_resolution(${1:surface}, ${2:x}, ${3:y})$0" },
        { "trigger": "cairo_surface_show_page()", "contents": "cairo_surface_show_page(${1:surface})$0" },
        { "trigger": "cairo_surface_status()", "contents": "cairo_surface_status(${1:surface})$0" },
        { "trigger": "cairo_surface_write_to_png()", "contents": "cairo_surface_write_to_png(${1:surface}, ${2:stream})$0" },
        { "trigger": "cairo_svg_surface_create()", "contents": "cairo_svg_surface_create(${1:file}, ${2:width}, ${3:height})$0" },
        { "trigger": "cairo_svg_surface_restrict_to_version()", "contents": "cairo_svg_surface_restrict_to_version(${1:surface}, ${2:version})$0" },
        { "trigger": "cairo_svg_version_to_string()", "contents": "cairo_svg_version_to_string(${1:version})$0" },

        "CairoAntialias",
        "CairoContent",
        "CairoContext",
        { "trigger": "CairoContext()\tctor", "contents": "CairoContext(${1:surface})$0" },
        "CairoException",
        "CairoExtend",
        "CairoFillRule",
        "CairoFilter",
        "CairoFontFace",
        "CairoFontOptions",
        "CairoFontSlant",
        "CairoFontType",
        "CairoFontWeight",
        "CairoFormat",
        "CairoGradientPattern",
        "CairoHintMetrics",
        "CairoHintStyle",
        "CairoImageSurface",
        { "trigger": "CairoImageSurface()\tctor", "contents": "CairoImageSurface(${1:format}, ${2:width}, ${3:height})$0" },
        "CairoLinearGradient",
        { "trigger": "CairoLinearGradient()\tctor", "contents": "CairoLinearGradient(${1:x0}, ${2:y0}, ${3:x1}, ${4:y1})$0" },
        "CairoLineCap",
        "CairoLineJoin",
        "CairoMatrix",
        { "trigger": "CairoMatrix()\tctor", "contents": "CairoMatrix(${1:[xx]}${2:[, yx]}${3:[, xy]}${4:[, yy]}${5:[, x0]}${6:[, y0]})$0" },
        "CairoOperator",
        "CairoPath",
        "CairoPattern",
        "CairoPatternType",
        "CairoPdfSurface",
        { "trigger": "CairoPdfSurface()\tctor", "contents": "CairoPdfSurface(${1:file}, ${2:width}, ${3:height})$0" },
        "CairoPsLevel",
        "CairoPsSurface",
        { "trigger": "CairoPsSurface()\tctor", "contents": "CairoPsSurface(${1:file}, ${2:width}, ${3:height})$0" },
        "CairoRadialGradient",
        { "trigger": "CairoRadialGradient()\tctor", "contents": "CairoRadialGradient(${1:x0}, ${2:y0}, ${3:r0}, ${4:x1}, ${5:y1}, ${6:r1})$0" },
        "CairoScaledFont",
        { "trigger": "CairoScaledFont()\tctor", "contents": "CairoScaledFont(${1:font_face}, ${2:matrix}, ${3:ctm}, ${4:options})$0" },
        "CairoSolidPattern",
        { "trigger": "CairoSolidPattern()\tctor", "contents": "CairoSolidPattern(${1:red}, ${2:green}, ${3:blue}${4:[, alpha]})$0" },
        "CairoStatus",
        "CairoSubpixelOrder",
        "CairoSurface",
        "CairoSurfacePattern",
        { "trigger": "CairoSurfacePattern()\tctor", "contents": "CairoSurfacePattern(${1:surface})$0" },
        "CairoSurfaceType",
        "CairoSvgSurface",
        { "trigger": "CairoSvgSurface()\tctor", "contents": "CairoSvgSurface(${1:file}, ${2:width}, ${3:height})$0" },
        "CairoSvgVersion",
        "CairoToyFontFace",
        */
        { "trigger": "cal_days_in_month()", "contents": "cal_days_in_month(${1:calendar}, ${2:month}, ${3:year})$0" },
        { "trigger": "cal_from_jd()", "contents": "cal_from_jd(${1:jd}, ${2:calendar})$0" },
        { "trigger": "cal_info()", "contents": "cal_info(${1:[calendar]})$0" },
        { "trigger": "cal_to_jd()", "contents": "cal_to_jd(${1:calendar}, ${2:month}, ${3:day}, ${4:year})$0" },
        { "trigger": "calcul_hmac()", "contents": "calcul_hmac(${1:clent}, ${2:siretcode}, ${3:price}, ${4:reference}, ${5:validity}, ${6:taxation}, ${7:devise}, ${8:language})$0" },
        { "trigger": "calculhmac()", "contents": "calculhmac(${1:clent}, ${2:data})$0" },
        { "trigger": "call_user_func()", "contents": "call_user_func(${1:callback}${2:[, parameters]})$0" },
        { "trigger": "call_user_func_array()", "contents": "call_user_func_array(${1:function}, ${2:param_arr})$0" },
        { "trigger": "call_user_method()\tdeprecated 5.3.x", "contents": "call_user_method(${1:method_name}, ${2:obj})$0" },
        { "trigger": "call_user_method_array()\tdeprecated 5.3.x", "contents": "call_user_method_array(${1:method_name}, ${2:obj}, ${3:params})$0" },
        "CallbackFilterIterator",
        { "trigger": "CallbackFilterIterator()\tctor", "contents": "CallbackFilterIterator(${1:iterator}, ${2:callback})$0" },
        { "trigger": "ceil()", "contents": "ceil(${1:value})$0" },
        { "trigger": "chdb()", "contents": "chdb(${1:pathname})$0" },
        { "trigger": "chdb_create()", "contents": "chdb_create(${1:pathname}, ${2:data})$0" },
        { "trigger": "chdir()", "contents": "chdir(${1:directory})$0" },
        { "trigger": "checkdate()", "contents": "checkdate(${1:month}, ${2:day}, ${3:year})$0" },
        { "trigger": "checkdnsrr()", "contents": "checkdnsrr(${1:host})$0" },
        { "trigger": "chgrp()", "contents": "chgrp(${1:filename}, ${2:group})$0" },
        { "trigger": "chmod()", "contents": "chmod(${1:filename}, ${2:mode})$0" },
        { "trigger": "chop()", "contents": "chop(${1:str}${2:[, charlist]})$0" },
        { "trigger": "chown()", "contents": "chown(${1:filename}, ${2:user})$0" },
        { "trigger": "chr()", "contents": "chr(${1:ascii})$0" },
        { "trigger": "chroot()", "contents": "chroot(${1:directory})$0" },
        { "trigger": "chunk_split()", "contents": "chunk_split(${1:body}${2:[, chunklen]}${3:[, end]})$0" },
        { "trigger": "class_alias()", "contents": "class_alias(${1:[original, ]}${2:[alias]})$0" },
        { "trigger": "class_exists()", "contents": "class_exists(${1:class_name})$0" },
        { "trigger": "class_implements()", "contents": "class_implements(${1:class}${2:[, autoload]})$0" },
        { "trigger": "class_parents()", "contents": "class_parents(${1:class}${2:[, autoload]})$0" },
        { "trigger": "class_uses()", "contents": "class_uses(${1:class}${2:[, autoload]})$0" },
        // Classkit - replaced by runkit
        { "trigger": "classkit_import()", "contents": "classkit_import(${1:filename})$0" },
        { "trigger": "classkit_method_add()", "contents": "classkit_method_add(${1:classname}, ${2:methodname}, ${3:args}, ${4:code})$0" },
        { "trigger": "classkit_method_copy()", "contents": "classkit_method_copy(${1:dClass}, ${2:dMethod}, ${3:sClass})$0" },
        { "trigger": "classkit_method_redefine()", "contents": "classkit_method_redefine(${1:classname}, ${2:methodname}, ${3:args}, ${4:code})$0" },
        { "trigger": "classkit_method_remove()", "contents": "classkit_method_remove(${1:classname}, ${2:methodname})$0" },
        { "trigger": "classkit_method_rename()", "contents": "classkit_method_rename(${1:classname}, ${2:methodname}, ${3:newname})$0" },

        { "trigger": "clearstatcache()", "contents": "clearstatcache(${1:[clear_realpath_cache, ]}${2:[filename]})$0" },
        { "trigger": "closedir()", "contents": "closedir(${1:[dir_handle]})$0" },
        { "trigger": "closelog()", "contents": "closelog()" },
        "Closure",
        { "trigger": "bind()\tClosure", "contents": "bind(${1:closure}, ${2:newthis}${3:[, newscope]})$0" },
        { "trigger": "bindTo()\tClosure", "contents": "bindTo(${1:newthis}${2:[, newscope]})$0" },
        "Collator",
        { "trigger": "Collator()\tctor", "contents": "Collator(${1:locale})$0" },

        "COM",
        { "trigger": "COM()\tctor", "contents": "COM(${1:module_name}${2:[, server_name]}${3:[, code_page]}${4:[, typelib]})$0" },
        { "trigger": "com_addref()\tdeprecated ", "contents": "com_addref()" },
        { "trigger": "com_create_guid()", "contents": "com_create_guid()" },
        { "trigger": "com_event_sink()", "contents": "com_event_sink(${1:comobject}, ${2:sinkobject})$0" },
        { "trigger": "com_get_active_object()", "contents": "com_get_active_object(${1:progid})$0" },
        { "trigger": "com_invoke()", "contents": "com_invoke(${1:com_object}, ${2:function_name})$0" },
        { "trigger": "com_isenum()", "contents": "com_isenum(${1:com_module})$0" },
        { "trigger": "com_load_typelib()", "contents": "com_load_typelib(${1:typelib_name})$0" },
        { "trigger": "com_message_pump()", "contents": "com_message_pump(${1:[timeoutms]})$0" },
        { "trigger": "com_print_typeinfo()", "contents": "com_print_typeinfo(${1:comobject})$0" },
        { "trigger": "com_propget()\tdeprecated ", "contents": "com_propget($1)$0" },
        { "trigger": "com_propput()\tdeprecated ", "contents": "com_propput($1)$0" },
        { "trigger": "com_propset()\tdeprecated ", "contents": "com_propset($1)$0" },
        { "trigger": "com_release()\tdeprecated ", "contents": "com_release()" },
        { "trigger": "com_set()\tdeprecated ", "contents": "com_set($1)$0" },

        { "trigger": "compact()", "contents": "compact(${1:varnames})$0" },
        { "trigger": "connection_aborted()", "contents": "connection_aborted()" },
        { "trigger": "connection_status()", "contents": "connection_status()" },
        { "trigger": "connection_timeout()\tdeprecated ", "contents": "connection_timeout()" },
        { "trigger": "constant()", "contents": "constant(${1:name})$0" },
        { "trigger": "convert_cyr_string()", "contents": "convert_cyr_string(${1:str}, ${2:from}, ${3:to})$0" },
        { "trigger": "convert_uudecode()", "contents": "convert_uudecode(${1:data})$0" },
        { "trigger": "convert_uuencode()", "contents": "convert_uuencode(${1:data})$0" },
        { "trigger": "copy()", "contents": "copy(${1:source}, ${2:dest}${3:[, context]})$0" },
        { "trigger": "cos()", "contents": "cos(${1:arg})$0" },
        { "trigger": "cosh()", "contents": "cosh(${1:arg})$0" },
        { "trigger": "count()", "contents": "count(${1:var}${2:[, mode=COUNT_NORMAL]})$0" },
        { "trigger": "count_chars()", "contents": "count_chars(${1:string}${2:[, mode]})$0" },
        "Countable",
        "Counter",
        { "trigger": "Counter()\tctor", "contents": "Counter(${1:name}${2:[, initial_value]}${3:[, flags]})$0" },
        { "trigger": "counter_bump()", "contents": "counter_bump(${1:offset})$0" },
        { "trigger": "counter_bump_value()", "contents": "counter_bump_value(${1:counter}, ${2:offset})$0" },
        { "trigger": "counter_create()", "contents": "counter_create(${1:name})$0" },
        { "trigger": "counter_get()", "contents": "counter_get()" },
        { "trigger": "counter_get_meta()", "contents": "counter_get_meta(${1:counter}, ${2:attribute})$0" },
        { "trigger": "counter_get_named()", "contents": "counter_get_named(${1:name})$0" },
        { "trigger": "counter_get_value()", "contents": "counter_get_value(${1:counter})$0" },
        { "trigger": "counter_reset()", "contents": "counter_reset()" },
        { "trigger": "counter_reset_value()", "contents": "counter_reset_value(${1:counter})$0" },
        { "trigger": "crack_check()", "contents": "crack_check(${1:dictionary}, ${2:password})$0" },
        { "trigger": "crack_closedict()", "contents": "crack_closedict(${1:[dictionary]})$0" },
        { "trigger": "crack_getlastmessage()", "contents": "crack_getlastmessage()" },
        { "trigger": "crack_opendict()", "contents": "crack_opendict(${1:dictionary})$0" },
        { "trigger": "crc32()", "contents": "crc32(${1:str})$0" },
        { "trigger": "create_function()", "contents": "create_function(${1:args}, ${2:code})$0" },
        { "trigger": "crypt()", "contents": "crypt(${1:str}${2:[, salt]})$0" },
        { "trigger": "ctype_alnum()", "contents": "ctype_alnum(${1:text})$0" },
        { "trigger": "ctype_alpha()", "contents": "ctype_alpha(${1:text})$0" },
        { "trigger": "ctype_cntrl()", "contents": "ctype_cntrl(${1:text})$0" },
        { "trigger": "ctype_digit()", "contents": "ctype_digit(${1:text})$0" },
        { "trigger": "ctype_graph()", "contents": "ctype_graph(${1:text})$0" },
        { "trigger": "ctype_lower()", "contents": "ctype_lower(${1:text})$0" },
        { "trigger": "ctype_print()", "contents": "ctype_print(${1:text})$0" },
        { "trigger": "ctype_punct()", "contents": "ctype_punct(${1:text})$0" },
        { "trigger": "ctype_space()", "contents": "ctype_space(${1:text})$0" },
        { "trigger": "ctype_upper()", "contents": "ctype_upper(${1:text})$0" },
        { "trigger": "ctype_xdigit()", "contents": "ctype_xdigit(${1:text})$0" },
        /* CUBRID database server
        { "trigger": "cubrid_affected_rows()", "contents": "cubrid_affected_rows(${1:[conn_identifier]})$0" },
        { "trigger": "cubrid_bind()", "contents": "cubrid_bind(${1:req_identifier}, ${2:bind_index}, ${3:bind_value})$0" },
        { "trigger": "cubrid_client_encoding()", "contents": "cubrid_client_encoding(${1:[conn_identifier]})$0" },
        { "trigger": "cubrid_close()", "contents": "cubrid_close(${1:[conn_identifier]})$0" },
        { "trigger": "cubrid_close_prepare()", "contents": "cubrid_close_prepare(${1:req_identifier})$0" },
        { "trigger": "cubrid_close_request()", "contents": "cubrid_close_request(${1:req_identifier})$0" },
        { "trigger": "cubrid_col_get()", "contents": "cubrid_col_get(${1:conn_identifier}, ${2:oid}, ${3:attr_name})$0" },
        { "trigger": "cubrid_col_size()", "contents": "cubrid_col_size(${1:conn_identifier}, ${2:oid}, ${3:attr_name})$0" },
        { "trigger": "cubrid_column_names()", "contents": "cubrid_column_names(${1:req_identifier})$0" },
        { "trigger": "cubrid_column_types()", "contents": "cubrid_column_types(${1:req_identifier})$0" },
        { "trigger": "cubrid_commit()", "contents": "cubrid_commit(${1:conn_identifier})$0" },
        { "trigger": "cubrid_connect()", "contents": "cubrid_connect(${1:host}, ${2:port}, ${3:dbname})$0" },
        { "trigger": "cubrid_connect_with_url()", "contents": "cubrid_connect_with_url(${1:conn_url})$0" },
        { "trigger": "cubrid_current_oid()", "contents": "cubrid_current_oid(${1:req_identifier})$0" },
        { "trigger": "cubrid_data_seek()", "contents": "cubrid_data_seek(${1:req_identifier}, ${2:row_number})$0" },
        { "trigger": "cubrid_db_name()", "contents": "cubrid_db_name(${1:result}, ${2:index})$0" },
        { "trigger": "cubrid_disconnect()", "contents": "cubrid_disconnect(${1:conn_identifier})$0" },
        { "trigger": "cubrid_drop()", "contents": "cubrid_drop(${1:conn_identifier}, ${2:oid})$0" },
        { "trigger": "cubrid_errno()", "contents": "cubrid_errno(${1:[conn_identifier]})$0" },
        { "trigger": "cubrid_error()", "contents": "cubrid_error(${1:[connection]})$0" },
        { "trigger": "cubrid_error_code()", "contents": "cubrid_error_code()" },
        { "trigger": "cubrid_error_code_facility()", "contents": "cubrid_error_code_facility()" },
        { "trigger": "cubrid_error_msg()", "contents": "cubrid_error_msg()" },
        { "trigger": "cubrid_execute()", "contents": "cubrid_execute(${1:conn_identifier}, ${2:SQL})$0" },
        { "trigger": "cubrid_fetch()", "contents": "cubrid_fetch(${1:result})$0" },
        { "trigger": "cubrid_fetch_array()", "contents": "cubrid_fetch_array(${1:result})$0" },
        { "trigger": "cubrid_fetch_assoc()", "contents": "cubrid_fetch_assoc(${1:result})$0" },
        { "trigger": "cubrid_fetch_field()", "contents": "cubrid_fetch_field(${1:result})$0" },
        { "trigger": "cubrid_fetch_lengths()", "contents": "cubrid_fetch_lengths(${1:result})$0" },
        { "trigger": "cubrid_fetch_object()", "contents": "cubrid_fetch_object(${1:result})$0" },
        { "trigger": "cubrid_fetch_row()", "contents": "cubrid_fetch_row(${1:result})$0" },
        { "trigger": "cubrid_field_flags()", "contents": "cubrid_field_flags(${1:result}, ${2:field_offset})$0" },
        { "trigger": "cubrid_field_len()", "contents": "cubrid_field_len(${1:result}, ${2:field_offset})$0" },
        { "trigger": "cubrid_field_name()", "contents": "cubrid_field_name(${1:result}, ${2:field_offset})$0" },
        { "trigger": "cubrid_field_seek()", "contents": "cubrid_field_seek(${1:result})$0" },
        { "trigger": "cubrid_field_table()", "contents": "cubrid_field_table(${1:result}, ${2:field_offset})$0" },
        { "trigger": "cubrid_field_type()", "contents": "cubrid_field_type(${1:result}, ${2:field_offset})$0" },
        { "trigger": "cubrid_free_result()", "contents": "cubrid_free_result(${1:req_identifier})$0" },
        { "trigger": "cubrid_get()", "contents": "cubrid_get(${1:conn_identifier}, ${2:oid})$0" },
        { "trigger": "cubrid_get_autocommit()", "contents": "cubrid_get_autocommit(${1:[conn_identifier]})$0" },
        { "trigger": "cubrid_get_charset()", "contents": "cubrid_get_charset(${1:conn_identifier})$0" },
        { "trigger": "cubrid_get_class_name()", "contents": "cubrid_get_class_name(${1:conn_identifier}, ${2:oid})$0" },
        { "trigger": "cubrid_get_client_info()", "contents": "cubrid_get_client_info()" },
        { "trigger": "cubrid_get_db_parameter()", "contents": "cubrid_get_db_parameter(${1:conn_identifier})$0" },
        { "trigger": "cubrid_get_query_timeout()", "contents": "cubrid_get_query_timeout(${1:req_identifier})$0" },
        { "trigger": "cubrid_get_server_info()", "contents": "cubrid_get_server_info(${1:conn_identifier})$0" },
        { "trigger": "cubrid_insert_id()", "contents": "cubrid_insert_id(${1:class_name})$0" },
        { "trigger": "cubrid_is_instance()", "contents": "cubrid_is_instance(${1:conn_identifier}, ${2:oid})$0" },
        { "trigger": "cubrid_list_dbs()", "contents": "cubrid_list_dbs(${1:conn_identifier})$0" },
        { "trigger": "cubrid_load_from_glo()\tobsolete", "contents": "cubrid_load_from_glo(${1:conn_identifier}, ${2:oid}, ${3:file_name})$0" },
        { "trigger": "cubrid_lob_close()", "contents": "cubrid_lob_close(${1:lob_identifier_array})$0" },
        { "trigger": "cubrid_lob_export()", "contents": "cubrid_lob_export(${1:conn_identifier}, ${2:lob_identifier}, ${3:path_name})$0" },
        { "trigger": "cubrid_lob_get()", "contents": "cubrid_lob_get(${1:conn_identifier}, ${2:SQL})$0" },
        { "trigger": "cubrid_lob_send()", "contents": "cubrid_lob_send(${1:conn_identifier}, ${2:lob_identifier})$0" },
        { "trigger": "cubrid_lob_size()", "contents": "cubrid_lob_size(${1:lob_identifier})$0" },
        { "trigger": "cubrid_lock_read()", "contents": "cubrid_lock_read(${1:conn_identifier}, ${2:oid})$0" },
        { "trigger": "cubrid_lock_write()", "contents": "cubrid_lock_write(${1:conn_identifier}, ${2:oid})$0" },
        { "trigger": "cubrid_move_cursor()", "contents": "cubrid_move_cursor(${1:req_identifier}, ${2:offset})$0" },
        { "trigger": "cubrid_new_glo()\tobsolete", "contents": "cubrid_new_glo(${1:conn_identifier}, ${2:class_name}, ${3:file_name})$0" },
        { "trigger": "cubrid_next_result()", "contents": "cubrid_next_result(${1:result})$0" },
        { "trigger": "cubrid_num_cols()", "contents": "cubrid_num_cols(${1:req_identifier})$0" },
        { "trigger": "cubrid_num_fields()", "contents": "cubrid_num_fields(${1:result})$0" },
        { "trigger": "cubrid_num_rows()", "contents": "cubrid_num_rows(${1:req_identifier})$0" },
        { "trigger": "cubrid_pconnect()", "contents": "cubrid_pconnect($1)$0" },
        { "trigger": "cubrid_pconnect(full)", "contents": "cubrid_pconnect(${1:host}, ${2:post}, ${3:dbname}${4:[, userid]}${5:[, passwd]})$0" },
        { "trigger": "cubrid_pconnect_with_url()", "contents": "cubrid_pconnect_with_url(${1:conn_url}${2:[, userid]}${3:[, passwd]})$0" },
        { "trigger": "cubrid_ping()", "contents": "cubrid_ping(${1:[conn_identifier]})$0" },
        { "trigger": "cubrid_prepare()", "contents": "cubrid_prepare(${1:conn_identifier}, ${2:prepare_stmt})$0" },
        { "trigger": "cubrid_put()", "contents": "cubrid_put(${1:conn_identifier}, ${2:oid})$0" },
        { "trigger": "cubrid_query()", "contents": "cubrid_query(${1:query})$0" },
        { "trigger": "cubrid_real_escape_string()", "contents": "cubrid_real_escape_string(${1:unescaped_string})$0" },
        { "trigger": "cubrid_result()", "contents": "cubrid_result(${1:result}, ${2:row})$0" },
        { "trigger": "cubrid_rollback()", "contents": "cubrid_rollback(${1:conn_identifier})$0" },
        { "trigger": "cubrid_save_to_glo()\tobsolete", "contents": "cubrid_save_to_glo(${1:conn_identifier}, ${2:oid}, ${3:file_name})$0" },
        { "trigger": "cubrid_schema()", "contents": "cubrid_schema(${1:conn_identifier}, ${2:schema_type})$0" },
        { "trigger": "cubrid_send_glo()\tobsolete", "contents": "cubrid_send_glo(${1:conn_identifier}, ${2:oid})$0" },
        { "trigger": "cubrid_seq_drop()", "contents": "cubrid_seq_drop(${1:conn_identifier}, ${2:oid}, ${3:attr_name}, ${4:index})$0" },
        { "trigger": "cubrid_seq_insert()", "contents": "cubrid_seq_insert(${1:conn_identifier}, ${2:oid}, ${3:attr_name}, ${4:index}, ${5:seq_element})$0" },
        { "trigger": "cubrid_seq_put()", "contents": "cubrid_seq_put(${1:conn_identifier}, ${2:oid}, ${3:attr_name}, ${4:index}, ${5:seq_element})$0" },
        { "trigger": "cubrid_set_add()", "contents": "cubrid_set_add(${1:conn_identifier}, ${2:oid}, ${3:attr_name}, ${4:set_element})$0" },
        { "trigger": "cubrid_set_autocommit()", "contents": "cubrid_set_autocommit(${1:conn_identifier}, ${2:mode})$0" },
        { "trigger": "cubrid_set_db_parameter()", "contents": "cubrid_set_db_parameter(${1:conn_identifier}, ${2:param_type}, ${3:param_value})$0" },
        { "trigger": "cubrid_set_drop()", "contents": "cubrid_set_drop(${1:conn_identifier}, ${2:oid}, ${3:attr_name}, ${4:set_element})$0" },
        { "trigger": "cubrid_set_query_timeout()", "contents": "cubrid_set_query_timeout(${1:req_identifier}, ${2:timeout})$0" },
        { "trigger": "cubrid_unbuffered_query()", "contents": "cubrid_unbuffered_query(${1:query})$0" },
        { "trigger": "cubrid_version()", "contents": "cubrid_version()" },
        */
        // cURL - Client URL
        { "trigger": "curl_close()", "contents": "curl_close(${1:ch})$0" },
        { "trigger": "curl_copy_handle()", "contents": "curl_copy_handle(${1:ch})$0" },
        { "trigger": "curl_errno()", "contents": "curl_errno(${1:ch})$0" },
        { "trigger": "curl_error()", "contents": "curl_error(${1:ch})$0" },
        { "trigger": "curl_exec()", "contents": "curl_exec(${1:ch})$0" },
        { "trigger": "curl_getinfo()", "contents": "curl_getinfo(${1:ch})$0" },
        { "trigger": "curl_init()", "contents": "curl_init(${1:[url]})$0" },
        { "trigger": "curl_multi_add_handle()", "contents": "curl_multi_add_handle(${1:mh}, ${2:ch})$0" },
        { "trigger": "curl_multi_close()", "contents": "curl_multi_close(${1:mh})$0" },
        { "trigger": "curl_multi_exec()", "contents": "curl_multi_exec(${1:mh}, ${2:still_running})$0" },
        { "trigger": "curl_multi_getcontent()", "contents": "curl_multi_getcontent(${1:ch})$0" },
        { "trigger": "curl_multi_info_read()", "contents": "curl_multi_info_read(${1:mh})$0" },
        { "trigger": "curl_multi_init()", "contents": "curl_multi_init()" },
        { "trigger": "curl_multi_remove_handle()", "contents": "curl_multi_remove_handle(${1:mh}, ${2:ch})$0" },
        { "trigger": "curl_multi_select()", "contents": "curl_multi_select(${1:mh})$0" },
        { "trigger": "curl_setopt()", "contents": "curl_setopt(${1:ch}, ${2:option}, ${3:value})$0" },
        { "trigger": "curl_setopt_array()", "contents": "curl_setopt_array(${1:ch}, ${2:options})$0" },
        { "trigger": "curl_version()", "contents": "curl_version(${1:[age]})$0" },

        { "trigger": "current()", "contents": "current(${1:array})$0" },
        /* Cyrus - not available on Windows - moved to PECL as of PHP 5.0.0
        { "trigger": "cyrus_authenticate()", "contents": "cyrus_authenticate(${1:connection})$0" },
        { "trigger": "cyrus_bind()", "contents": "cyrus_bind(${1:connection}, ${2:callbacks})$0" },
        { "trigger": "cyrus_close()", "contents": "cyrus_close(${1:connection})$0" },
        { "trigger": "cyrus_connect()", "contents": "cyrus_connect(${1:[host]}${2:[, port]}${3:[, flags]})$0" },
        { "trigger": "cyrus_query()", "contents": "cyrus_query(${1:connection}, ${2:query})$0" },
        { "trigger": "cyrus_unbind()", "contents": "cyrus_unbind(${1:connection}, ${2:trigger_name})$0" },
        */
        { "trigger": "date()", "contents": "date(${1:format}${2:[, timestamp]})$0" },
        { "trigger": "date_add()", "contents": "date_add(${1:object}, ${2:interval})$0" },
        { "trigger": "date_create()", "contents": "date_create(${1:[time]}${2:[, timezone]})$0" },
        { "trigger": "date_create_from_format()", "contents": "date_create_from_format(${1:format}, ${2:time}${3:[, timezone]})$0" },
        { "trigger": "date_date_set()", "contents": "date_date_set(${1:object}, ${2:year}, ${2:month}, ${3:day})$0" },
        { "trigger": "date_default_timezone_get()", "contents": "date_default_timezone_get()" },
        { "trigger": "date_default_timezone_set()", "contents": "date_default_timezone_set(${1:timezone_identifier})$0" },
        { "trigger": "date_diff()", "contents": "date_diff(${1:datetime1}, ${2:datetime2}${3:[, absolute]})$0" },
        { "trigger": "date_format()", "contents": "date_format(${1:object}, ${2:format})$0" },
        { "trigger": "date_get_last_errors()", "contents": "date_get_last_errors()" },
        { "trigger": "date_interval_create_from_date_string()", "contents": "date_interval_create_from_date_string(${1:time})$0" },
        { "trigger": "date_interval_format()", "contents": "date_interval_format(${1:format})$0" },
        { "trigger": "date_isodate_set()", "contents": "date_isodate_set(${1:object}, ${2:year}, ${3:week}${4:[, day]})$0" },
        { "trigger": "date_modify()", "contents": "date_modify(${1:object}, ${2:modify})$0" },
        { "trigger": "date_offset_get()", "contents": "date_offset_get(${1:object})$0" },
        { "trigger": "date_parse()", "contents": "date_parse(${1:date})$0" },
        { "trigger": "date_parse_from_format()", "contents": "date_parse_from_format(${1:format}, ${2:date})$0" },
        { "trigger": "date_sub()", "contents": "date_sub(${1:object}, ${2:interval})$0" },
        { "trigger": "date_sun_info()", "contents": "date_sun_info(${1:time}, ${2:latitude}, ${3:longitude})$0" },
        { "trigger": "date_sunrise()", "contents": "date_sunrise(${1:timestamp})$0" },
        { "trigger": "date_sunset()", "contents": "date_sunset(${1:timestamp})$0" },
        { "trigger": "date_time_set()", "contents": "date_time_set(${1:object}, ${2:hour}, ${3:minute}${4:[, second]})$0" },
        { "trigger": "date_timestamp_get()", "contents": "date_timestamp_get(${1:object})$0" },
        { "trigger": "date_timestamp_set()", "contents": "date_timestamp_set(${1:object}, ${2:unixtimestamp})$0" },
        { "trigger": "date_timezone_get()", "contents": "date_timezone_get(${1:object})$0" },
        { "trigger": "date_timezone_set()", "contents": "date_timezone_set(${1:object}, ${2:timezone})$0" },
        "DateInterval",
        { "trigger": "DateInterval()\tctor", "contents": "DateInterval(${1:interval_spec})$0" },
        "DatePeriod",
        { "trigger": "DatePeriod()\tctor", "contents": "DatePeriod($1)$0" },
        "DateTime",
        { "trigger": "DateTime()\tctor", "contents": "DateTime(${1:time}${2:[, timezone]})$0" },
        "DateTimeZone",
        { "trigger": "DateTimeZone()\tctor", "contents": "DateTimeZone(${1:timezone})$0" },
        /* IBM DB2
        { "trigger": "db2_autocommit()", "contents": "db2_autocommit(${1:connection})$0" },
        { "trigger": "db2_bind_param()", "contents": "db2_bind_param(${1:stmt}, ${2:parameter-number}, ${3:variable-name})$0" },
        { "trigger": "db2_client_info()", "contents": "db2_client_info(${1:connection})$0" },
        { "trigger": "db2_close()", "contents": "db2_close(${1:connection})$0" },
        { "trigger": "db2_column_privileges()", "contents": "db2_column_privileges(${1:connection})$0" },
        { "trigger": "db2_columns()", "contents": "db2_columns(${1:connection})$0" },
        { "trigger": "db2_commit()", "contents": "db2_commit(${1:connection})$0" },
        { "trigger": "db2_conn_error()", "contents": "db2_conn_error(${1:[connection]})$0" },
        { "trigger": "db2_conn_errormsg()", "contents": "db2_conn_errormsg(${1:[connection]})$0" },
        { "trigger": "db2_connect()", "contents": "db2_connect(${1:database}, ${2:username}, ${3:password})$0" },
        { "trigger": "db2_cursor_type()", "contents": "db2_cursor_type(${1:stmt})$0" },
        { "trigger": "db2_escape_string()", "contents": "db2_escape_string(${1:string_literal})$0" },
        { "trigger": "db2_exec()", "contents": "db2_exec(${1:connection}, ${2:statement})$0" },
        { "trigger": "db2_execute()", "contents": "db2_execute(${1:stmt})$0" },
        { "trigger": "db2_fetch_array()", "contents": "db2_fetch_array(${1:stmt})$0" },
        { "trigger": "db2_fetch_assoc()", "contents": "db2_fetch_assoc(${1:stmt})$0" },
        { "trigger": "db2_fetch_both()", "contents": "db2_fetch_both(${1:stmt})$0" },
        { "trigger": "db2_fetch_object()", "contents": "db2_fetch_object(${1:stmt})$0" },
        { "trigger": "db2_fetch_row()", "contents": "db2_fetch_row(${1:stmt})$0" },
        { "trigger": "db2_field_display_size()", "contents": "db2_field_display_size(${1:stmt}, ${2:column})$0" },
        { "trigger": "db2_field_name()", "contents": "db2_field_name(${1:stmt}, ${2:column})$0" },
        { "trigger": "db2_field_num()", "contents": "db2_field_num(${1:stmt}, ${2:column})$0" },
        { "trigger": "db2_field_precision()", "contents": "db2_field_precision(${1:stmt}, ${2:column})$0" },
        { "trigger": "db2_field_scale()", "contents": "db2_field_scale(${1:stmt}, ${2:column})$0" },
        { "trigger": "db2_field_type()", "contents": "db2_field_type(${1:stmt}, ${2:column})$0" },
        { "trigger": "db2_field_width()", "contents": "db2_field_width(${1:stmt}, ${2:column})$0" },
        { "trigger": "db2_foreign_keys()", "contents": "db2_foreign_keys(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:table-name})$0" },
        { "trigger": "db2_free_result()", "contents": "db2_free_result(${1:stmt})$0" },
        { "trigger": "db2_free_stmt()", "contents": "db2_free_stmt(${1:stmt})$0" },
        { "trigger": "db2_get_option()", "contents": "db2_get_option(${1:resource}, ${2:option})$0" },
        { "trigger": "db2_last_insert_id()", "contents": "db2_last_insert_id(${1:resource})$0" },
        { "trigger": "db2_lob_read()", "contents": "db2_lob_read(${1:stmt}, ${2:colnum}, ${3:length})$0" },
        { "trigger": "db2_next_result()", "contents": "db2_next_result(${1:stmt})$0" },
        { "trigger": "db2_num_fields()", "contents": "db2_num_fields(${1:stmt})$0" },
        { "trigger": "db2_num_rows()", "contents": "db2_num_rows(${1:stmt})$0" },
        { "trigger": "db2_pclose()", "contents": "db2_pclose(${1:resource})$0" },
        { "trigger": "db2_pconnect()", "contents": "db2_pconnect(${1:database}, ${2:username}, ${3:password})$0" },
        { "trigger": "db2_prepare()", "contents": "db2_prepare(${1:connection}, ${2:statement})$0" },
        { "trigger": "db2_primary_keys()", "contents": "db2_primary_keys(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:table-name})$0" },
        { "trigger": "db2_procedure_columns()", "contents": "db2_procedure_columns(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:procedure}, ${5:parameter})$0" },
        { "trigger": "db2_procedures()", "contents": "db2_procedures(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:procedure})$0" },
        { "trigger": "db2_result()", "contents": "db2_result(${1:stmt}, ${2:column})$0" },
        { "trigger": "db2_rollback()", "contents": "db2_rollback(${1:connection})$0" },
        { "trigger": "db2_server_info()", "contents": "db2_server_info(${1:connection})$0" },
        { "trigger": "db2_set_option()", "contents": "db2_set_option(${1:resource}, ${2:options}, ${3:type})$0" },
        { "trigger": "db2_special_columns()", "contents": "db2_special_columns(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:table_name}, ${5:scope})$0" },
        { "trigger": "db2_statistics()", "contents": "db2_statistics(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:table-name}, ${5:unique})$0" },
        { "trigger": "db2_stmt_error()", "contents": "db2_stmt_error(${1:[stmt]})$0" },
        { "trigger": "db2_stmt_errormsg()", "contents": "db2_stmt_errormsg(${1:[stmt]})$0" },
        { "trigger": "db2_table_privileges()", "contents": "db2_table_privileges(${1:connection})$0" },
        { "trigger": "db2_tables()", "contents": "db2_tables(${1:connection})$0" },
        */
        /* DBA Berkeley DB style databases
        { "trigger": "dba_close()", "contents": "dba_close(${1:handle})$0" },
        { "trigger": "dba_delete()", "contents": "dba_delete(${1:key}, ${2:handle})$0" },
        { "trigger": "dba_exists()", "contents": "dba_exists(${1:key}, ${2:handle})$0" },
        { "trigger": "dba_fetch()", "contents": "dba_fetch(${1:key}, ${2:handle})$0" },
        { "trigger": "dba_firstkey()", "contents": "dba_firstkey(${1:handle})$0" },
        { "trigger": "dba_handlers()", "contents": "dba_handlers(${1:[full_info]})$0" },
        { "trigger": "dba_insert()", "contents": "dba_insert(${1:key}, ${2:value}, ${3:handle})$0" },
        { "trigger": "dba_key_split()", "contents": "dba_key_split(${1:key})$0" },
        { "trigger": "dba_list()", "contents": "dba_list()" },
        { "trigger": "dba_nextkey()", "contents": "dba_nextkey(${1:handle})$0" },
        { "trigger": "dba_open()", "contents": "dba_open(${1:path}, ${2:mode})$0" },
        { "trigger": "dba_optimize()", "contents": "dba_optimize(${1:handle})$0" },
        { "trigger": "dba_popen()", "contents": "dba_popen(${1:path}, ${2:mode})$0" },
        { "trigger": "dba_replace()", "contents": "dba_replace(${1:key}, ${2:value}, ${3:handle})$0" },
        { "trigger": "dba_sync()", "contents": "dba_sync(${1:handle})$0" },
        */
        /* dBase (dbf) database - moved to PECL as of PHP 5.3.0
        { "trigger": "dbase_add_record()", "contents": "dbase_add_record(${1:dbase_identifier}, ${2:record})$0" },
        { "trigger": "dbase_close()", "contents": "dbase_close(${1:dbase_identifier})$0" },
        { "trigger": "dbase_create()", "contents": "dbase_create(${1:filename}, ${2:fields})$0" },
        { "trigger": "dbase_delete_record()", "contents": "dbase_delete_record(${1:dbase_identifier}, ${2:record_number})$0" },
        { "trigger": "dbase_get_header_info()", "contents": "dbase_get_header_info(${1:dbase_identifier})$0" },
        { "trigger": "dbase_get_record()", "contents": "dbase_get_record(${1:dbase_identifier}, ${2:record_number})$0" },
        { "trigger": "dbase_get_record_with_names()", "contents": "dbase_get_record_with_names(${1:dbase_identifier}, ${2:record_number})$0" },
        { "trigger": "dbase_numfields()", "contents": "dbase_numfields(${1:dbase_identifier})$0" },
        { "trigger": "dbase_numrecords()", "contents": "dbase_numrecords(${1:dbase_identifier})$0" },
        { "trigger": "dbase_open()", "contents": "dbase_open(${1:filename}, ${2:mode})$0" },
        { "trigger": "dbase_pack()", "contents": "dbase_pack(${1:dbase_identifier})$0" },
        { "trigger": "dbase_replace_record()", "contents": "dbase_replace_record(${1:dbase_identifier}, ${2:record}, ${3:record_number})$0" },
        */
        /* DB++
        { "trigger": "dbplus_add()", "contents": "dbplus_add(${1:relation}, ${2:tuple})$0" },
        { "trigger": "dbplus_aql()", "contents": "dbplus_aql(${1:query})$0" },
        { "trigger": "dbplus_chdir()", "contents": "dbplus_chdir(${1:[newdir]})$0" },
        { "trigger": "dbplus_close()", "contents": "dbplus_close(${1:relation})$0" },
        { "trigger": "dbplus_curr()", "contents": "dbplus_curr(${1:relation}, ${2:tuple})$0" },
        { "trigger": "dbplus_errcode()", "contents": "dbplus_errcode(${1:[errno]})$0" },
        { "trigger": "dbplus_errno()", "contents": "dbplus_errno()" },
        { "trigger": "dbplus_find()", "contents": "dbplus_find(${1:relation}, ${2:constraints}, ${3:tuple})$0" },
        { "trigger": "dbplus_first()", "contents": "dbplus_first(${1:relation}, ${2:tuple})$0" },
        { "trigger": "dbplus_flush()", "contents": "dbplus_flush(${1:relation})$0" },
        { "trigger": "dbplus_freealllocks()", "contents": "dbplus_freealllocks()" },
        { "trigger": "dbplus_freelock()", "contents": "dbplus_freelock(${1:relation}, ${2:tuple})$0" },
        { "trigger": "dbplus_freerlocks()", "contents": "dbplus_freerlocks(${1:relation})$0" },
        { "trigger": "dbplus_getlock()", "contents": "dbplus_getlock(${1:relation}, ${2:tuple})$0" },
        { "trigger": "dbplus_getunique()", "contents": "dbplus_getunique(${1:relation}, ${2:uniqueid})$0" },
        { "trigger": "dbplus_info()", "contents": "dbplus_info(${1:relation}, ${2:key}, ${3:result})$0" },
        { "trigger": "dbplus_last()", "contents": "dbplus_last(${1:relation}, ${2:tuple})$0" },
        { "trigger": "dbplus_lockrel()", "contents": "dbplus_lockrel(${1:relation})$0" },
        { "trigger": "dbplus_next()", "contents": "dbplus_next(${1:relation}, ${2:tuple})$0" },
        { "trigger": "dbplus_open()", "contents": "dbplus_open(${1:name})$0" },
        { "trigger": "dbplus_prev()", "contents": "dbplus_prev(${1:relation}, ${2:tuple})$0" },
        { "trigger": "dbplus_rchperm()", "contents": "dbplus_rchperm(${1:relation}, ${2:mask}, ${3:user}, ${4:group})$0" },
        { "trigger": "dbplus_rcreate()", "contents": "dbplus_rcreate(${1:name}, ${2:domlist})$0" },
        { "trigger": "dbplus_rcrtexact()", "contents": "dbplus_rcrtexact(${1:name}, ${2:relation})$0" },
        { "trigger": "dbplus_rcrtlike()", "contents": "dbplus_rcrtlike(${1:name}, ${2:relation})$0" },
        { "trigger": "dbplus_resolve()", "contents": "dbplus_resolve(${1:relation_name})$0" },
        { "trigger": "dbplus_restorepos()", "contents": "dbplus_restorepos(${1:relation}, ${2:tuple})$0" },
        { "trigger": "dbplus_rkeys()", "contents": "dbplus_rkeys(${1:relation}, ${2:domlist})$0" },
        { "trigger": "dbplus_ropen()", "contents": "dbplus_ropen(${1:name})$0" },
        { "trigger": "dbplus_rquery()", "contents": "dbplus_rquery(${1:query})$0" },
        { "trigger": "dbplus_rrename()", "contents": "dbplus_rrename(${1:relation}, ${2:name})$0" },
        { "trigger": "dbplus_rsecindex()", "contents": "dbplus_rsecindex(${1:relation}, ${2:domlist}, ${3:type})$0" },
        { "trigger": "dbplus_runlink()", "contents": "dbplus_runlink(${1:relation})$0" },
        { "trigger": "dbplus_rzap()", "contents": "dbplus_rzap(${1:relation})$0" },
        { "trigger": "dbplus_savepos()", "contents": "dbplus_savepos(${1:relation})$0" },
        { "trigger": "dbplus_setindex()", "contents": "dbplus_setindex(${1:relation}, ${2:idx_name})$0" },
        { "trigger": "dbplus_setindexbynumber()", "contents": "dbplus_setindexbynumber(${1:relation}, ${2:idx_number})$0" },
        { "trigger": "dbplus_sql()", "contents": "dbplus_sql(${1:query})$0" },
        { "trigger": "dbplus_tcl()", "contents": "dbplus_tcl(${1:sid}, ${2:script})$0" },
        { "trigger": "dbplus_tremove()", "contents": "dbplus_tremove(${1:relation}, ${2:tuple})$0" },
        { "trigger": "dbplus_undo()", "contents": "dbplus_undo(${1:relation})$0" },
        { "trigger": "dbplus_undoprepare()", "contents": "dbplus_undoprepare(${1:relation})$0" },
        { "trigger": "dbplus_unlockrel()", "contents": "dbplus_unlockrel(${1:relation})$0" },
        { "trigger": "dbplus_unselect()", "contents": "dbplus_unselect(${1:relation})$0" },
        { "trigger": "dbplus_update()", "contents": "dbplus_update(${1:relation}, ${2:old}, ${3:new})$0" },
        { "trigger": "dbplus_xlockrel()", "contents": "dbplus_xlockrel(${1:relation})$0" },
        { "trigger": "dbplus_xunlockrel()", "contents": "dbplus_xunlockrel(${1:relation})$0" },
        */
        /* dbx - moved to PECL as of PHP 5.1.0
        { "trigger": "dbx_close()", "contents": "dbx_close(${1:link_identifier})$0" },
        { "trigger": "dbx_compare()", "contents": "dbx_compare(${1:row_a}, ${2:row_b}, ${3:column_key})$0" },
        { "trigger": "dbx_connect()", "contents": "dbx_connect(${1:module}, ${2:host}, ${3:database}, ${4:username}, ${5:password})$0" },
        { "trigger": "dbx_error()", "contents": "dbx_error(${1:link_identifier})$0" },
        { "trigger": "dbx_escape_string()", "contents": "dbx_escape_string(${1:link_identifier}, ${2:text})$0" },
        { "trigger": "dbx_fetch_row()", "contents": "dbx_fetch_row(${1:result_identifier})$0" },
        { "trigger": "dbx_query()", "contents": "dbx_query(${1:link_identifier}, ${2:sql_statement})$0" },
        { "trigger": "dbx_sort()", "contents": "dbx_sort(${1:result}, ${2:user_compare_function})$0" },
        */
        { "trigger": "dcgettext()", "contents": "dcgettext(${1:domain}, ${2:message}, ${3:category})$0" },
        { "trigger": "dcngettext()", "contents": "dcngettext(${1:domain}, ${2:msgid1}, ${3:msgid2}, ${4:n}, ${5:category})$0" },
        { "trigger": "deaggregate()", "contents": "deaggregate(${1:object})$0" },
        { "trigger": "debug_backtrace()", "contents": "debug_backtrace(${1:[options]}${2:[, limit]})$0" },
        { "trigger": "debug_print_backtrace()", "contents": "debug_print_backtrace()" },
        { "trigger": "debug_zval_dump()", "contents": "debug_zval_dump(${1:variable})$0" },
        { "trigger": "decbin()", "contents": "decbin(${1:number})$0" },
        { "trigger": "dechex()", "contents": "dechex(${1:number})$0" },
        { "trigger": "decoct()", "contents": "decoct(${1:number})$0" },
        { "trigger": "define()", "contents": "define(${1:name}, ${2:value}${3:[, case_insensitive]})$0" },
        { "trigger": "define_syslog_variables()\tdeprecated 5.3.x", "contents": "define_syslog_variables()" },
        { "trigger": "defined()", "contents": "defined(${1:name})$0" },
        { "trigger": "deg2rad()", "contents": "deg2rad(${1:number})$0" },
        { "trigger": "delete()\tdummy", "contents": "delete()" },
        { "trigger": "dgettext()", "contents": "dgettext(${1:domain}, ${2:message})$0" },
        { "trigger": "die()", "contents": "die(${1:[status]})$0" },
        // Direct IO - moved to PECL as of PHP 5.1.0
        { "trigger": "dio_close()", "contents": "dio_close(${1:fd})$0" },
        { "trigger": "dio_fcntl()", "contents": "dio_fcntl(${1:fd}, ${2:cmd})$0" },
        { "trigger": "dio_open()", "contents": "dio_open(${1:filename}, ${2:flags})$0" },
        { "trigger": "dio_read()", "contents": "dio_read(${1:fd})$0" },
        { "trigger": "dio_seek()", "contents": "dio_seek(${1:fd}, ${2:pos})$0" },
        { "trigger": "dio_stat()", "contents": "dio_stat(${1:fd})$0" },
        { "trigger": "dio_tcsetattr()", "contents": "dio_tcsetattr(${1:fd}, ${2:options})$0" },
        { "trigger": "dio_truncate()", "contents": "dio_truncate(${1:fd}, ${2:offset})$0" },
        { "trigger": "dio_write()", "contents": "dio_write(${1:fd}, ${2:data})$0" },

        { "trigger": "dir()", "contents": "dir(${1:directory}${2:[, context]})$0" },
        "DirectoryIterator",
        { "trigger": "DirectoryIterator()\tctor", "contents": "DirectoryIterator(${1:path})$0" },
        { "trigger": "dirname()", "contents": "dirname(${1:path})$0" },
        { "trigger": "disk_free_space()", "contents": "disk_free_space(${1:directory})$0" },
        { "trigger": "disk_total_space()", "contents": "disk_total_space(${1:directory})$0" },
        { "trigger": "diskfreespace()", "contents": "diskfreespace(${1:directory})$0" },
        { "trigger": "dl()\tdeprecated 5.3.x", "contents": "dl(${1:library})$0" },
        { "trigger": "dngettext()", "contents": "dngettext(${1:domain}, ${2:msgid1}, ${3:msgid2}, ${4:n})$0" },
        { "trigger": "dns_check_record()", "contents": "dns_check_record(${1:host}${2:[, type]})$0" },
        { "trigger": "dns_get_mx()", "contents": "dns_get_mx(${1:hostname}, ${2:mxhosts}${3:[, weight]})$0" },
        { "trigger": "dns_get_record()", "contents": "dns_get_record(${1:hostname})$0" },
        { "trigger": "dom_import_simplexml()", "contents": "dom_import_simplexml(${1:node})$0" },
        "DomainException",
        "DOMAttr",      // PHP 5 - use DOM XML with PHP 4
        { "trigger": "DOMAttr()\tctor", "contents": "DOMAttr(${1:name}${2:[, value]})$0" },
        { "trigger": "isId()\tDOMAttr", "contents": "isId()" },
        "DOMCdataSection",
        { "trigger": "DOMCdataSection()\tctor", "contents": "DOMCdataSection(${1:value})$0" },
        "DOMCharacterData",
        { "trigger": "appendData()\tDOMCharacterData", "contents": "appendData(${1:data})$0" },
        { "trigger": "deleteData()\tDOMCharacterData", "contents": "deleteData(${1:offset}, ${2:count})$0" },
        { "trigger": "insertData()\tDOMCharacterData", "contents": "insertData(${1:offset}, ${2:data})$0" },
        { "trigger": "replaceData()\tDOMCharacterData", "contents": "replaceData(${1:offset}, ${2:count}, ${3:data})$0" },
        { "trigger": "substringData()\tDOMCharacterData", "contents": "substringData(${1:offset}, ${2:count})$0" },
        "DOMComment",
        { "trigger": "DOMComment()\tctor", "contents": "DOMComment(${1:[value]})$0" },
        "DOMDocument",
        { "trigger": "DOMDocument()\tctor", "contents": "DOMDocument(${1:[version]}${2:[, encoding]})$0" },
        { "trigger": "createAttribute()\tDOMDocument", "contents": "createAttribute(${1:name})$0" },
        { "trigger": "createAttributeNS()\tDOMDocument", "contents": "createAttributeNS(${1:namespaceURI}, ${2:qualifiedName})$0" },
        { "trigger": "createCDATASection()\tDOMDocument", "contents": "createCDATASection(${1:data})$0" },
        { "trigger": "createComment()\tDOMDocument", "contents": "createComment(${1:data})$0" },
        { "trigger": "createDocumentFragment()\tDOMDocument", "contents": "createDocumentFragment()" },
        { "trigger": "createElement()\tDOMDocument", "contents": "createElement(${1:name}${2:[, value]})$0" },
        { "trigger": "createElementNS()\tDOMDocument", "contents": "createElementNS(${1:namespaceURI}, ${2:qualifiedName}${3:[, value]})$0" },
        { "trigger": "createEntityReference()\tDOMDocument", "contents": "createEntityReference(${1:name})$0" },
        { "trigger": "createProcessingInstruction()\tDOMDocument", "contents": "createProcessingInstruction(${1:target}${2:[, data]})$0" },
        { "trigger": "createTextNode()\tDOMDocument", "contents": "createTextNode(${1:content})$0" },
        { "trigger": "getElementById()\tDOMDocument", "contents": "getElementById(${1:elementId})$0" },
        { "trigger": "getElementsByTagName()\tDOMDocument", "contents": "getElementsByTagName(${1:name})$0" },
        { "trigger": "getElementsByTagNameNS()\tDOMDocument", "contents": "getElementsByTagNameNS(${1:namespaceURI}, ${2:localName})$0" },
        { "trigger": "importNode()\tDOMDocument", "contents": "importNode(${1:importedNode}${2:[, deep})$0" },
        { "trigger": "load()\tDOMDocument", "contents": "load(${1:filename}${2:[, options=0]})$0" },
        { "trigger": "loadHTML()\tDOMDocument", "contents": "loadHTML(${1:source})$0" },
        { "trigger": "loadHTMLFile()\tDOMDocument", "contents": "loadHTMLFile(${1:filename})$0" },
        { "trigger": "loadXML()\tDOMDocument", "contents": "loadXML(${1:source}${2:[, options=0]})$0" },
        { "trigger": "normalizeDocument()\tDOMDocument", "contents": "normalizeDocument()" },
        { "trigger": "registerNodeClass()\tDOMDocument", "contents": "registerNodeClass(${1:baseclass}, ${2:extendedclass})$0" },
        { "trigger": "relaxNGValidate()\tDOMDocument", "contents": "relaxNGValidate(${1:filename})$0" },
        { "trigger": "relaxNGValidateSource()\tDOMDocument", "contents": "relaxNGValidateSource(${1:source})$0" },
        { "trigger": "save()\tDOMDocument", "contents": "save(${1:filename}${2:[, options]})$0" },
        { "trigger": "saveHTML()\tDOMDocument", "contents": "saveHTML(${1:[node=NULL]})$0" },
        { "trigger": "saveHTMLFile()\tDOMDocument", "contents": "saveHTMLFile(${1:filename})$0" },
        { "trigger": "saveXML()\tDOMDocument", "contents": "saveXML(${1:[node]}${2:[, options]})$0" },
        { "trigger": "schemaValidate()\tDOMDocument", "contents": "schemaValidate(${1:filename})$0" },
        { "trigger": "schemaValidateSource()\tDOMDocument", "contents": "schemaValidateSource(${1:source})$0" },
        { "trigger": "validate()\tDOMDocument", "contents": "validate()" },
        { "trigger": "xinclude()\tDOMDocument", "contents": "xinclude(${1:[options]})$0" },
        "DOMDocumentFragment",
        { "trigger": "appendXML()\tDOMDocumentFragment", "contents": "appendXML(${1:data})$0" },
        "DOMDocumentType",
        "DOMElement",
        { "trigger": "DOMElement()\tctor", "contents": "DOMElement(${1:name}${2:[, value]}${3:[, namespaceURI]})$0" },
        { "trigger": "getAttribute()\tDOMElement", "contents": "getAttribute(${1:name})$0" },
        { "trigger": "getAttributeNode()\tDOMElement", "contents": "getAttributeNode(${1:name})$0" },
        { "trigger": "getAttributeNodeNS()\tDOMElement", "contents": "getAttributeNodeNS(${1:namespaceURI}, ${2:localName})$0" },
        { "trigger": "getAttributeNS()\tDOMElement", "contents": "getAttributeNS(${1:namespaceURI}, ${2:localName})$0" },
        { "trigger": "getElementsByTagName()\tDOMElement", "contents": "getElementsByTagName(${1:name})$0" },
        { "trigger": "getElementsByTagNameNS()\tDOMElement", "contents": "getElementsByTagNameNS(${1:namespaceURI}, ${2:localName})$0" },
        { "trigger": "hasAttribute()\tDOMElement", "contents": "hasAttribute(${1:name})$0" },
        { "trigger": "hasAttributeNS()\tDOMElement", "contents": "hasAttributeNS(${1:namespaceURI}, ${2:localName})$0" },
        { "trigger": "removeAttribute()\tDOMElement", "contents": "removeAttribute(${1:name})$0" },
        { "trigger": "removeAttributeNode()\tDOMElement", "contents": "removeAttributeNode(${1:oldnode})$0" },
        { "trigger": "removeAttributeNS()\tDOMElement", "contents": "removeAttributeNS(${1:namespaceURI}, ${2:localName})$0" },
        { "trigger": "setAttribute()\tDOMElement", "contents": "setAttribute(${1:name}, ${2:value})$0" },
        { "trigger": "setAttributeNode()\tDOMElement", "contents": "setAttributeNode(${1:attr})$0" },
        { "trigger": "setAttributeNodeNS()\tDOMElement", "contents": "setAttributeNodeNS(${1:attr})$0" },
        { "trigger": "setAttributeNS()\tDOMElement", "contents": "setAttributeNS(${1:namespaceURI}, ${2:qualifiedName}, ${3:value})$0" },
        { "trigger": "setIdAttribute()\tDOMElement", "contents": "setIdAttribute(${1:name}, ${2:isId})$0" },
        { "trigger": "setIdAttributeNode()\tDOMElement", "contents": "setIdAttributeNode(${1:attr}, ${2:isId})$0" },
        { "trigger": "setIdAttributeNS()\tDOMElement", "contents": "setIdAttributeNS(${1:namespaceURI}, ${1:localName}, ${2:isId})$0" },
        "DOMEntity",
        "DOMEntityReference",
        { "trigger": "DOMEntityReference()\tctor", "contents": "DOMEntityReference(${1:name})$0" },
        "DOMException",
        "DOMImplementation",
        { "trigger": "createDocument()\tDOMImplementation", "contents": "createDocument(${1:[namespaceURI=NULL]}${2:[, qualifiedName=NULL]}${3:[, doctype=NULL]})$0" },
        { "trigger": "createDocumentType()\tDOMImplementation", "contents": "createDocumentType(${1:[qualifiedName=NULL]}${2:[, publicId=NULL]}${3:[, systemId=NULL]})$0" },
        { "trigger": "hasFeature()\tDOMImplementation", "contents": "hasFeature(${1:feature}, ${2:version})$0" },
        "DOMNamedNodeMap",
        { "trigger": "getNamedItem()\tDOMNamedNodeMap", "contents": "getNamedItem(${1:name})$0" },
        { "trigger": "getNamedItemNS()\tDOMNamedNodeMap", "contents": "getNamedItemNS(${1:namespaceURI}, ${2:localName})$0" },
        { "trigger": "item()\tDOMNamedNodeMap", "contents": "item(${1:index})$0" },
        "DOMNode",
        { "trigger": "appendChild()\tDOMNode", "contents": "appendChild(${1:newnode})$0" },
        { "trigger": "C14N()\tDOMNode", "contents": "C14N(${1:exclusive}${2:[, with_comments]}${3:[, xpath]}${4:[, ns_prefixes]})$0" },
        { "trigger": "C14NFile()\tDOMNode", "contents": "C14NFile(${1:uri}${2:[, exclusive]}${3:[, with_comments]}${4:[, xpath]}${5:[, ns_prefixes]})$0" },
        { "trigger": "cloneNode()\tDOMNode", "contents": "cloneNode(${1:[deep]})$0" },
        { "trigger": "getLineNo()\tDOMNode", "contents": "getLineNo()" },
        { "trigger": "getNodePath()\tDOMNode", "contents": "getNodePath()" },
        { "trigger": "hasAttributes()\tDOMNode", "contents": "hasAttributes()" },
        { "trigger": "hasChildNodes()\tDOMNode", "contents": "hasChildNodes()" },
        { "trigger": "insertBefore()\tDOMNode", "contents": "insertBefore(${1:newnode}${2:[, refnode]})$0" },
        { "trigger": "isDefaultNamespace()\tDOMNode", "contents": "isDefaultNamespace(${1:namespaceURI})$0" },
        { "trigger": "isSameNode()\tDOMNode", "contents": "isSameNode(${1:node})$0" },
        { "trigger": "isSupported()\tDOMNode", "contents": "isSupported(${1:feature}, ${2:version})$0" },
        { "trigger": "lookupNamespaceURI()\tDOMNode", "contents": "lookupNamespaceURI(${1:prefix})$0" },
        { "trigger": "lookupPrefix()\tDOMNode", "contents": "lookupPrefix(${1:namespaceURI})$0" },
        { "trigger": "normalize()\tDOMNode", "contents": "normalize()" },
        { "trigger": "removeChild()\tDOMNode", "contents": "removeChild(${1:oldnode})$0" },
        { "trigger": "replaceChild()\tDOMNode", "contents": "replaceChild(${1:newnode}, ${2:oldnode})$0" },
        "DOMNodeList",
        { "trigger": "item()\tDOMNodeList", "contents": "item(${1:index})$0" },
        "DOMNotation",
        "DOMProcessingInstruction",
        { "trigger": "DOMProcessingInstruction()\tctor", "contents": "DOMProcessingInstruction(${1:name}${2:[, value]})$0" },
        "DOMText",
        { "trigger": "DOMText()\tctor", "contents": "DOMText(${1:[value]})$0" },
        { "trigger": "isWhitespaceInElementContent()\tDOMText", "contents": "isWhitespaceInElementContent()" },
        { "trigger": "splitText()\tDOMText", "contents": "splitText(${1:offset})$0" },
        "DOMXPath",
        { "trigger": "DOMXPath()\tctor", "contents": "DOMXPath(${1:doc})$0" },
        { "trigger": "evaluate()\tDOMXPath", "contents": "evaluate(${1:expression}${2:[, contextnode]}${3:[, registerNodeNS=true]})$0" },
        { "trigger": "query()\tDOMXPath", "contents": "query(${1:expression}${2:[, contextnode]}${3:[, registerNodeNS=true]})$0" },
        { "trigger": "registerNamespace()\tDOMXPath", "contents": "registerNamespace(${1:prefix}, ${2:namespaceURI})$0" },
        { "trigger": "registerPhpFunctions()\tDOMXPath", "contents": "registerPhpFunctions(${1:[restrict]})$0" },

        { "trigger": "DOTNET()", "contents": "dotnet(${1:assembly_name}, ${2:class_name}${3:[, codepage]})$0" },
        { "trigger": "dotnet_load()", "contents": "dotnet_load(${1:assembly_name}${2:[, datatype_name]}${3:[, codepage]})$0" },
        { "trigger": "doubleval()", "contents": "doubleval(${1:var})$0" },
        { "trigger": "each()", "contents": "each(${1:array})$0" },
        { "trigger": "easter_date()", "contents": "easter_date(${1:[year]})$0" },
        { "trigger": "easter_days()", "contents": "easter_days(${1:year}${2:[, method]})$0" },

        /* Eio is not available on Windows platforms.
        { "trigger": "eio_busy()", "contents": "eio_busy($1)$0" },
        { "trigger": "eio_cancel()", "contents": "eio_cancel($1)$0" },
        { "trigger": "eio_chmod()", "contents": "eio_chmod($1)$0" },
        { "trigger": "eio_chown()", "contents": "eio_chown($1)$0" },
        { "trigger": "eio_close()", "contents": "eio_close($1)$0" },
        { "trigger": "eio_custom()", "contents": "eio_custom($1)$0" },
        { "trigger": "eio_dup2()", "contents": "eio_dup2($1)$0" },
        { "trigger": "eio_event_loop()", "contents": "eio_event_loop($1)$0" },
        { "trigger": "eio_fallocate()", "contents": "eio_fallocate($1)$0" },
        { "trigger": "eio_fchmod()", "contents": "eio_fchmod($1)$0" },
        { "trigger": "eio_fchown()", "contents": "eio_fchown($1)$0" },
        { "trigger": "eio_fdatasync()", "contents": "eio_fdatasync($1)$0" },
        { "trigger": "eio_fstat()", "contents": "eio_fstat($1)$0" },
        { "trigger": "eio_fstatvfs()", "contents": "eio_fstatvfs($1)$0" },
        { "trigger": "eio_fsync()", "contents": "eio_fsync($1)$0" },
        { "trigger": "eio_ftruncate()", "contents": "eio_ftruncate($1)$0" },
        { "trigger": "eio_futime()", "contents": "eio_futime($1)$0" },
        { "trigger": "eio_get_event_stream()", "contents": "eio_get_event_stream($1)$0" },
        { "trigger": "eio_grp()", "contents": "eio_grp($1)$0" },
        { "trigger": "eio_grp_add()", "contents": "eio_grp_add($1)$0" },
        { "trigger": "eio_grp_cancel()", "contents": "eio_grp_cancel($1)$0" },
        { "trigger": "eio_grp_limit()", "contents": "eio_grp_limit($1)$0" },
        { "trigger": "eio_link()", "contents": "eio_link($1)$0" },
        { "trigger": "eio_lstat()", "contents": "eio_lstat($1)$0" },
        { "trigger": "eio_mkdir()", "contents": "eio_mkdir($1)$0" },
        { "trigger": "eio_mknod()", "contents": "eio_mknod($1)$0" },
        { "trigger": "eio_nop()", "contents": "eio_nop($1)$0" },
        { "trigger": "eio_npending()", "contents": "eio_npending($1)$0" },
        { "trigger": "eio_nready()", "contents": "eio_nready($1)$0" },
        { "trigger": "eio_nreqs()", "contents": "eio_nreqs($1)$0" },
        { "trigger": "eio_nthreads()", "contents": "eio_nthreads($1)$0" },
        { "trigger": "eio_open()", "contents": "eio_open($1)$0" },
        { "trigger": "eio_poll()", "contents": "eio_poll($1)$0" },
        { "trigger": "eio_read()", "contents": "eio_read($1)$0" },
        { "trigger": "eio_readahead()", "contents": "eio_readahead($1)$0" },
        { "trigger": "eio_readdir()", "contents": "eio_readdir($1)$0" },
        { "trigger": "eio_readlink()", "contents": "eio_readlink($1)$0" },
        { "trigger": "eio_realpath()", "contents": "eio_realpath($1)$0" },
        { "trigger": "eio_rename()", "contents": "eio_rename($1)$0" },
        { "trigger": "eio_rmdir()", "contents": "eio_rmdir($1)$0" },
        { "trigger": "eio_sendfile()", "contents": "eio_sendfile($1)$0" },
        { "trigger": "eio_set_max_idle()", "contents": "eio_set_max_idle($1)$0" },
        { "trigger": "eio_set_max_parallel()", "contents": "eio_set_max_parallel($1)$0" },
        { "trigger": "eio_set_max_poll_reqs()", "contents": "eio_set_max_poll_reqs($1)$0" },
        { "trigger": "eio_set_max_poll_time()", "contents": "eio_set_max_poll_time($1)$0" },
        { "trigger": "eio_set_min_parallel()", "contents": "eio_set_min_parallel($1)$0" },
        { "trigger": "eio_stat()", "contents": "eio_stat($1)$0" },
        { "trigger": "eio_statvfs()", "contents": "eio_statvfs($1)$0" },
        { "trigger": "eio_symlink()", "contents": "eio_symlink($1)$0" },
        { "trigger": "eio_sync()", "contents": "eio_sync($1)$0" },
        { "trigger": "eio_sync_file_range()", "contents": "eio_sync_file_range($1)$0" },
        { "trigger": "eio_syncfs()", "contents": "eio_syncfs($1)$0" },
        { "trigger": "eio_truncate()", "contents": "eio_truncate($1)$0" },
        { "trigger": "eio_unlink()", "contents": "eio_unlink($1)$0" },
        { "trigger": "eio_utime()", "contents": "eio_utime($1)$0" },
        { "trigger": "eio_write()", "contents": "eio_write($1)$0" },
        */
        { "trigger": "empty()", "contents": "empty(${1:var})$0" },
        "EmptyIterator",
        /* Enchant spelling library
        { "trigger": "enchant_broker_describe()", "contents": "enchant_broker_describe(${1:broker})$0" },
        { "trigger": "enchant_broker_dict_exists()", "contents": "enchant_broker_dict_exists(${1:broker}, ${2:tag})$0" },
        { "trigger": "enchant_broker_free()", "contents": "enchant_broker_free(${1:broker})$0" },
        { "trigger": "enchant_broker_free_dict()", "contents": "enchant_broker_free_dict(${1:dict})$0" },
        { "trigger": "enchant_broker_get_error()", "contents": "enchant_broker_get_error(${1:broker})$0" },
        { "trigger": "enchant_broker_init()", "contents": "enchant_broker_init()" },
        { "trigger": "enchant_broker_list_dicts()", "contents": "enchant_broker_list_dicts(${1:broker})$0" },
        { "trigger": "enchant_broker_request_dict()", "contents": "enchant_broker_request_dict(${1:broker}, ${2:tag})$0" },
        { "trigger": "enchant_broker_request_pwl_dict()", "contents": "enchant_broker_request_pwl_dict(${1:broker}, ${2:filename})$0" },
        { "trigger": "enchant_broker_set_ordering()", "contents": "enchant_broker_set_ordering(${1:broker}, ${2:tag}, ${3:ordering})$0" },
        { "trigger": "enchant_dict_add_to_personal()", "contents": "enchant_dict_add_to_personal(${1:dict}, ${2:word})$0" },
        { "trigger": "enchant_dict_add_to_session()", "contents": "enchant_dict_add_to_session(${1:dict}, ${2:word})$0" },
        { "trigger": "enchant_dict_check()", "contents": "enchant_dict_check(${1:dict}, ${2:word})$0" },
        { "trigger": "enchant_dict_describe()", "contents": "enchant_dict_describe(${1:dict})$0" },
        { "trigger": "enchant_dict_get_error()", "contents": "enchant_dict_get_error(${1:dict})$0" },
        { "trigger": "enchant_dict_is_in_session()", "contents": "enchant_dict_is_in_session(${1:dict}, ${2:word})$0" },
        { "trigger": "enchant_dict_quick_check()", "contents": "enchant_dict_quick_check(${1:dict}, ${2:word})$0" },
        { "trigger": "enchant_dict_store_replacement()", "contents": "enchant_dict_store_replacement(${1:dict}, ${2:mis}, ${3:cor})$0" },
        { "trigger": "enchant_dict_suggest()", "contents": "enchant_dict_suggest(${1:dict}, ${2:word})$0" },
        */
        { "trigger": "end()", "contents": "end(${1:array})$0" },
        { "trigger": "ereg()\tdeprecated 5.3.x", "contents": "ereg(${1:pattern}, ${2:string})$0" },
        { "trigger": "ereg_replace()\tdeprecated 5.3.x", "contents": "ereg_replace(${1:pattern}, ${2:replacement}, ${3:string})$0" },
        { "trigger": "eregi()\tdeprecated 5.3.x", "contents": "eregi(${1:pattern}, ${2:string})$0" },
        { "trigger": "eregi_replace()\tdeprecated 5.3.x", "contents": "eregi_replace(${1:pattern}, ${2:replacement}, ${3:string})$0" },
        { "trigger": "error_get_last()", "contents": "error_get_last()" },
        { "trigger": "error_log()", "contents": "error_log(${1:message})$0" },
        { "trigger": "error_reporting()", "contents": "error_reporting(${1:[level]})$0" },
        "ErrorException",
        { "trigger": "escapeshellarg()", "contents": "escapeshellarg(${1:arg})$0" },
        { "trigger": "escapeshellcmd()", "contents": "escapeshellcmd(${1:command})$0" },
        { "trigger": "eval()", "contents": "eval(${1:code})$0" },

        { "trigger": "event_add()", "contents": "event_add(${1:event}${2:[, timeout]})$0" },
        { "trigger": "event_base_free()", "contents": "event_base_free(${1:event_base})$0" },
        { "trigger": "event_base_loop()", "contents": "event_base_loop(${1:event_base}${2:[, flags]})$0" },
        { "trigger": "event_base_loopbreak()", "contents": "event_base_loopbreak(${1:event_base})$0" },
        { "trigger": "event_base_loopexit()", "contents": "event_base_loopexit(${1:event_base}${2:[, timeout]})$0" },
        { "trigger": "event_base_new()", "contents": "event_base_new()" },
        { "trigger": "event_base_priority_init()", "contents": "event_base_priority_init(${1:event_base}, ${2:npriorities})$0" },
        { "trigger": "event_base_set()", "contents": "event_base_set(${1:event}, ${2:event_base})$0" },
        { "trigger": "event_buffer_base_set()", "contents": "event_buffer_base_set(${1:bevent}, ${2:event_base})$0" },
        { "trigger": "event_buffer_disable()", "contents": "event_buffer_disable(${1:bevent}, ${2:events})$0" },
        { "trigger": "event_buffer_enable()", "contents": "event_buffer_enable(${1:bevent}, ${2:events})$0" },
        { "trigger": "event_buffer_fd_set()", "contents": "event_buffer_fd_set(${1:bevent}, ${2:fd})$0" },
        { "trigger": "event_buffer_free()", "contents": "event_buffer_free(${1:bevent})$0" },
        { "trigger": "event_buffer_new()", "contents": "event_buffer_new(${1:stream}, ${2:readcb}, ${3:writecb}, ${4:errorcb}${5:[, arg]})$0" },
        { "trigger": "event_buffer_priority_set()", "contents": "event_buffer_priority_set(${1:bevent}, ${2:priority})$0" },
        { "trigger": "event_buffer_read()", "contents": "event_buffer_read(${1:bevent}, ${2:data_size})$0" },
        { "trigger": "event_buffer_set_callback()", "contents": "event_buffer_set_callback(${1:event}, ${2:readcb}, ${3:writecb}, ${4:errorcb}${5:[, arg]})$0" },
        { "trigger": "event_buffer_timeout_set()", "contents": "event_buffer_timeout_set(${1:bevent}, ${2:read_timeout}, ${3:write_timeout})$0" },
        { "trigger": "event_buffer_watermark_set()", "contents": "event_buffer_watermark_set(${1:bevent}, ${2:events}, ${3:lowmark}, ${4:highmark})$0" },
        { "trigger": "event_buffer_write()", "contents": "event_buffer_write(${1:bevent}, ${2:data}${3:[, data_size]})$0" },
        { "trigger": "event_del()", "contents": "event_del(${1:event})$0" },
        { "trigger": "event_free()", "contents": "event_free(${1:event})$0" },
        { "trigger": "event_new()", "contents": "event_new()" },
        { "trigger": "event_set()", "contents": "event_set(${1:event}, ${2:fd}, ${3:events}, ${4:callback}${5:[, arg]})$0" },

        "Exception",
        { "trigger": "exec()", "contents": "exec(${1:command}${2:[, output]}${3:[, return_var]})$0" },
        // Exif - Exchangeable image information
        { "trigger": "exif_imagetype()", "contents": "exif_imagetype(${1:filename})$0" },
        { "trigger": "exif_read_data()", "contents": "exif_read_data(${1:filename}${2:[, sections]}${3:[, arrays]}${4:[, thumbnail]})$0" },
        { "trigger": "exif_tagname()", "contents": "exif_tagname(${1:index})$0" },
        { "trigger": "exif_thumbnail()", "contents": "exif_thumbnail(${1:filename}${2:[, width]}${3:[, height]}${4:[, imagetype]})$0" },

        { "trigger": "exit()", "contents": "exit(${1:[status]})$0" },
        { "trigger": "exp()", "contents": "exp(${1:arg})$0" },
        { "trigger": "expect_expectl()", "contents": "expect_expectl(${1:expect}, ${2:cases})$0" },
        { "trigger": "expect_popen()", "contents": "expect_popen(${1:command})$0" },
        { "trigger": "explode()", "contents": "explode(${1:delimiter}, ${2:string}${3:[, limit]})$0" },
        { "trigger": "expm1()", "contents": "expm1(${1:arg})$0" },
        { "trigger": "export()", "contents": "export(${1:argument_or_name}${2:[, return]})$0" },
        { "trigger": "extension_loaded()", "contents": "extension_loaded(${1:name})$0" },
        { "trigger": "extract()", "contents": "extract(${1:var_array}${2:[, extract_type]}${3:[, prefix]})$0" },
        { "trigger": "ezmlm_hash()", "contents": "ezmlm_hash(${1:addr})$0" },
        /* File Alteration Monitor (FAM) - not available on Windows - moved to PECL as of PHP 5.1.0
        { "trigger": "fam_cancel_monitor()", "contents": "fam_cancel_monitor(${1:fam}, ${2:fam_monitor})$0" },
        { "trigger": "fam_close()", "contents": "fam_close(${1:fam})$0" },
        { "trigger": "fam_monitor_collection()", "contents": "fam_monitor_collection(${1:fam}, ${2:dirname}, ${3:depth}, ${4:mask})$0" },
        { "trigger": "fam_monitor_directory()", "contents": "fam_monitor_directory(${1:fam}, ${2:dirname})$0" },
        { "trigger": "fam_monitor_file()", "contents": "fam_monitor_file(${1:fam}, ${2:filename})$0" },
        { "trigger": "fam_next_event()", "contents": "fam_next_event(${1:fam})$0" },
        { "trigger": "fam_open()", "contents": "fam_open(${1:[appname]})$0" },
        { "trigger": "fam_pending()", "contents": "fam_pending(${1:fam})$0" },
        { "trigger": "fam_resume_monitor()", "contents": "fam_resume_monitor(${1:fam}, ${2:fam_monitor})$0" },
        { "trigger": "fam_suspend_monitor()", "contents": "fam_suspend_monitor(${1:fam}, ${2:fam_monitor})$0" },
        */
        /* FrontBase database - moved to PECL as of PHP 5.3.0
        { "trigger": "fbsql_affected_rows()", "contents": "fbsql_affected_rows(${1:[link_identifier]})$0" },
        { "trigger": "fbsql_autocommit()", "contents": "fbsql_autocommit(${1:link_identifier})$0" },
        { "trigger": "fbsql_blob_size()", "contents": "fbsql_blob_size(${1:blob_handle})$0" },
        { "trigger": "fbsql_change_user()", "contents": "fbsql_change_user(${1:user}, ${2:password})$0" },
        { "trigger": "fbsql_clob_size()", "contents": "fbsql_clob_size(${1:clob_handle})$0" },
        { "trigger": "fbsql_close()", "contents": "fbsql_close(${1:[link_identifier]})$0" },
        { "trigger": "fbsql_commit()", "contents": "fbsql_commit(${1:[link_identifier]})$0" },
        { "trigger": "fbsql_connect()", "contents": "fbsql_connect(${1:[hostname]}${2:[, username]}${3:[, password]})$0" },
        { "trigger": "fbsql_create_blob()", "contents": "fbsql_create_blob(${1:blob_data})$0" },
        { "trigger": "fbsql_create_clob()", "contents": "fbsql_create_clob(${1:clob_data})$0" },
        { "trigger": "fbsql_create_db()", "contents": "fbsql_create_db(${1:database_name})$0" },
        { "trigger": "fbsql_data_seek()", "contents": "fbsql_data_seek(${1:result}, ${2:row_number})$0" },
        { "trigger": "fbsql_database()", "contents": "fbsql_database(${1:link_identifier})$0" },
        { "trigger": "fbsql_database_password()", "contents": "fbsql_database_password(${1:link_identifier})$0" },
        { "trigger": "fbsql_db_query()", "contents": "fbsql_db_query(${1:database}, ${2:query})$0" },
        { "trigger": "fbsql_db_status()", "contents": "fbsql_db_status(${1:database_name})$0" },
        { "trigger": "fbsql_drop_db()", "contents": "fbsql_drop_db(${1:database_name})$0" },
        { "trigger": "fbsql_errno()", "contents": "fbsql_errno(${1:[link_identifier]})$0" },
        { "trigger": "fbsql_error()", "contents": "fbsql_error(${1:[link_identifier]})$0" },
        { "trigger": "fbsql_fetch_array()", "contents": "fbsql_fetch_array(${1:result})$0" },
        { "trigger": "fbsql_fetch_assoc()", "contents": "fbsql_fetch_assoc(${1:result})$0" },
        { "trigger": "fbsql_fetch_field()", "contents": "fbsql_fetch_field(${1:result})$0" },
        { "trigger": "fbsql_fetch_lengths()", "contents": "fbsql_fetch_lengths(${1:result})$0" },
        { "trigger": "fbsql_fetch_object()", "contents": "fbsql_fetch_object(${1:result})$0" },
        { "trigger": "fbsql_fetch_row()", "contents": "fbsql_fetch_row(${1:result})$0" },
        { "trigger": "fbsql_field_flags()", "contents": "fbsql_field_flags(${1:result})$0" },
        { "trigger": "fbsql_field_len()", "contents": "fbsql_field_len(${1:result})$0" },
        { "trigger": "fbsql_field_name()", "contents": "fbsql_field_name(${1:result})$0" },
        { "trigger": "fbsql_field_seek()", "contents": "fbsql_field_seek(${1:result})$0" },
        { "trigger": "fbsql_field_table()", "contents": "fbsql_field_table(${1:result})$0" },
        { "trigger": "fbsql_field_type()", "contents": "fbsql_field_type(${1:result})$0" },
        { "trigger": "fbsql_free_result()", "contents": "fbsql_free_result(${1:result})$0" },
        { "trigger": "fbsql_get_autostart_info()", "contents": "fbsql_get_autostart_info(${1:[link_identifier]})$0" },
        { "trigger": "fbsql_hostname()", "contents": "fbsql_hostname(${1:link_identifier})$0" },
        { "trigger": "fbsql_insert_id()", "contents": "fbsql_insert_id(${1:[link_identifier]})$0" },
        { "trigger": "fbsql_list_dbs()", "contents": "fbsql_list_dbs(${1:[link_identifier]})$0" },
        { "trigger": "fbsql_list_fields()", "contents": "fbsql_list_fields(${1:database_name}, ${2:table_name})$0" },
        { "trigger": "fbsql_list_tables()", "contents": "fbsql_list_tables(${1:database})$0" },
        { "trigger": "fbsql_next_result()", "contents": "fbsql_next_result(${1:result})$0" },
        { "trigger": "fbsql_num_fields()", "contents": "fbsql_num_fields(${1:result})$0" },
        { "trigger": "fbsql_num_rows()", "contents": "fbsql_num_rows(${1:result})$0" },
        { "trigger": "fbsql_password()", "contents": "fbsql_password(${1:link_identifier})$0" },
        { "trigger": "fbsql_pconnect()", "contents": "fbsql_pconnect(${1:[hostname]}${2:[, username]}${3:[, password]})$0" },
        { "trigger": "fbsql_query()", "contents": "fbsql_query(${1:query})$0" },
        { "trigger": "fbsql_read_blob()", "contents": "fbsql_read_blob(${1:blob_handle})$0" },
        { "trigger": "fbsql_read_clob()", "contents": "fbsql_read_clob(${1:clob_handle})$0" },
        { "trigger": "fbsql_result()", "contents": "fbsql_result(${1:result})$0" },
        { "trigger": "fbsql_rollback()", "contents": "fbsql_rollback(${1:[link_identifier]})$0" },
        { "trigger": "fbsql_rows_fetched()", "contents": "fbsql_rows_fetched(${1:result})$0" },
        { "trigger": "fbsql_select_db()", "contents": "fbsql_select_db(${1:[database_name]}${2:[, link_identifier]})$0" },
        { "trigger": "fbsql_set_characterset()", "contents": "fbsql_set_characterset(${1:link_identifier}, ${2:characterset})$0" },
        { "trigger": "fbsql_set_lob_mode()", "contents": "fbsql_set_lob_mode(${1:result}, ${2:lob_mode})$0" },
        { "trigger": "fbsql_set_password()", "contents": "fbsql_set_password(${1:link_identifier}, ${2:user}, ${3:password}, ${4:old_password})$0" },
        { "trigger": "fbsql_set_transaction()", "contents": "fbsql_set_transaction(${1:link_identifier}, ${2:locking}, ${3:isolation})$0" },
        { "trigger": "fbsql_start_db()", "contents": "fbsql_start_db(${1:database_name})$0" },
        { "trigger": "fbsql_stop_db()", "contents": "fbsql_stop_db(${1:database_name})$0" },
        { "trigger": "fbsql_table_name()", "contents": "fbsql_table_name(${1:result}, ${2:index})$0" },
        { "trigger": "fbsql_tablename()", "contents": "fbsql_tablename(${1:result}, ${2:index})$0" },
        { "trigger": "fbsql_username()", "contents": "fbsql_username(${1:link_identifier})$0" },
        { "trigger": "fbsql_warnings()", "contents": "fbsql_warnings(${1:[OnOff]})$0" },
        */
        { "trigger": "fclose()", "contents": "fclose(${1:handle})$0" },
        /* Forms Data Format (FDF)
        { "trigger": "fdf_add_doc_javascript()", "contents": "fdf_add_doc_javascript(${1:fdf_document}, ${2:script_name}, ${3:script_code})$0" },
        { "trigger": "fdf_add_template()", "contents": "fdf_add_template(${1:fdf_document}, ${2:newpage}, ${3:filename}, ${4:template}, ${5:rename})$0" },
        { "trigger": "fdf_close()", "contents": "fdf_close(${1:fdf_document})$0" },
        { "trigger": "fdf_create()", "contents": "fdf_create()" },
        { "trigger": "fdf_enum_values()", "contents": "fdf_enum_values(${1:fdf_document}, ${2:function})$0" },
        { "trigger": "fdf_errno()", "contents": "fdf_errno()" },
        { "trigger": "fdf_error()", "contents": "fdf_error(${1:[error_code]})$0" },
        { "trigger": "fdf_get_ap()", "contents": "fdf_get_ap(${1:fdf_document}, ${2:field}, ${3:face}, ${4:filename})$0" },
        { "trigger": "fdf_get_attachment()", "contents": "fdf_get_attachment(${1:fdf_document}, ${2:fieldname}, ${3:savepath})$0" },
        { "trigger": "fdf_get_encoding()", "contents": "fdf_get_encoding(${1:fdf_document})$0" },
        { "trigger": "fdf_get_file()", "contents": "fdf_get_file(${1:fdf_document})$0" },
        { "trigger": "fdf_get_flags()", "contents": "fdf_get_flags(${1:fdf_document}, ${2:fieldname}, ${3:whichflags})$0" },
        { "trigger": "fdf_get_opt()", "contents": "fdf_get_opt(${1:fdf_document}, ${2:fieldname})$0" },
        { "trigger": "fdf_get_status()", "contents": "fdf_get_status(${1:fdf_document})$0" },
        { "trigger": "fdf_get_value()", "contents": "fdf_get_value(${1:fdf_document}, ${2:fieldname})$0" },
        { "trigger": "fdf_get_version()", "contents": "fdf_get_version(${1:[fdf_document]})$0" },
        { "trigger": "fdf_header()", "contents": "fdf_header()" },
        { "trigger": "fdf_next_field_name()", "contents": "fdf_next_field_name(${1:fdf_document})$0" },
        { "trigger": "fdf_open()", "contents": "fdf_open(${1:filename})$0" },
        { "trigger": "fdf_open_string()", "contents": "fdf_open_string(${1:fdf_data})$0" },
        { "trigger": "fdf_remove_item()", "contents": "fdf_remove_item(${1:fdf_document}, ${2:fieldname}, ${3:item})$0" },
        { "trigger": "fdf_save()", "contents": "fdf_save(${1:fdf_document})$0" },
        { "trigger": "fdf_save_string()", "contents": "fdf_save_string(${1:fdf_document})$0" },
        { "trigger": "fdf_set_ap()", "contents": "fdf_set_ap(${1:fdf_document}, ${2:field_name}, ${3:face}, ${4:filename}, ${5:page_number})$0" },
        { "trigger": "fdf_set_encoding()", "contents": "fdf_set_encoding(${1:fdf_document}, ${2:encoding})$0" },
        { "trigger": "fdf_set_file()", "contents": "fdf_set_file(${1:fdf_document}, ${2:url})$0" },
        { "trigger": "fdf_set_flags()", "contents": "fdf_set_flags(${1:fdf_document}, ${2:fieldname}, ${3:whichFlags}, ${4:newFlags})$0" },
        { "trigger": "fdf_set_javascript_action()", "contents": "fdf_set_javascript_action(${1:fdf_document}, ${2:fieldname}, ${3:trigger}, ${4:script})$0" },
        { "trigger": "fdf_set_on_import_javascript()", "contents": "fdf_set_on_import_javascript(${1:fdf_document}, ${2:script}, ${3:before_data_import})$0" },
        { "trigger": "fdf_set_opt()", "contents": "fdf_set_opt(${1:fdf_document}, ${2:fieldname}, ${3:element}, ${4:str1}, ${5:str2})$0" },
        { "trigger": "fdf_set_status()", "contents": "fdf_set_status(${1:fdf_document}, ${2:status})$0" },
        { "trigger": "fdf_set_submit_form_action()", "contents": "fdf_set_submit_form_action(${1:fdf_document}, ${2:fieldname}, ${3:trigger}, ${4():script}, ${5:flags})$0" },
        { "trigger": "fdf_set_target_frame()", "contents": "fdf_set_target_frame(${1:fdf_document}, ${2:frame_name})$0" },
        { "trigger": "fdf_set_value()", "contents": "fdf_set_value(${1:fdf_document}, ${2:fieldname}, ${3:value})$0" },
        { "trigger": "fdf_set_version()", "contents": "fdf_set_version(${1:fdf_document}, ${2:version})$0" },
        */
        { "trigger": "feof()", "contents": "feof(${1:handle})$0" },
        { "trigger": "fflush()", "contents": "fflush(${1:handle})$0" },
        { "trigger": "fgetc()", "contents": "fgetc(${1:handle})$0" },
        { "trigger": "fgetcsv()", "contents": "fgetcsv(${1:handle})$0" },
        { "trigger": "fgetcsv(full)", "contents": "fgetcsv(${1:handle}${2:[, length]}${3:[, delimiter]}${4:[, enclosure]}${5:[, escape]})$0" },
        { "trigger": "fgets()", "contents": "fgets(${1:handle}${2:[, length]})$0" },
        { "trigger": "fgetss()", "contents": "fgetss(${1:handle}${2:[, length]}${3:[, allowable_tags]})$0" },
        { "trigger": "file()", "contents": "file(${1:filename}${2:[, flags]}${3:[, context]})$0" },
        { "trigger": "file_exists()", "contents": "file_exists(${1:filename})$0" },
        { "trigger": "file_get_contents()", "contents": "file_get_contents(${1:filename})$0" },
        { "trigger": "file_get_contents(full)", "contents": "file_get_contents(${1:filename}${2:[, use_include_path]}${3:[, context]}${4:[, offset]}${5:[, maxlen]})$0" },
        { "trigger": "file_put_contents()", "contents": "file_put_contents(${1:filename}, ${2:data}${3:[, flags]}${4:[, context]})$0" },
        { "trigger": "fileatime()", "contents": "fileatime(${1:filename})$0" },
        { "trigger": "filectime()", "contents": "filectime(${1:filename})$0" },
        { "trigger": "filegroup()", "contents": "filegroup(${1:filename})$0" },
        { "trigger": "fileinode()", "contents": "fileinode(${1:filename})$0" },
        { "trigger": "filemtime()", "contents": "filemtime(${1:filename})$0" },
        { "trigger": "fileowner()", "contents": "fileowner(${1:filename})$0" },
        { "trigger": "fileperms()", "contents": "fileperms(${1:filename})$0" },
        /* filePro databases - moved to PECL as of PHP 5.2.0
        { "trigger": "filepro()", "contents": "filepro(${1:directory})$0" },
        { "trigger": "filepro_fieldcount()", "contents": "filepro_fieldcount()" },
        { "trigger": "filepro_fieldname()", "contents": "filepro_fieldname(${1:field_number})$0" },
        { "trigger": "filepro_fieldtype()", "contents": "filepro_fieldtype(${1:field_number})$0" },
        { "trigger": "filepro_fieldwidth()", "contents": "filepro_fieldwidth(${1:field_number})$0" },
        { "trigger": "filepro_retrieve()", "contents": "filepro_retrieve(${1:row_number}, ${2:field_number})$0" },
        { "trigger": "filepro_rowcount()", "contents": "filepro_rowcount()" },
        */
        { "trigger": "filesize()", "contents": "filesize(${1:filename})$0" },
        "FilesystemIterator",
        { "trigger": "FilesystemIterator()\tctor", "contents": "FilesystemIterator(${1:path}${2:[, flags]})$0" },
        { "trigger": "filetype()", "contents": "filetype(${1:filename})$0" },
        { "trigger": "filter_has_var()", "contents": "filter_has_var(${1:type}, ${2:variable_name})$0" },
        { "trigger": "filter_id()", "contents": "filter_id(${1:filtername})$0" },
        { "trigger": "filter_input()", "contents": "filter_input(${1:type}, ${2:variable_name})$0" },
        { "trigger": "filter_input_array()", "contents": "filter_input_array(${1:type})$0" },
        { "trigger": "filter_list()", "contents": "filter_list()" },
        { "trigger": "filter_var()", "contents": "filter_var(${1:variable})$0" },
        { "trigger": "filter_var_array()", "contents": "filter_var_array(${1:data})$0" },
        "FilterIterator",
        { "trigger": "FilterIterator()\tctor", "contents": "FilterIterator(${1:iterator})$0" },
        { "trigger": "finfo_buffer()", "contents": "finfo_buffer(${1:finfo}, ${2:string = NULL})$0" },
        { "trigger": "finfo_close()", "contents": "finfo_close(${1:finfo})$0" },
        { "trigger": "finfo_file()", "contents": "finfo_file(${1:finfo}, ${2:file_name = NULL})$0" },
        { "trigger": "finfo_open()", "contents": "finfo_open(${1:[options]}${2:[, $magic_file]})$0" },
        { "trigger": "finfo_set_flags()", "contents": "finfo_set_flags(${1:finfo}, ${2:options})$0" },
        { "trigger": "floatval()", "contents": "floatval(${1:var})$0" },
        { "trigger": "flock()", "contents": "flock(${1:handle}, ${2:operation}${3:[, would_block]})$0" },
        { "trigger": "floor()", "contents": "floor(${1:value})$0" },
        { "trigger": "flush()", "contents": "flush()" },
        { "trigger": "fmod()", "contents": "fmod(${1:x}, ${2:y})$0" },
        { "trigger": "fnmatch()", "contents": "fnmatch(${1:pattern}, ${2:string}${3:[, flags=0]})$0" },
        { "trigger": "fopen()", "contents": "fopen(${1:filename}, ${2:mode}${3:[, use_include_path]}${4:[, context]})$0" },
        { "trigger": "forward_static_call()", "contents": "forward_static_call(${1:function})$0" },
        { "trigger": "forward_static_call_array()", "contents": "forward_static_call_array(${1:function}, ${2:parameters})$0" },
        { "trigger": "fpassthru()", "contents": "fpassthru(${1:handle})$0" },
        { "trigger": "fprintf()", "contents": "fprintf(${1:handle}, ${2:format}${3:[, args]})$0" },
        { "trigger": "fputcsv()", "contents": "fputcsv(${1:handle}, ${2:fields}${3:[, delimiter]}${4:[, enclosure]})$0" },
        { "trigger": "fputs()", "contents": "fputs(${1:handle}, ${2:string}${3:[, length]})$0" },
        { "trigger": "fread()", "contents": "fread(${1:handle}, ${2:length})$0" },
        { "trigger": "FrenchToJD()", "contents": "FrenchToJD(${1:month}, ${2:day}, ${3:year})$0" },
        { "trigger": "fribidi_log2vis()", "contents": "fribidi_log2vis(${1:str}, ${2:direction}, ${3:charset})$0" },
        { "trigger": "fscanf()", "contents": "fscanf(${1:handle}, ${2:format})$0" },
        { "trigger": "fseek()", "contents": "fseek(${1:handle}, ${2:offset}${3:[, whence=SEEK_SET]})$0" },
        { "trigger": "fsockopen()", "contents": "fsockopen(${1:hostname}${2:[, port]}${3:[, errno]}${4:[, errstr]}${5:[, timeout]})$0" },
        { "trigger": "fstat()", "contents": "fstat(${1:handle})$0" },
        { "trigger": "ftell()", "contents": "ftell(${1:handle})$0" },
        { "trigger": "ftok()", "contents": "ftok(${1:pathname}, ${2:proj})$0" },

        { "trigger": "ftp_alloc()", "contents": "ftp_alloc(${1:ftp_stream}, ${2:filesize}${3:[, result]})$0" },
        { "trigger": "ftp_cdup()", "contents": "ftp_cdup(${1:ftp_stream})$0" },
        { "trigger": "ftp_chdir()", "contents": "ftp_chdir(${1:ftp_stream}, ${2:directory})$0" },
        { "trigger": "ftp_chmod()", "contents": "ftp_chmod(${1:ftp_stream}, ${2:mode}, ${3:filename})$0" },
        { "trigger": "ftp_close()", "contents": "ftp_close(${1:ftp_stream})$0" },
        { "trigger": "ftp_connect()", "contents": "ftp_connect(${1:host}${2:[, port]}${3:[, timeout]})$0" },
        { "trigger": "ftp_delete()", "contents": "ftp_delete(${1:ftp_stream}, ${2:path})$0" },
        { "trigger": "ftp_exec()", "contents": "ftp_exec(${1:ftp_stream}, ${2:command})$0" },
        { "trigger": "ftp_fget()", "contents": "ftp_fget(${1:ftp_stream}, ${2:handle}, ${3:remote_file}, ${4:mode}${5:[, resumepos]})$0" },
        { "trigger": "ftp_fput()", "contents": "ftp_fput(${1:ftp_stream}, ${2:remote_file}, ${3:handle}, ${4:mode}${5:[, startpos]})$0" },
        { "trigger": "ftp_get()", "contents": "ftp_get(${1:ftp_stream}, ${2:local_file}, ${3:remote_file}, ${4:mode}${5:[, startpos]})$0" },
        { "trigger": "ftp_get_option()", "contents": "ftp_get_option(${1:ftp_stream}, ${2:option})$0" },
        { "trigger": "ftp_login()", "contents": "ftp_login(${1:ftp_stream}, ${2:username}, ${3:password})$0" },
        { "trigger": "ftp_mdtm()", "contents": "ftp_mdtm(${1:ftp_stream}, ${2:remote_file})$0" },
        { "trigger": "ftp_mkdir()", "contents": "ftp_mkdir(${1:ftp_stream}, ${2:directory})$0" },
        { "trigger": "ftp_nb_continue()", "contents": "ftp_nb_continue(${1:ftp_stream})$0" },
        { "trigger": "ftp_nb_fget()", "contents": "ftp_nb_fget(${1:ftp_stream}, ${2:handle}, ${3:remote_file}, ${4:mode}${5:[, resumepos]})$0" },
        { "trigger": "ftp_nb_fput()", "contents": "ftp_nb_fput(${1:ftp_stream}, ${2:remote_file}, ${3:handle}, ${4:mode}${5:[, startpos]})$0" },
        { "trigger": "ftp_nb_get()", "contents": "ftp_nb_get(${1:ftp_stream}, ${2:local_file}, ${3:remote_file}, ${4:mode}${5:[, resumepos]})$0" },
        { "trigger": "ftp_nb_put()", "contents": "ftp_nb_put(${1:ftp_stream}, ${2:remote_file}, ${3:local_file}, ${4:mode}${5:[, startpos]})$0" },
        { "trigger": "ftp_nlist()", "contents": "ftp_nlist(${1:ftp_stream}, ${2:directory})$0" },
        { "trigger": "ftp_pasv()", "contents": "ftp_pasv(${1:ftp_stream}, ${2:pasv})$0" },
        { "trigger": "ftp_put()", "contents": "ftp_put(${1:ftp_stream}, ${2:remote_file}, ${3:local_file}, ${4:mode}${5:[, startpos]})$0" },
        { "trigger": "ftp_pwd()", "contents": "ftp_pwd(${1:ftp_stream})$0" },
        { "trigger": "ftp_quit()", "contents": "ftp_quit(${1:ftp_stream})$0" },
        { "trigger": "ftp_raw()", "contents": "ftp_raw(${1:ftp_stream}, ${2:command})$0" },
        { "trigger": "ftp_rawlist()", "contents": "ftp_rawlist(${1:ftp_stream}, ${2:directory}${3:[, recursive]})$0" },
        { "trigger": "ftp_rename()", "contents": "ftp_rename(${1:ftp_stream}, ${2:oldname}, ${3:newname})$0" },
        { "trigger": "ftp_rmdir()", "contents": "ftp_rmdir(${1:ftp_stream}, ${2:directory})$0" },
        { "trigger": "ftp_set_option()", "contents": "ftp_set_option(${1:ftp_stream}, ${2:option}, ${3:value})$0" },
        { "trigger": "ftp_site()", "contents": "ftp_site(${1:ftp_stream}, ${2:command})$0" },
        { "trigger": "ftp_size()", "contents": "ftp_size(${1:ftp_stream}, ${2:remote_file})$0" },
        { "trigger": "ftp_ssl_connect()", "contents": "ftp_ssl_connect(${1:host}${2:[, port]}${3:[, timeout]})$0" },
        { "trigger": "ftp_systype()", "contents": "ftp_systype(${1:ftp_stream})$0" },

        { "trigger": "ftruncate()", "contents": "ftruncate(${1:handle}, ${2:size})$0" },
        { "trigger": "func_get_arg()", "contents": "func_get_arg(${1:arg_num})$0" },
        { "trigger": "func_get_args()", "contents": "func_get_args()" },
        { "trigger": "func_num_args()", "contents": "func_num_args()" },
        { "trigger": "function_exists()", "contents": "function_exists(${1:function_name})$0" },
        { "trigger": "fwrite()", "contents": "fwrite(${1:handle}, ${2:string}${3:[, length]})$0" },
        { "trigger": "gc_collect_cycles()", "contents": "gc_collect_cycles()" },
        { "trigger": "gc_disable()", "contents": "gc_disable()" },
        { "trigger": "gc_enable()", "contents": "gc_enable()" },
        { "trigger": "gc_enabled()", "contents": "gc_enabled()" },
        { "trigger": "gd_info()", "contents": "gd_info()" },
        "GearmanClient",
        "GearmanJob",
        "GearmanTask",
        "GearmanWorker",
        // GeoIP
        { "trigger": "geoip_continent_code_by_name()", "contents": "geoip_continent_code_by_name(${1:hostname})$0" },
        { "trigger": "geoip_country_code3_by_name()", "contents": "geoip_country_code3_by_name(${1:hostname})$0" },
        { "trigger": "geoip_country_code_by_name()", "contents": "geoip_country_code_by_name(${1:hostname})$0" },
        { "trigger": "geoip_country_name_by_name()", "contents": "geoip_country_name_by_name(${1:hostname})$0" },
        { "trigger": "geoip_database_info()", "contents": "geoip_database_info(${1:[database]})$0" },
        { "trigger": "geoip_db_avail()", "contents": "geoip_db_avail(${1:database})$0" },
        { "trigger": "geoip_db_filename()", "contents": "geoip_db_filename(${1:database})$0" },
        { "trigger": "geoip_db_get_all_info()", "contents": "geoip_db_get_all_info()" },
        { "trigger": "geoip_id_by_name()", "contents": "geoip_id_by_name(${1:hostname})$0" },
        { "trigger": "geoip_isp_by_name()", "contents": "geoip_isp_by_name(${1:hostname})$0" },
        { "trigger": "geoip_org_by_name()", "contents": "geoip_org_by_name(${1:hostname})$0" },
        { "trigger": "geoip_record_by_name()", "contents": "geoip_record_by_name(${1:hostname})$0" },
        { "trigger": "geoip_region_by_name()", "contents": "geoip_region_by_name(${1:hostname})$0" },
        { "trigger": "geoip_region_name_by_code()", "contents": "geoip_region_name_by_code(${1:country_code}, ${2:region_code})$0" },
        { "trigger": "geoip_time_zone_by_country_and_region()", "contents": "geoip_time_zone_by_country_and_region(${1:country_code})$0" },

        { "trigger": "get_browser()", "contents": "get_browser(${1:[user_agent]}${2:[, return_array]})$0" },
        { "trigger": "get_called_class()", "contents": "get_called_class()" },
        { "trigger": "get_cfg_var()", "contents": "get_cfg_var(${1:option})$0" },
        { "trigger": "get_class()", "contents": "get_class(${1:[object]})$0" },
        { "trigger": "get_class_methods()", "contents": "get_class_methods(${1:class_name})$0" },
        { "trigger": "get_class_vars()", "contents": "get_class_vars(${1:class_name})$0" },
        { "trigger": "get_current_user()", "contents": "get_current_user()" },
        { "trigger": "get_declared_classes()", "contents": "get_declared_classes()" },
        { "trigger": "get_declared_interfaces()", "contents": "get_declared_interfaces()" },
        { "trigger": "get_declared_traits()", "contents": "get_declared_traits()" },
        { "trigger": "get_defined_constants()", "contents": "get_defined_constants(${1:[categorize]})$0" },
        { "trigger": "get_defined_functions()", "contents": "get_defined_functions()" },
        { "trigger": "get_defined_vars()", "contents": "get_defined_vars()" },
        { "trigger": "get_extension_funcs()", "contents": "get_extension_funcs(${1:module_name})$0" },
        { "trigger": "get_headers()", "contents": "get_headers(${1:url}${2:[, format]})$0" },
        { "trigger": "get_html_translation_table()", "contents": "get_html_translation_table(${1:[table]}${2:[, flags]}${3:[, encoding]})$0" },
        { "trigger": "get_include_path()", "contents": "get_include_path()" },
        { "trigger": "get_included_files()", "contents": "get_included_files()" },
        { "trigger": "get_loaded_extensions()", "contents": "get_loaded_extensions(${1:[zend_extensions]})$0" },
        { "trigger": "get_magic_quotes_gpc()", "contents": "get_magic_quotes_gpc()" },
        { "trigger": "get_magic_quotes_runtime()", "contents": "get_magic_quotes_runtime()" },
        { "trigger": "get_meta_tags()", "contents": "get_meta_tags(${1:filename}${2:[, use_include_path]})$0" },
        { "trigger": "get_object_vars()", "contents": "get_object_vars(${1:object})$0" },
        { "trigger": "get_parent_class()", "contents": "get_parent_class(${1:[object]})$0" },
        { "trigger": "get_required_files()", "contents": "get_required_files()" },
        { "trigger": "get_resource_type()", "contents": "get_resource_type(${1:handle})$0" },
        { "trigger": "getallheaders()", "contents": "getallheaders()" },
        { "trigger": "getclosure()", "contents": "getclosure()" },
        { "trigger": "getconstant()", "contents": "getconstant(${1:name})$0" },
        { "trigger": "getconstants()", "contents": "getconstants()" },
        { "trigger": "getconstructor()", "contents": "getconstructor()" },
        { "trigger": "getcwd()", "contents": "getcwd()" },
        { "trigger": "getdate()", "contents": "getdate(${1:[timestamp]})$0" },
        { "trigger": "getdefaultproperties()", "contents": "getdefaultproperties()" },
        { "trigger": "getdoccomment()", "contents": "getdoccomment()" },
        { "trigger": "getendline()", "contents": "getendline()" },
        { "trigger": "getenv()", "contents": "getenv(${1:varname})$0" },
        { "trigger": "getextension()", "contents": "getextension()" },
        { "trigger": "getextensionname()", "contents": "getextensionname()" },
        { "trigger": "getfilename()", "contents": "getfilename()" },
        { "trigger": "gethostbyaddr()", "contents": "gethostbyaddr(${1:ip_address})$0" },
        { "trigger": "gethostbyname()", "contents": "gethostbyname(${1:hostname})$0" },
        { "trigger": "gethostbynamel()", "contents": "gethostbynamel(${1:hostname})$0" },
        { "trigger": "gethostname()", "contents": "gethostname()" },
        { "trigger": "getimagesize()", "contents": "getimagesize(${1:filename}${2:[, imageinfo]})$0" },
        { "trigger": "getimagesizefromstring()", "contents": "getimagesizefromstring(${1:imagedata}${2:[, imageinfo]})$0" },
        { "trigger": "getinterfacenames()", "contents": "getinterfacenames()" },
        { "trigger": "getinterfaces()", "contents": "getinterfaces()" },
        { "trigger": "getlastmod()", "contents": "getlastmod()" },
        { "trigger": "getmeta()", "contents": "getmeta(${1:attribute})$0" },
        { "trigger": "getmethod()", "contents": "getmethod(${1:name})$0" },
        { "trigger": "getmethods()", "contents": "getmethods(${1:[filter]})$0" },
        { "trigger": "getmodifiers()", "contents": "getmodifiers()" },
        { "trigger": "getmxrr()", "contents": "getmxrr(${1:hostname}, ${2:mxhosts})$0" },
        { "trigger": "getmygid()", "contents": "getmygid()" },
        { "trigger": "getmyinode()", "contents": "getmyinode()" },
        { "trigger": "getmypid()", "contents": "getmypid()" },
        { "trigger": "getmyuid()", "contents": "getmyuid()" },
        { "trigger": "getName()", "contents": "getName()" },
        { "trigger": "getnNmed()", "contents": "getNamed(${1:name})$0" },
        { "trigger": "getNamespaceName()", "contents": "getNamespaceName()" },
        { "trigger": "getopt()", "contents": "getopt(${1:options})$0" },
        { "trigger": "getParentClass()", "contents": "getParentClass()" },
        { "trigger": "getProperties()", "contents": "getProperties(${1:[filter]})$0" },
        { "trigger": "getProperty()", "contents": "getProperty(${1:name})$0" },
        { "trigger": "getprotobyname()", "contents": "getprotobyname(${1:name})$0" },
        { "trigger": "getprotobynumber()", "contents": "getprotobynumber(${1:number})$0" },
        { "trigger": "getrandmax()", "contents": "getrandmax()" },
        { "trigger": "getrusage()", "contents": "getrusage(${1:[who]})$0" },
        { "trigger": "getservbyname()", "contents": "getservbyname(${1:service}, ${2:protocol})$0" },
        { "trigger": "getservbyport()", "contents": "getservbyport(${1:port}, ${2:protocol})$0" },
        { "trigger": "getShortName()", "contents": "getShortName()" },
        { "trigger": "getStartLine()", "contents": "getStartLine()" },
        { "trigger": "getStaticProperties()", "contents": "getStaticProperties()" },
        { "trigger": "getStaticPropertyValue()", "contents": "getStaticPropertyValue(${1:name})$0" },
        { "trigger": "gettext()", "contents": "gettext(${1:message})$0" },
        { "trigger": "gettimeofday()", "contents": "gettimeofday(${1:[return_float]})$0" },
        { "trigger": "getTraitAliases()", "contents": "getTraitAliases()" },
        { "trigger": "getTraitNames()", "contents": "getTraitNames()" },
        { "trigger": "getTraits()", "contents": "getTraits()" },
        { "trigger": "gettype()", "contents": "gettype(${1:var})$0" },
        { "trigger": "getValue()", "contents": "getValue()" },
        { "trigger": "glob()", "contents": "glob(${1:pattern}${2:[, flags]})$0" },
        "GlobIterator",
        { "trigger": "GlobIterator()\tctor", "contents": "GlobIterator(${1:path}${2:[, flags]})$0" },
        "Gmagick",
        { "trigger": "Gmagick()\tctor", "contents": "Gmagick(${1:[filename]})$0" },
        "GmagickDraw",
        "GmagickPixel",
        { "trigger": "GmagickPixel()\tctor", "contents": "GmagickPixel(${1:[color]})$0" },
        { "trigger": "gmdate()", "contents": "gmdate(${1:format}${2:[, timestamp]})$0" },
        { "trigger": "gmmktime()", "contents": "gmmktime($1)$0" },
        { "trigger": "gmmktime(full)", "contents": "gmmktime(${1:[hour]}${2:[, minute]}${3:[, second]}${4:[, month]}${5:[, day]}${6:[, year]}${7:[, is_dst]})$0" },
        /* GNU Multiple Precision
        { "trigger": "gmp_abs()", "contents": "gmp_abs(${1:a})$0" },
        { "trigger": "gmp_add()", "contents": "gmp_add(${1:a}, ${2:b})$0" },
        { "trigger": "gmp_and()", "contents": "gmp_and(${1:a}, ${2:b})$0" },
        { "trigger": "gmp_clrbit()", "contents": "gmp_clrbit(${1:a}, ${2:index})$0" },
        { "trigger": "gmp_cmp()", "contents": "gmp_cmp(${1:a}, ${2:b})$0" },
        { "trigger": "gmp_com()", "contents": "gmp_com(${1:a})$0" },
        { "trigger": "gmp_div()", "contents": "gmp_div(${1:a}, ${2:b})$0" },
        { "trigger": "gmp_div_q()", "contents": "gmp_div_q(${1:a}, ${2:b})$0" },
        { "trigger": "gmp_div_qr()", "contents": "gmp_div_qr(${1:n}, ${2:d})$0" },
        { "trigger": "gmp_div_r()", "contents": "gmp_div_r(${1:n}, ${2:d})$0" },
        { "trigger": "gmp_divexact()", "contents": "gmp_divexact(${1:n}, ${2:d})$0" },
        { "trigger": "gmp_fact()", "contents": "gmp_fact(${1:a})$0" },
        { "trigger": "gmp_gcd()", "contents": "gmp_gcd(${1:a}, ${2:b})$0" },
        { "trigger": "gmp_gcdext()", "contents": "gmp_gcdext(${1:a}, ${2:b})$0" },
        { "trigger": "gmp_hamdist()", "contents": "gmp_hamdist(${1:a}, ${2:b})$0" },
        { "trigger": "gmp_init()", "contents": "gmp_init(${1:number})$0" },
        { "trigger": "gmp_intval()", "contents": "gmp_intval(${1:gmpnumber})$0" },
        { "trigger": "gmp_invert()", "contents": "gmp_invert(${1:a}, ${2:b})$0" },
        { "trigger": "gmp_jacobi()", "contents": "gmp_jacobi(${1:a}, ${2:p})$0" },
        { "trigger": "gmp_legendre()", "contents": "gmp_legendre(${1:a}, ${2:p})$0" },
        { "trigger": "gmp_mod()", "contents": "gmp_mod(${1:n}, ${2:d})$0" },
        { "trigger": "gmp_mul()", "contents": "gmp_mul(${1:a}, ${2:b})$0" },
        { "trigger": "gmp_neg()", "contents": "gmp_neg(${1:a})$0" },
        { "trigger": "gmp_nextprime()", "contents": "gmp_nextprime(${1:a})$0" },
        { "trigger": "gmp_or()", "contents": "gmp_or(${1:a}, ${2:b})$0" },
        { "trigger": "gmp_perfect_square()", "contents": "gmp_perfect_square(${1:a})$0" },
        { "trigger": "gmp_popcount()", "contents": "gmp_popcount(${1:a})$0" },
        { "trigger": "gmp_pow()", "contents": "gmp_pow(${1:base}, ${2:exp})$0" },
        { "trigger": "gmp_powm()", "contents": "gmp_powm(${1:base}, ${2:exp}, ${3:mod})$0" },
        { "trigger": "gmp_prob_prime()", "contents": "gmp_prob_prime(${1:a})$0" },
        { "trigger": "gmp_random()", "contents": "gmp_random(${1:[limiter]})$0" },
        { "trigger": "gmp_scan0()", "contents": "gmp_scan0(${1:a}, ${2:start})$0" },
        { "trigger": "gmp_scan1()", "contents": "gmp_scan1(${1:a}, ${2:start})$0" },
        { "trigger": "gmp_setbit()", "contents": "gmp_setbit(${1:a}, ${2:index})$0" },
        { "trigger": "gmp_sign()", "contents": "gmp_sign(${1:a})$0" },
        { "trigger": "gmp_sqrt()", "contents": "gmp_sqrt(${1:a})$0" },
        { "trigger": "gmp_sqrtrem()", "contents": "gmp_sqrtrem(${1:a})$0" },
        { "trigger": "gmp_strval()", "contents": "gmp_strval(${1:gmpnumber})$0" },
        { "trigger": "gmp_sub()", "contents": "gmp_sub(${1:a}, ${2:b})$0" },
        { "trigger": "gmp_testbit()", "contents": "gmp_testbit(${1:a}, ${2:index})$0" },
        { "trigger": "gmp_xor()", "contents": "gmp_xor(${1:a}, ${2:b})$0" },
        */
        { "trigger": "gmstrftime()", "contents": "gmstrftime(${1:format}${2:[, timestamp]})$0" },
        /* GnuPG - GNU Privacy Guard
        { "trigger": "gnupg_adddecryptkey()", "contents": "gnupg_adddecryptkey(${1:identifier}, ${2:fingerprint}, ${3:passphrase})$0" },
        { "trigger": "gnupg_addencryptkey()", "contents": "gnupg_addencryptkey(${1:identifier}, ${2:fingerprint})$0" },
        { "trigger": "gnupg_addsignkey()", "contents": "gnupg_addsignkey(${1:identifier}, ${2:fingerprint})$0" },
        { "trigger": "gnupg_cleardecryptkeys()", "contents": "gnupg_cleardecryptkeys(${1:identifier})$0" },
        { "trigger": "gnupg_clearencryptkeys()", "contents": "gnupg_clearencryptkeys(${1:identifier})$0" },
        { "trigger": "gnupg_clearsignkeys()", "contents": "gnupg_clearsignkeys(${1:identifier})$0" },
        { "trigger": "gnupg_decrypt()", "contents": "gnupg_decrypt(${1:identifier}, ${2:text})$0" },
        { "trigger": "gnupg_decryptverify()", "contents": "gnupg_decryptverify(${1:identifier}, ${2:text}, ${3:plaintext})$0" },
        { "trigger": "gnupg_encrypt()", "contents": "gnupg_encrypt(${1:identifier}, ${2:plaintext})$0" },
        { "trigger": "gnupg_encryptsign()", "contents": "gnupg_encryptsign(${1:identifier}, ${2:plaintext})$0" },
        { "trigger": "gnupg_export()", "contents": "gnupg_export(${1:identifier}, ${2:fingerprint})$0" },
        { "trigger": "gnupg_geterror()", "contents": "gnupg_geterror(${1:identifier})$0" },
        { "trigger": "gnupg_getprotocol()", "contents": "gnupg_getprotocol(${1:identifier})$0" },
        { "trigger": "gnupg_import()", "contents": "gnupg_import(${1:identifier}, ${2:keydata})$0" },
        { "trigger": "gnupg_init()", "contents": "gnupg_init()" },
        { "trigger": "gnupg_keyinfo()", "contents": "gnupg_keyinfo(${1:identifier}, ${2:pattern})$0" },
        { "trigger": "gnupg_setarmor()", "contents": "gnupg_setarmor(${1:identifier}, ${2:armor})$0" },
        { "trigger": "gnupg_seterrormode()", "contents": "gnupg_seterrormode(${1:identifier}, ${2:errormode})$0" },
        { "trigger": "gnupg_setsignmode()", "contents": "gnupg_setsignmode(${1:identifier}, ${2:signmode})$0" },
        { "trigger": "gnupg_sign()", "contents": "gnupg_sign(${1:identifier}, ${2:plaintext})$0" },
        { "trigger": "gnupg_verify()", "contents": "gnupg_verify(${1:identifier}, ${2:signed_text}, ${3:signature})$0" },
        */
        { "trigger": "gopher_parsedir()", "contents": "gopher_parsedir(${1:dirent})$0" },
        /*
        { "trigger": "grapheme_extract()", "contents": "grapheme_extract(${1:haystack}, ${2:size})$0" },
        { "trigger": "grapheme_stripos()", "contents": "grapheme_stripos(${1:haystack}, ${2:needle})$0" },
        { "trigger": "grapheme_stristr()", "contents": "grapheme_stristr(${1:haystack}, ${2:needle})$0" },
        { "trigger": "grapheme_strlen()", "contents": "grapheme_strlen(${1:input})$0" },
        { "trigger": "grapheme_strpos()", "contents": "grapheme_strpos(${1:haystack}, ${2:needle})$0" },
        { "trigger": "grapheme_strripos()", "contents": "grapheme_strripos(${1:haystack}, ${2:needle})$0" },
        { "trigger": "grapheme_strrpos()", "contents": "grapheme_strrpos(${1:haystack}, ${2:needle})$0" },
        { "trigger": "grapheme_strstr()", "contents": "grapheme_strstr(${1:haystack}, ${2:needle})$0" },
        { "trigger": "grapheme_substr()", "contents": "grapheme_substr(${1:string}, ${2:start})$0" },
        */
        { "trigger": "GregorianToJD()", "contents": "GregorianToJD(${1:month}, ${2:day}, ${3:year})$0" },
        /* GUPnP
        { "trigger": "gupnp_context_get_host_ip()", "contents": "gupnp_context_get_host_ip(${1:context})$0" },
        { "trigger": "gupnp_context_get_port()", "contents": "gupnp_context_get_port(${1:context})$0" },
        { "trigger": "gupnp_context_get_subscription_timeout()", "contents": "gupnp_context_get_subscription_timeout(${1:context})$0" },
        { "trigger": "gupnp_context_host_path()", "contents": "gupnp_context_host_path(${1:context}, ${2:local_path}, ${3:server_path})$0" },
        { "trigger": "gupnp_context_new()", "contents": "gupnp_context_new(${1:[host_ip]}${2:[, port]})$0" },
        { "trigger": "gupnp_context_set_subscription_timeout()", "contents": "gupnp_context_set_subscription_timeout(${1:context}, ${2:timeout})$0" },
        { "trigger": "gupnp_context_timeout_add()", "contents": "gupnp_context_timeout_add(${1:context}, ${2:timeout}, ${3:callback})$0" },
        { "trigger": "gupnp_context_unhost_path()", "contents": "gupnp_context_unhost_path(${1:context}, ${2:server_path})$0" },
        { "trigger": "gupnp_control_point_browse_start()", "contents": "gupnp_control_point_browse_start(${1:cpoint})$0" },
        { "trigger": "gupnp_control_point_browse_stop()", "contents": "gupnp_control_point_browse_stop(${1:cpoint})$0" },
        { "trigger": "gupnp_control_point_callback_set()", "contents": "gupnp_control_point_callback_set(${1:cpoint}, ${2:signal}, ${3:callback})$0" },
        { "trigger": "gupnp_control_point_new()", "contents": "gupnp_control_point_new(${1:context}, ${2:target})$0" },
        { "trigger": "gupnp_device_action_callback_set()", "contents": "gupnp_device_action_callback_set(${1:root_device}, ${2:signal}, ${3:action_name}, ${4:callback})$0" },
        { "trigger": "gupnp_device_info_get()", "contents": "gupnp_device_info_get(${1:root_device})$0" },
        { "trigger": "gupnp_device_info_get_service()", "contents": "gupnp_device_info_get_service(${1:root_device}, ${2:type})$0" },
        { "trigger": "gupnp_root_device_get_available()", "contents": "gupnp_root_device_get_available(${1:root_device})$0" },
        { "trigger": "gupnp_root_device_get_relative_location()", "contents": "gupnp_root_device_get_relative_location(${1:root_device})$0" },
        { "trigger": "gupnp_root_device_new()", "contents": "gupnp_root_device_new(${1:context}, ${2:location}, ${3:description_dir})$0" },
        { "trigger": "gupnp_root_device_set_available()", "contents": "gupnp_root_device_set_available(${1:root_device}, ${2:available})$0" },
        { "trigger": "gupnp_root_device_start()", "contents": "gupnp_root_device_start(${1:root_device})$0" },
        { "trigger": "gupnp_root_device_stop()", "contents": "gupnp_root_device_stop(${1:root_device})$0" },
        { "trigger": "gupnp_service_action_get()", "contents": "gupnp_service_action_get(${1:action}, ${2:name}, ${3:type})$0" },
        { "trigger": "gupnp_service_action_return()", "contents": "gupnp_service_action_return(${1:action})$0" },
        { "trigger": "gupnp_service_action_return_error()", "contents": "gupnp_service_action_return_error(${1:action}, ${2:error_code})$0" },
        { "trigger": "gupnp_service_action_set()", "contents": "gupnp_service_action_set(${1:action}, ${2:name}, ${3:type}, ${4:value})$0" },
        { "trigger": "gupnp_service_freeze_notify()", "contents": "gupnp_service_freeze_notify(${1:service})$0" },
        { "trigger": "gupnp_service_info_get()", "contents": "gupnp_service_info_get(${1:proxy})$0" },
        { "trigger": "gupnp_service_info_get_introspection()", "contents": "gupnp_service_info_get_introspection(${1:proxy})$0" },
        { "trigger": "gupnp_service_introspection_get_state_variable()", "contents": "gupnp_service_introspection_get_state_variable(${1:introspection}, ${2:variable_name})$0" },
        { "trigger": "gupnp_service_notify()", "contents": "gupnp_service_notify(${1:service}, ${2:name}, ${3:type}, ${4:value})$0" },
        { "trigger": "gupnp_service_proxy_action_get()", "contents": "gupnp_service_proxy_action_get(${1:proxy}, ${2:action}, ${3:name}, ${4:type})$0" },
        { "trigger": "gupnp_service_proxy_action_set()", "contents": "gupnp_service_proxy_action_set(${1:proxy}, ${2:action}, ${3:name}, ${4:value}, ${5:type})$0" },
        { "trigger": "gupnp_service_proxy_add_notify()", "contents": "gupnp_service_proxy_add_notify(${1:proxy}, ${2:value}, ${3:type}, ${4:callback})$0" },
        { "trigger": "gupnp_service_proxy_callback_set()", "contents": "gupnp_service_proxy_callback_set(${1:proxy}, ${2:signal}, ${3:callback})$0" },
        { "trigger": "gupnp_service_proxy_get_subscribed()", "contents": "gupnp_service_proxy_get_subscribed(${1:proxy})$0" },
        { "trigger": "gupnp_service_proxy_remove_notify()", "contents": "gupnp_service_proxy_remove_notify(${1:proxy}, ${2:value})$0" },
        { "trigger": "gupnp_service_proxy_set_subscribed()", "contents": "gupnp_service_proxy_set_subscribed(${1:proxy}, ${2:subscribed})$0" },
        { "trigger": "gupnp_service_thaw_notify()", "contents": "gupnp_service_thaw_notify(${1:service})$0" },
        */
        // Zlib compression
        { "trigger": "gzclose()", "contents": "gzclose(${1:zp})$0" },
        { "trigger": "gzcompress()", "contents": "gzcompress(${1:data})$0" },
        { "trigger": "gzdecode()", "contents": "gzdecode(${1:data})$0" },
        { "trigger": "gzdeflate()", "contents": "gzdeflate(${1:data})$0" },
        { "trigger": "gzencode()", "contents": "gzencode(${1:data})$0" },
        { "trigger": "gzeof()", "contents": "gzeof(${1:zp})$0" },
        { "trigger": "gzfile()", "contents": "gzfile(${1:filename})$0" },
        { "trigger": "gzgetc()", "contents": "gzgetc(${1:zp})$0" },
        { "trigger": "gzgets()", "contents": "gzgets(${1:zp}, ${2:length})$0" },
        { "trigger": "gzgetss()", "contents": "gzgetss(${1:zp}, ${2:length})$0" },
        { "trigger": "gzinflate()", "contents": "gzinflate(${1:data})$0" },
        { "trigger": "gzopen()", "contents": "gzopen(${1:filename}, ${2:mode})$0" },
        { "trigger": "gzpassthru()", "contents": "gzpassthru(${1:zp})$0" },
        { "trigger": "gzputs()", "contents": "gzputs(${1:zp}, ${2:string}${3:[, length]})$0" },
        { "trigger": "gzread()", "contents": "gzread(${1:zp}, ${2:length})$0" },
        { "trigger": "gzrewind()", "contents": "gzrewind(${1:zp})$0" },
        { "trigger": "gzseek()", "contents": "gzseek(${1:zp}, ${2:offset})$0" },
        { "trigger": "gztell()", "contents": "gztell(${1:zp})$0" },
        { "trigger": "gzuncompress()", "contents": "gzuncompress(${1:data})$0" },
        { "trigger": "gzwrite()", "contents": "gzwrite(${1:zp}, ${2:string}${3:[, length]})$0" },

        { "trigger": "halt_compiler()", "contents": "halt_compiler()" },
        // libHaru library - generating PDF files
        "HaruAnnotation", "HaruDestination", "HaruDoc",
        "HaruEncoder", "HaruException", "HaruFont", "HaruImage", "HaruOutline", "HaruPage",

        { "trigger": "hasConstant()", "contents": "hasConstant(${1:name})$0" },
        { "trigger": "hash()", "contents": "hash(${1:algo}, ${2:data})$0" },
        { "trigger": "hash_algos()", "contents": "hash_algos()" },
        { "trigger": "hash_copy()", "contents": "hash_copy(${1:context})$0" },
        { "trigger": "hash_file()", "contents": "hash_file(${1:algo}, ${2:filename})$0" },
        { "trigger": "hash_final()", "contents": "hash_final(${1:context})$0" },
        { "trigger": "hash_hmac()", "contents": "hash_hmac(${1:algo}, ${2:data}, ${3:key})$0" },
        { "trigger": "hash_hmac_file()", "contents": "hash_hmac_file(${1:algo}, ${2:filename}, ${3:key})$0" },
        { "trigger": "hash_init()", "contents": "hash_init(${1:algo})$0" },
        { "trigger": "hash_update()", "contents": "hash_update(${1:context}, ${2:data})$0" },
        { "trigger": "hash_update_file()", "contents": "hash_update_file(${1:context}, ${2:filename})$0" },
        { "trigger": "hash_update_stream()", "contents": "hash_update_stream(${1:context}, ${2:handle})$0" },
        { "trigger": "hasMethod()", "contents": "hasMethod(${1:name})$0" },
        { "trigger": "hasProperty()", "contents": "hasProperty(${1:name})$0" },
        { "trigger": "header()", "contents": "header(${1:string}${2:[, replace]}${3:[, http_response_code]})$0" },
        { "trigger": "header_register_callback()", "contents": "header_register_callback(${1:call_back})$0" },
        { "trigger": "header_remove()", "contents": "header_remove(${1:[name]})$0" },
        { "trigger": "headers_list()", "contents": "headers_list()" },
        { "trigger": "headers_sent()", "contents": "headers_sent(${1:[file]}${2:[, line]})$0" },
        { "trigger": "hebrev()", "contents": "hebrev(${1:hebrew_text}${2:[, max_chars_per_line]})$0" },
        { "trigger": "hebrevc()", "contents": "hebrevc(${1:hebrew_text}${2:[, max_chars_per_line]})$0" },
        { "trigger": "hex2bin()", "contents": "hex2bin(${1:data})$0" },
        { "trigger": "hexdec()", "contents": "hexdec(${1:hex_string})$0" },
        { "trigger": "highlight_file()", "contents": "highlight_file(${1:filename}${2:[, return]})$0" },
        { "trigger": "highlight_string()", "contents": "highlight_string(${1:str}${2:[, return]})$0" },
        { "trigger": "html_entity_decode()", "contents": "html_entity_decode(${1:string}${2:[, flags]}${3:[, encoding]})$0" },
        { "trigger": "htmlentities()", "contents": "htmlentities(${1:string})$0" },
        { "trigger": "htmlentities(full)", "contents": "htmlentities(${1:string}${2:[, flags]}${3:[, encoding]}${4:[, double_encode]})$0" },
        { "trigger": "htmlspecialchars()", "contents": "htmlspecialchars(${1:string})$0" },
        { "trigger": "htmlspecialchars(full)", "contents": "htmlspecialchars(${1:string}${2:[, flags]}${3:[, encoding]}${4:[, double_encode]})$0" },
        { "trigger": "htmlspecialchars_decode()", "contents": "htmlspecialchars_decode(${1:string}${2:[, flags]})$0" },

        { "trigger": "http_build_cookie()", "contents": "http_build_cookie(${1:cookie})$0" },
        { "trigger": "http_build_query()", "contents": "http_build_query(${1:query_data})$0" },
        { "trigger": "http_build_query(full)", "contents": "http_build_query(${1:query_data}${2:[, numeric_prefix]}${3:[, arg_separator]}${4:[, enc_type]})$0" },
        { "trigger": "http_build_str()", "contents": "http_build_str(${1:query})$0" },
        { "trigger": "http_build_url()", "contents": "http_build_url($1)$0" },
        { "trigger": "http_build_url(full)", "contents": "http_build_url(${1:[url]}${2:[, parts]}${3:[, flags]}${4:[, new_url]})$0" },
        { "trigger": "http_cache_etag()", "contents": "http_cache_etag(${1:[etag]})$0" },
        { "trigger": "http_cache_last_modified()", "contents": "http_cache_last_modified(${1:[timestamp_or_expires]})$0" },
        { "trigger": "http_chunked_decode()", "contents": "http_chunked_decode(${1:encoded})$0" },
        { "trigger": "http_date()", "contents": "http_date(${1:[timestamp]})$0" },
        { "trigger": "http_deflate()", "contents": "http_deflate(${1:data})$0" },
        { "trigger": "http_get()", "contents": "http_get(${1:url})$0" },
        { "trigger": "http_get_request_body()", "contents": "http_get_request_body()" },
        { "trigger": "http_get_request_body_stream()", "contents": "http_get_request_body_stream()" },
        { "trigger": "http_get_request_headers()", "contents": "http_get_request_headers()" },
        { "trigger": "http_head()", "contents": "http_head(${1:url})$0" },
        { "trigger": "http_inflate()", "contents": "http_inflate(${1:data})$0" },
        { "trigger": "http_match_etag()", "contents": "http_match_etag(${1:etag})$0" },
        { "trigger": "http_match_modified()", "contents": "http_match_modified(${1:[timestamp]}${2:[, for_range]})$0" },
        { "trigger": "http_match_request_header()", "contents": "http_match_request_header(${1:header}, ${2:value})$0" },
        { "trigger": "http_negotiate_charset()", "contents": "http_negotiate_charset(${1:supported})$0" },
        { "trigger": "http_negotiate_content_type()", "contents": "http_negotiate_content_type(${1:supported})$0" },
        { "trigger": "http_negotiate_language()", "contents": "http_negotiate_language(${1:supported})$0" },
        { "trigger": "http_parse_cookie()", "contents": "http_parse_cookie(${1:cookie})$0" },
        { "trigger": "http_parse_headers()", "contents": "http_parse_headers(${1:header})$0" },
        { "trigger": "http_parse_message()", "contents": "http_parse_message(${1:message})$0" },
        { "trigger": "http_parse_params()", "contents": "http_parse_params(${1:param})$0" },
        { "trigger": "http_persistent_handles_clean()", "contents": "http_persistent_handles_clean(${1:[ident]})$0" },
        { "trigger": "http_persistent_handles_count()", "contents": "http_persistent_handles_count()" },
        { "trigger": "http_persistent_handles_ident()", "contents": "http_persistent_handles_ident(${1:[ident]})$0" },
        { "trigger": "http_post_data()", "contents": "http_post_data(${1:url}, ${2:data})$0" },
        { "trigger": "http_post_fields()", "contents": "http_post_fields(${1:url}, ${2:data})$0" },
        { "trigger": "http_put_data()", "contents": "http_put_data(${1:url}, ${2:data})$0" },
        { "trigger": "http_put_file()", "contents": "http_put_file(${1:url}, ${2:file})$0" },
        { "trigger": "http_put_stream()", "contents": "http_put_stream(${1:url}, ${2:stream})$0" },
        { "trigger": "http_redirect()", "contents": "http_redirect($1)$0" },
        { "trigger": "http_redirect(full)", "contents": "http_redirect(${1:[url]}${2:[, params]}${3:[, session]}${4:[, status]})$0" },
        { "trigger": "http_request()", "contents": "http_request(${1:method}, ${2:url})$0" },
        { "trigger": "http_request_body_encode()", "contents": "http_request_body_encode(${1:fields}, ${2:files})$0" },
        { "trigger": "http_request_method_exists()", "contents": "http_request_method_exists(${1:method})$0" },
        { "trigger": "http_request_method_name()", "contents": "http_request_method_name(${1:method})$0" },
        { "trigger": "http_request_method_register()", "contents": "http_request_method_register(${1:method})$0" },
        { "trigger": "http_request_method_unregister()", "contents": "http_request_method_unregister(${1:method})$0" },
        { "trigger": "http_response_code()", "contents": "http_response_code(${1:[response_code]})$0" },
        { "trigger": "http_send_content_disposition()", "contents": "http_send_content_disposition(${1:filename})$0" },
        { "trigger": "http_send_content_type()", "contents": "http_send_content_type(${1:[content_type]})$0" },
        { "trigger": "http_send_data()", "contents": "http_send_data(${1:data})$0" },
        { "trigger": "http_send_file()", "contents": "http_send_file(${1:file})$0" },
        { "trigger": "http_send_last_modified()", "contents": "http_send_last_modified(${1:[timestamp]})$0" },
        { "trigger": "http_send_status()", "contents": "http_send_status(${1:status})$0" },
        { "trigger": "http_send_stream()", "contents": "http_send_stream(${1:stream})$0" },
        { "trigger": "http_support()", "contents": "http_support(${1:[feature]})$0" },
        { "trigger": "http_throttle()", "contents": "http_throttle(${1:sec})$0" },
        "HttpDeflateStream",
        { "trigger": "HttpDeflateStream()", "contents": "HttpDeflateStream(${1:[flags]})$0" },
        "HttpInflateStream",
        { "trigger": "HttpInflateStream()", "contents": "HttpInflateStream(${1:[flags]})$0" },
        "HttpMessage",
        { "trigger": "HttpMessage()", "contents": "HttpMessage(${1:[message]})$0" },
        "HttpQueryString",
        { "trigger": "HttpQueryString()", "contents": "HttpQueryString(${1:[global]}${2:[, add]})$0" },
        "HttpRequest",
        { "trigger": "HttpRequest()", "contents": "HttpRequest(${1:[url]}${2:[, request_method]}${3:[, options]})$0" },
        "HttpRequestPool",
        { "trigger": "HttpRequestPool()", "contents": "HttpRequestPool(${1:[requests]})$0" },
        "HttpResponse",
        /* Hyperwave and Hyperwave API
        { "trigger": "hw_api_content()", "contents": "hw_api_content(${1:content}, ${2:mimetype})$0" },
        { "trigger": "hw_api_object()", "contents": "hw_api_object(${1:parameter})$0" },
        { "trigger": "hw_Array2Objrec()", "contents": "hw_Array2Objrec(${1:object_array})$0" },
        { "trigger": "hw_changeobject()", "contents": "hw_changeobject(${1:link}, ${2:objid}, ${3:attributes})$0" },
        { "trigger": "hw_Children()", "contents": "hw_Children(${1:connection}, ${2:objectID})$0" },
        { "trigger": "hw_ChildrenObj()", "contents": "hw_ChildrenObj(${1:connection}, ${2:objectID})$0" },
        { "trigger": "hw_Close()", "contents": "hw_Close(${1:connection})$0" },
        { "trigger": "hw_Connect()", "contents": "hw_Connect(${1:host}, ${2:port})$0" },
        { "trigger": "hw_connection_info()", "contents": "hw_connection_info(${1:link})$0" },
        { "trigger": "hw_cp()", "contents": "hw_cp(${1:connection}, ${2:object_id_array}, ${3:destination_id})$0" },
        { "trigger": "hw_Deleteobject()", "contents": "hw_Deleteobject(${1:connection}, ${2:object_to_delete})$0" },
        { "trigger": "hw_DocByAnchor()", "contents": "hw_DocByAnchor(${1:connection}, ${2:anchorID})$0" },
        { "trigger": "hw_DocByAnchorObj()", "contents": "hw_DocByAnchorObj(${1:connection}, ${2:anchorID})$0" },
        { "trigger": "hw_Document_Attributes()", "contents": "hw_Document_Attributes(${1:hw_document})$0" },
        { "trigger": "hw_Document_BodyTag()", "contents": "hw_Document_BodyTag(${1:hw_document})$0" },
        { "trigger": "hw_Document_Content()", "contents": "hw_Document_Content(${1:hw_document})$0" },
        { "trigger": "hw_Document_SetContent()", "contents": "hw_Document_SetContent(${1:hw_document}, ${2:content})$0" },
        { "trigger": "hw_Document_Size()", "contents": "hw_Document_Size(${1:hw_document})$0" },
        { "trigger": "hw_dummy()", "contents": "hw_dummy(${1:link}, ${2:id}, ${3:msgid})$0" },
        { "trigger": "hw_EditText()", "contents": "hw_EditText(${1:connection}, ${2:hw_document})$0" },
        { "trigger": "hw_Error()", "contents": "hw_Error(${1:connection})$0" },
        { "trigger": "hw_ErrorMsg()", "contents": "hw_ErrorMsg(${1:connection})$0" },
        { "trigger": "hw_Free_Document()", "contents": "hw_Free_Document(${1:hw_document})$0" },
        { "trigger": "hw_GetAnchors()", "contents": "hw_GetAnchors(${1:connection}, ${2:objectID})$0" },
        { "trigger": "hw_GetAnchorsObj()", "contents": "hw_GetAnchorsObj(${1:connection}, ${2:objectID})$0" },
        { "trigger": "hw_GetAndLock()", "contents": "hw_GetAndLock(${1:connection}, ${2:objectID})$0" },
        { "trigger": "hw_GetChildColl()", "contents": "hw_GetChildColl(${1:connection}, ${2:objectID})$0" },
        { "trigger": "hw_GetChildCollObj()", "contents": "hw_GetChildCollObj(${1:connection}, ${2:objectID})$0" },
        { "trigger": "hw_GetChildDocColl()", "contents": "hw_GetChildDocColl(${1:connection}, ${2:objectID})$0" },
        { "trigger": "hw_GetChildDocCollObj()", "contents": "hw_GetChildDocCollObj(${1:connection}, ${2:objectID})$0" },
        { "trigger": "hw_GetObject()", "contents": "hw_GetObject(${1:connection}, ${2:objectID})$0" },
        { "trigger": "hw_GetObjectByQuery()", "contents": "hw_GetObjectByQuery(${1:connection}, ${2:query}, ${3:max_hits})$0" },
        { "trigger": "hw_GetObjectByQueryColl()", "contents": "hw_GetObjectByQueryColl(${1:connection}, ${2:objectID}, ${3:query}, ${4:max_hits})$0" },
        { "trigger": "hw_GetObjectByQueryCollObj()", "contents": "hw_GetObjectByQueryCollObj(${1:connection}, ${2:objectID}, ${3:query}, ${4:max_hits})$0" },
        { "trigger": "hw_GetObjectByQueryObj()", "contents": "hw_GetObjectByQueryObj(${1:connection}, ${2:query}, ${3:max_hits})$0" },
        { "trigger": "hw_GetParents()", "contents": "hw_GetParents(${1:connection}, ${2:objectID})$0" },
        { "trigger": "hw_GetParentsObj()", "contents": "hw_GetParentsObj(${1:connection}, ${2:objectID})$0" },
        { "trigger": "hw_getrellink()", "contents": "hw_getrellink(${1:link}, ${2:rootid}, ${3:sourceid}, ${4:destid})$0" },
        { "trigger": "hw_GetRemote()", "contents": "hw_GetRemote(${1:connection}, ${2:objectID})$0" },
        { "trigger": "hw_getremotechildren()", "contents": "hw_getremotechildren(${1:connection}, ${2:object_record})$0" },
        { "trigger": "hw_GetSrcByDestObj()", "contents": "hw_GetSrcByDestObj(${1:connection}, ${2:objectID})$0" },
        { "trigger": "hw_GetText()", "contents": "hw_GetText(${1:connection}, ${2:objectID})$0" },
        { "trigger": "hw_getusername()", "contents": "hw_getusername(${1:connection})$0" },
        { "trigger": "hw_Identify()", "contents": "hw_Identify(${1:link}, ${2:username}, ${3:password})$0" },
        { "trigger": "hw_InCollections()", "contents": "hw_InCollections(${1:connection}, ${2:object_id_array}, ${3:collection_id_array}, ${4:return_collections})$0" },
        { "trigger": "hw_Info()", "contents": "hw_Info(${1:connection})$0" },
        { "trigger": "hw_InsColl()", "contents": "hw_InsColl(${1:connection}, ${2:objectID}, ${3:object_array})$0" },
        { "trigger": "hw_InsDoc()", "contents": "hw_InsDoc(${1:connection}, ${2:parentID}, ${3:object_record})$0" },
        { "trigger": "hw_insertanchors()", "contents": "hw_insertanchors(${1:hwdoc}, ${2:anchorecs}, ${3:dest})$0" },
        { "trigger": "hw_InsertDocument()", "contents": "hw_InsertDocument(${1:connection}, ${2:parent_id}, ${3:hw_document})$0" },
        { "trigger": "hw_InsertObject()", "contents": "hw_InsertObject(${1:connection}, ${2:object_rec}, ${3:parameter})$0" },
        { "trigger": "hw_mapid()", "contents": "hw_mapid(${1:connection}, ${2:server_id}, ${3:object_id})$0" },
        { "trigger": "hw_Modifyobject()", "contents": "hw_Modifyobject(${1:connection}, ${2:object_to_change}, ${3:remove}, ${4:add})$0" },
        { "trigger": "hw_mv()", "contents": "hw_mv(${1:connection}, ${2:object_id_array}, ${3:source_id}, ${4:destination_id})$0" },
        { "trigger": "hw_New_Document()", "contents": "hw_New_Document(${1:object_record}, ${2:document_data}, ${3:document_size})$0" },
        { "trigger": "hw_objrec2array()", "contents": "hw_objrec2array(${1:object_record})$0" },
        { "trigger": "hw_Output_Document()", "contents": "hw_Output_Document(${1:hw_document})$0" },
        { "trigger": "hw_pConnect()", "contents": "hw_pConnect(${1:host}, ${2:port})$0" },
        { "trigger": "hw_PipeDocument()", "contents": "hw_PipeDocument(${1:connection}, ${2:objectID})$0" },
        { "trigger": "hw_Root()", "contents": "hw_Root()" },
        { "trigger": "hw_setlinkroot()", "contents": "hw_setlinkroot(${1:link}, ${2:rootid})$0" },
        { "trigger": "hw_stat()", "contents": "hw_stat(${1:link})$0" },
        { "trigger": "hw_Unlock()", "contents": "hw_Unlock(${1:connection}, ${2:objectID})$0" },
        { "trigger": "hw_Who()", "contents": "hw_Who(${1:connection})$0" },
        { "trigger": "hwapi_attribute_new()", "contents": "hwapi_attribute_new(${1:[name]}${2:[, value]})$0" },
        { "trigger": "hwapi_content_new()", "contents": "hwapi_content_new(${1:content}, ${2:mimetype})$0" },
        { "trigger": "hwapi_hgcsp()", "contents": "hwapi_hgcsp(${1:hostname})$0" },
        { "trigger": "hwapi_object_new()", "contents": "hwapi_object_new(${1:parameter})$0" },
        */
        { "trigger": "hypot()", "contents": "hypot(${1:x}, ${2:y})$0" },
        /* Firebird/Interbase
        { "trigger": "ibase_add_user()", "contents": "ibase_add_user(${1:service_handle}, ${2:user_name}, ${3:password})$0" },
        { "trigger": "ibase_affected_rows()", "contents": "ibase_affected_rows(${1:[link_identifier]})$0" },
        { "trigger": "ibase_backup()", "contents": "ibase_backup(${1:service_handle}, ${2:source_db}, ${3:dest_file})$0" },
        { "trigger": "ibase_blob_add()", "contents": "ibase_blob_add(${1:blob_handle}, ${2:data})$0" },
        { "trigger": "ibase_blob_cancel()", "contents": "ibase_blob_cancel(${1:blob_handle})$0" },
        { "trigger": "ibase_blob_close()", "contents": "ibase_blob_close(${1:blob_handle})$0" },
        { "trigger": "ibase_blob_create()", "contents": "ibase_blob_create(${1:[link_identifier]})$0" },
        { "trigger": "ibase_blob_echo()", "contents": "ibase_blob_echo(${1:blob_id})$0" },
        { "trigger": "ibase_blob_get()", "contents": "ibase_blob_get(${1:blob_handle}, ${2:len})$0" },
        { "trigger": "ibase_blob_import()", "contents": "ibase_blob_import(${1:link_identifier}, ${2:file_handle})$0" },
        { "trigger": "ibase_blob_info()", "contents": "ibase_blob_info(${1:link_identifier}, ${2:blob_id})$0" },
        { "trigger": "ibase_blob_open()", "contents": "ibase_blob_open(${1:link_identifier}, ${2:blob_id})$0" },
        { "trigger": "ibase_close()", "contents": "ibase_close(${1:[connection_id]})$0" },
        { "trigger": "ibase_commit()", "contents": "ibase_commit(${1:[link_or_trans_identifier]})$0" },
        { "trigger": "ibase_commit_ret()", "contents": "ibase_commit_ret(${1:[link_or_trans_identifier]})$0" },
        { "trigger": "ibase_connnect()", "contents": "ibase_connnect($1)$0" },
        { "trigger": "ibase_connect(full)", "contents": "ibase_connect(${1:[database]}${2:[, username]}${3:[, password]}${4:[, charset]}${5:[, buffers]}${6:[, dialect]}${7:[, role]}${8:[, sync]})$0" },
        { "trigger": "ibase_db_info()", "contents": "ibase_db_info(${1:service_handle}, ${2:db}, ${3:action})$0" },
        { "trigger": "ibase_delete_user()", "contents": "ibase_delete_user(${1:service_handle}, ${2:user_name})$0" },
        { "trigger": "ibase_drop_db()", "contents": "ibase_drop_db(${1:[connection]})$0" },
        { "trigger": "ibase_errcode()", "contents": "ibase_errcode()" },
        { "trigger": "ibase_errmsg()", "contents": "ibase_errmsg()" },
        { "trigger": "ibase_execute()", "contents": "ibase_execute(${1:query})$0" },
        { "trigger": "ibase_fetch_assoc()", "contents": "ibase_fetch_assoc(${1:result})$0" },
        { "trigger": "ibase_fetch_object()", "contents": "ibase_fetch_object(${1:result_id})$0" },
        { "trigger": "ibase_fetch_row()", "contents": "ibase_fetch_row(${1:result_identifier})$0" },
        { "trigger": "ibase_field_info()", "contents": "ibase_field_info(${1:result}, ${2:field_number})$0" },
        { "trigger": "ibase_free_event_handler()", "contents": "ibase_free_event_handler(${1:event})$0" },
        { "trigger": "ibase_free_query()", "contents": "ibase_free_query(${1:query})$0" },
        { "trigger": "ibase_free_result()", "contents": "ibase_free_result(${1:result_identifier})$0" },
        { "trigger": "ibase_gen_id()", "contents": "ibase_gen_id(${1:generator})$0" },
        { "trigger": "ibase_maintain_db()", "contents": "ibase_maintain_db(${1:service_handle}, ${2:db}, ${3:action})$0" },
        { "trigger": "ibase_modify_user()", "contents": "ibase_modify_user(${1:service_handle}, ${2:user_name}, ${3:password})$0" },
        { "trigger": "ibase_name_result()", "contents": "ibase_name_result(${1:result}, ${2:name})$0" },
        { "trigger": "ibase_num_fields()", "contents": "ibase_num_fields(${1:result_id})$0" },
        { "trigger": "ibase_num_params()", "contents": "ibase_num_params(${1:query})$0" },
        { "trigger": "ibase_param_info()", "contents": "ibase_param_info(${1:query}, ${2:param_number})$0" },
        { "trigger": "ibase_pconnect()", "contents": "ibase_pconnect($1)$0" },
        { "trigger": "ibase_pconnect(full)", "contents": "ibase_pconnect(${1:[database]}${2:[, username]}${3:[, password]}${4:[, charset]}${5:[, buffers]}${6:[, dialect]}${7:[, role]}${8:[, sync]})$0" },
        { "trigger": "ibase_prepare()", "contents": "ibase_prepare(${1:query})$0" },
        { "trigger": "ibase_query()", "contents": "ibase_query(${1:[link_identifier, ]}${2:query}${3:[, bind_args]})$0" },
        { "trigger": "ibase_restore()", "contents": "ibase_restore(${1:service_handle}, ${2:source_file}, ${3:dest_db})$0" },
        { "trigger": "ibase_rollback()", "contents": "ibase_rollback(${1:[link_or_trans_identifier]})$0" },
        { "trigger": "ibase_rollback_ret()", "contents": "ibase_rollback_ret(${1:[link_or_trans_identifier]})$0" },
        { "trigger": "ibase_server_info()", "contents": "ibase_server_info(${1:service_handle}, ${2:action})$0" },
        { "trigger": "ibase_service_attach()", "contents": "ibase_service_attach(${1:host}, ${2:dba_username}, ${3:dba_password})$0" },
        { "trigger": "ibase_service_detach()", "contents": "ibase_service_detach(${1:service_handle})$0" },
        { "trigger": "ibase_set_event_handler()", "contents": "ibase_set_event_handler(${1:event_handler}, ${2:event_name1})$0" },
        { "trigger": "ibase_timefmt()", "contents": "ibase_timefmt(${1:format})$0" },
        { "trigger": "ibase_trans()", "contents": "ibase_trans(${1:[trans_args]}${2:[, link_identifier]})$0" },
        { "trigger": "ibase_wait_event()", "contents": "ibase_wait_event(${1:event_name1})$0" },
        */
        { "trigger": "iconv()", "contents": "iconv(${1:in_charset}, ${2:out_charset}, ${3:str})$0" },
        { "trigger": "iconv_get_encoding()", "contents": "iconv_get_encoding(${1:[type]})$0" },
        { "trigger": "iconv_mime_decode()", "contents": "iconv_mime_decode(${1:encoded_header})$0" },
        { "trigger": "iconv_mime_decode_headers()", "contents": "iconv_mime_decode_headers(${1:encoded_headers})$0" },
        { "trigger": "iconv_mime_encode()", "contents": "iconv_mime_encode(${1:field_name}, ${2:field_value})$0" },
        { "trigger": "iconv_set_encoding()", "contents": "iconv_set_encoding(${1:type}, ${2:charset})$0" },
        { "trigger": "iconv_strlen()", "contents": "iconv_strlen(${1:str})$0" },
        { "trigger": "iconv_strpos()", "contents": "iconv_strpos(${1:haystack}, ${2:needle})$0" },
        { "trigger": "iconv_strrpos()", "contents": "iconv_strrpos(${1:haystack}, ${2:needle})$0" },
        { "trigger": "iconv_substr()", "contents": "iconv_substr(${1:str}, ${2:offset})$0" },
        /* ID3 tags (for MP3 files)
        { "trigger": "id3_get_frame_long_name()", "contents": "id3_get_frame_long_name(${1:frameId})$0" },
        { "trigger": "id3_get_frame_short_name()", "contents": "id3_get_frame_short_name(${1:frameId})$0" },
        { "trigger": "id3_get_genre_id()", "contents": "id3_get_genre_id(${1:genre})$0" },
        { "trigger": "id3_get_genre_list()", "contents": "id3_get_genre_list()" },
        { "trigger": "id3_get_genre_name()", "contents": "id3_get_genre_name(${1:genre_id})$0" },
        { "trigger": "id3_get_tag()", "contents": "id3_get_tag(${1:filename})$0" },
        { "trigger": "id3_get_version()", "contents": "id3_get_version(${1:filename})$0" },
        { "trigger": "id3_remove_tag()", "contents": "id3_remove_tag(${1:filename})$0" },
        { "trigger": "id3_set_tag()", "contents": "id3_set_tag(${1:filename}, ${2:tag})$0" },
        */
        { "trigger": "idate()", "contents": "idate(${1:format}${2:[, timestamp]})$0" },
        { "trigger": "idn_to_ascii()", "contents": "idn_to_ascii(${1:domain}${2:[, options]}${3:[, variant]}${4:[, idna_info]})$0" },
        { "trigger": "idn_to_unicode()", "contents": "idn_to_unicode(${1:domain}${2:[, options=0]}${3:[, variant]}${4:[, idna_info]})$0" },
        { "trigger": "idn_to_utf8()", "contents": "idn_to_utf8(${1:domain}${2:[, options=0]}${3:[, variant]}${4:[, idna_info]})$0" },
        /* Informix driver (no longer bundled with PHP 5.2.1)
        { "trigger": "ifx_affected_rows()", "contents": "ifx_affected_rows(${1:result_id})$0" },
        { "trigger": "ifx_blobinfile_mode()", "contents": "ifx_blobinfile_mode(${1:mode})$0" },
        { "trigger": "ifx_byteasvarchar()", "contents": "ifx_byteasvarchar(${1:mode})$0" },
        { "trigger": "ifx_close()", "contents": "ifx_close(${1:[link_identifier]})$0" },
        { "trigger": "ifx_connect()", "contents": "ifx_connect(${1:[database]}${2:[, userid]}${3:[, password]})$0" },
        { "trigger": "ifx_copy_blob()", "contents": "ifx_copy_blob(${1:bid})$0" },
        { "trigger": "ifx_create_blob()", "contents": "ifx_create_blob(${1:type}, ${2:mode}, ${3:param})$0" },
        { "trigger": "ifx_create_char()", "contents": "ifx_create_char(${1:param})$0" },
        { "trigger": "ifx_do()", "contents": "ifx_do(${1:result_id})$0" },
        { "trigger": "ifx_error()", "contents": "ifx_error(${1:[link_identifier]})$0" },
        { "trigger": "ifx_errormsg()", "contents": "ifx_errormsg(${1:[errorcode]})$0" },
        { "trigger": "ifx_fetch_row()", "contents": "ifx_fetch_row(${1:result_id})$0" },
        { "trigger": "ifx_fieldproperties()", "contents": "ifx_fieldproperties(${1:result_id})$0" },
        { "trigger": "ifx_fieldtypes()", "contents": "ifx_fieldtypes(${1:result_id})$0" },
        { "trigger": "ifx_free_blob()", "contents": "ifx_free_blob(${1:bid})$0" },
        { "trigger": "ifx_free_char()", "contents": "ifx_free_char(${1:bid})$0" },
        { "trigger": "ifx_free_result()", "contents": "ifx_free_result(${1:result_id})$0" },
        { "trigger": "ifx_get_blob()", "contents": "ifx_get_blob(${1:bid})$0" },
        { "trigger": "ifx_get_char()", "contents": "ifx_get_char(${1:bid})$0" },
        { "trigger": "ifx_getsqlca()", "contents": "ifx_getsqlca(${1:result_id})$0" },
        { "trigger": "ifx_htmltbl_result()", "contents": "ifx_htmltbl_result(${1:result_id})$0" },
        { "trigger": "ifx_nullformat()", "contents": "ifx_nullformat(${1:mode})$0" },
        { "trigger": "ifx_num_fields()", "contents": "ifx_num_fields(${1:result_id})$0" },
        { "trigger": "ifx_num_rows()", "contents": "ifx_num_rows(${1:result_id})$0" },
        { "trigger": "ifx_pconnect()", "contents": "ifx_pconnect(${1:[database]}${2:[, userid]}${3:[, password]})$0" },
        { "trigger": "ifx_prepare()", "contents": "ifx_prepare(${1:query}, ${2:link_identifier})$0" },
        { "trigger": "ifx_query()", "contents": "ifx_query(${1:query}, ${2:link_identifier})$0" },
        { "trigger": "ifx_textasvarchar()", "contents": "ifx_textasvarchar(${1:mode})$0" },
        { "trigger": "ifx_update_blob()", "contents": "ifx_update_blob(${1:bid}, ${2:content})$0" },
        { "trigger": "ifx_update_char()", "contents": "ifx_update_char(${1:bid}, ${2:content})$0" },
        { "trigger": "ifxus_close_slob()", "contents": "ifxus_close_slob(${1:bid})$0" },
        { "trigger": "ifxus_create_slob()", "contents": "ifxus_create_slob(${1:mode})$0" },
        { "trigger": "ifxus_free_slob()", "contents": "ifxus_free_slob(${1:bid})$0" },
        { "trigger": "ifxus_open_slob()", "contents": "ifxus_open_slob(${1:bid}, ${2:mode})$0" },
        { "trigger": "ifxus_read_slob()", "contents": "ifxus_read_slob(${1:bid}, ${2:nbytes})$0" },
        { "trigger": "ifxus_seek_slob()", "contents": "ifxus_seek_slob(${1:bid}, ${2:mode}, ${3:offset})$0" },
        { "trigger": "ifxus_tell_slob()", "contents": "ifxus_tell_slob(${1:bid})$0" },
        { "trigger": "ifxus_write_slob()", "contents": "ifxus_write_slob(${1:bid}, ${2:content})$0" },
        */
        { "trigger": "ignore_user_abort()", "contents": "ignore_user_abort(${1:[value]})$0" },
        /* Microsoft Internet Information Server (IIS) - Win32 only
        { "trigger": "iis_add_server()", "contents": "iis_add_server(${1:path}, ${2:comment}, ${3:server_ip}, ${4:port}, ${5:host_name}, ${6:rights}, ${7:start_server})$0" },
        { "trigger": "iis_get_dir_security()", "contents": "iis_get_dir_security(${1:server_instance}, ${2:virtual_path})$0" },
        { "trigger": "iis_get_script_map()", "contents": "iis_get_script_map(${1:server_instance}, ${2:virtual_path}, ${3:script_extension})$0" },
        { "trigger": "iis_get_server_by_comment()", "contents": "iis_get_server_by_comment(${1:comment})$0" },
        { "trigger": "iis_get_server_by_path()", "contents": "iis_get_server_by_path(${1:path})$0" },
        { "trigger": "iis_get_server_rights()", "contents": "iis_get_server_rights(${1:server_instance}, ${2:virtual_path})$0" },
        { "trigger": "iis_get_service_state()", "contents": "iis_get_service_state(${1:service_id})$0" },
        { "trigger": "iis_remove_server()", "contents": "iis_remove_server(${1:server_instance})$0" },
        { "trigger": "iis_set_app_settings()", "contents": "iis_set_app_settings(${1:server_instance}, ${2:virtual_path}, ${3:application_scope})$0" },
        { "trigger": "iis_set_dir_security()", "contents": "iis_set_dir_security(${1:server_instance}, ${2:virtual_path}, ${3:directory_flags})$0" },
        { "trigger": "iis_set_script_map()", "contents": "iis_set_script_map(${1:server_instance}, ${2:virtual_path}, ${3:script_extension}, ${4:engine_path}, ${5:allow_scripting})$0" },
        { "trigger": "iis_set_server_rights()", "contents": "iis_set_server_rights(${1:server_instance}, ${2:virtual_path}, ${3:directory_flags})$0" },
        { "trigger": "iis_start_server()", "contents": "iis_start_server(${1:server_instance})$0" },
        { "trigger": "iis_start_service()", "contents": "iis_start_service(${1:service_id})$0" },
        { "trigger": "iis_stop_server()", "contents": "iis_stop_server(${1:server_instance})$0" },
        { "trigger": "iis_stop_service()", "contents": "iis_stop_service(${1:service_id})$0" },
        */
        { "trigger": "image2wbmp()", "contents": "image2wbmp(${1:image}${2:[, filename]}${3:[, threshold]})$0" },
        { "trigger": "image_type_to_extension()", "contents": "image_type_to_extension(${1:imagetype}${2:[, include_dot]})$0" },
        { "trigger": "image_type_to_mime_type()", "contents": "image_type_to_mime_type(${1:imagetype})$0" },
        { "trigger": "imagealphablending()", "contents": "imagealphablending(${1:image}, ${2:blendmode})$0" },
        { "trigger": "imageantialias()", "contents": "imageantialias(${1:image}, ${2:enabled})$0" },
        { "trigger": "imagearc()", "contents": "imagearc(${1:image}, ${2:cx}, ${3:cy}, ${4:width}, ${5:height}, ${6:start}, ${7:end}, ${8:color})$0" },
        { "trigger": "imagechar()", "contents": "imagechar(${1:image}, ${2:font}, ${3:x}, ${4:y}, ${5:c}, ${6:color})$0" },
        { "trigger": "imagecharup()", "contents": "imagecharup(${1:image}, ${2:font}, ${3:x}, ${4:y}, ${5:c}, ${6:color})$0" },
        { "trigger": "imagecolorallocate()", "contents": "imagecolorallocate(${1:image}, ${2:red}, ${3:green}, ${4:blue})$0" },
        { "trigger": "imagecolorallocatealpha()", "contents": "imagecolorallocatealpha(${1:image}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})$0" },
        { "trigger": "imagecolorat()", "contents": "imagecolorat(${1:image}, ${2:x}, ${3:y})$0" },
        { "trigger": "imagecolorclosest()", "contents": "imagecolorclosest(${1:image}, ${2:red}, ${3:green}, ${4:blue})$0" },
        { "trigger": "imagecolorclosestalpha()", "contents": "imagecolorclosestalpha(${1:image}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})$0" },
        { "trigger": "imagecolorclosesthwb()", "contents": "imagecolorclosesthwb(${1:image}, ${2:red}, ${3:green}, ${4:blue})$0" },
        { "trigger": "imagecolordeallocate()", "contents": "imagecolordeallocate(${1:image}, ${2:color})$0" },
        { "trigger": "imagecolorexact()", "contents": "imagecolorexact(${1:image}, ${2:red}, ${3:green}, ${4:blue})$0" },
        { "trigger": "imagecolorexactalpha()", "contents": "imagecolorexactalpha(${1:image}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})$0" },
        { "trigger": "imagecolormatch()", "contents": "imagecolormatch(${1:image1}, ${2:image2})$0" },
        { "trigger": "imagecolorresolve()", "contents": "imagecolorresolve(${1:image}, ${2:red}, ${3:green}, ${4:blue})$0" },
        { "trigger": "imagecolorresolvealpha()", "contents": "imagecolorresolvealpha(${1:image}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})$0" },
        { "trigger": "imagecolorset()", "contents": "imagecolorset(${1:image}, ${2:index}, ${3:red}, ${4:green}, ${5:blue})$0" },
        { "trigger": "imagecolorsforindex()", "contents": "imagecolorsforindex(${1:image}, ${2:index})$0" },
        { "trigger": "imagecolorstotal()", "contents": "imagecolorstotal(${1:image})$0" },
        { "trigger": "imagecolortransparent()", "contents": "imagecolortransparent(${1:image})$0" },
        { "trigger": "imageconvolution()", "contents": "imageconvolution(${1:image}, ${2:matrix}, ${3:div}, ${4:offset})$0" },
        { "trigger": "imagecopy()", "contents": "imagecopy(${1:dst_im}, ${2:src_im}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:src_w}, ${8:src_h})$0" },
        { "trigger": "imagecopymerge()", "contents": "imagecopymerge(${1:dst_im}, ${2:src_im}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:src_w}, ${8:src_h}, ${9:pct})$0" },
        { "trigger": "imagecopymergegray()", "contents": "imagecopymergegray(${1:dst_im}, ${2:src_im}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:src_w}, ${8:src_h}, ${9:pct})$0" },
        { "trigger": "imagecopyresampled()", "contents": "imagecopyresampled(${1:dst_image}, ${2:src_image}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:dst_w}, ${8:dst_h}, ${9:src_w}, ${10:src_h})$0" },
        { "trigger": "imagecopyresized()", "contents": "imagecopyresized(${1:dst_image}, ${2:src_image}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:dst_w}, ${8:dst_h}, ${9:src_w}, ${10:src_h})$0" },
        { "trigger": "imagecreate()", "contents": "imagecreate(${1:width}, ${2:height})$0" },
        { "trigger": "imagecreatefromgd()", "contents": "imagecreatefromgd(${1:filename})$0" },
        { "trigger": "imagecreatefromgd2()", "contents": "imagecreatefromgd2(${1:filename})$0" },
        { "trigger": "imagecreatefromgd2part()", "contents": "imagecreatefromgd2part(${1:filename}, ${2:srcX}, ${3:srcY}, ${4:width}, ${5:height})$0" },
        { "trigger": "imagecreatefromgif()", "contents": "imagecreatefromgif(${1:filename})$0" },
        { "trigger": "imagecreatefromjpeg()", "contents": "imagecreatefromjpeg(${1:filename})$0" },
        { "trigger": "imagecreatefrompng()", "contents": "imagecreatefrompng(${1:filename})$0" },
        { "trigger": "imagecreatefromstring()", "contents": "imagecreatefromstring(${1:data})$0" },
        { "trigger": "imagecreatefromwbmp()", "contents": "imagecreatefromwbmp(${1:filename})$0" },
        { "trigger": "imagecreatefromxbm()", "contents": "imagecreatefromxbm(${1:filename})$0" },
        { "trigger": "imagecreatefromxpm()", "contents": "imagecreatefromxpm(${1:filename})$0" },
        { "trigger": "imagecreatetruecolor()", "contents": "imagecreatetruecolor(${1:width}, ${2:height})$0" },
        { "trigger": "imagedashedline()", "contents": "imagedashedline(${1:image}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color})$0" },
        { "trigger": "imagedestroy()", "contents": "imagedestroy(${1:image})$0" },
        { "trigger": "imageellipse()", "contents": "imageellipse(${1:image}, ${2:cx}, ${3:cy}, ${4:width}, ${5:height}, ${6:color})$0" },
        { "trigger": "imagefill()", "contents": "imagefill(${1:image}, ${2:x}, ${3:y}, ${4:color})$0" },
        { "trigger": "imagefilledarc()", "contents": "imagefilledarc(${1:image}, ${2:cx}, ${3:cy}, ${4:width}, ${5:height}, ${6:start}, ${7:end}, ${8:color}, ${9:style})$0" },
        { "trigger": "imagefilledellipse()", "contents": "imagefilledellipse(${1:image}, ${2:cx}, ${3:cy}, ${4:width}, ${5:height}, ${6:color})$0" },
        { "trigger": "imagefilledpolygon()", "contents": "imagefilledpolygon(${1:image}, ${2:points}, ${3:num_points}, ${4:color})$0" },
        { "trigger": "imagefilledrectangle()", "contents": "imagefilledrectangle(${1:image}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color})$0" },
        { "trigger": "imagefilltoborder()", "contents": "imagefilltoborder(${1:image}, ${2:x}, ${3:y}, ${4:border}, ${5:color})$0" },
        { "trigger": "imagefilter()", "contents": "imagefilter(${1:image}, ${2:filtertype})$0" },
        { "trigger": "imagefontheight()", "contents": "imagefontheight(${1:font})$0" },
        { "trigger": "imagefontwidth()", "contents": "imagefontwidth(${1:font})$0" },
        { "trigger": "imageftbbox()", "contents": "imageftbbox(${1:size}, ${2:angle}, ${3:fontfile}, ${4:text})$0" },
        { "trigger": "imagefttext()", "contents": "imagefttext(${1:image}, ${2:size}, ${3:angle}, ${4:x}, ${5:y}, ${6:color}, ${7:fontfile}, ${8:text})$0" },
        { "trigger": "imagegammacorrect()", "contents": "imagegammacorrect(${1:image}, ${2:inputgamma}, ${3:outputgamma})$0" },
        { "trigger": "imagegd()", "contents": "imagegd(${1:image})$0" },
        { "trigger": "imagegd2()", "contents": "imagegd2(${1:image})$0" },
        { "trigger": "imagegif()", "contents": "imagegif(${1:image})$0" },
        { "trigger": "imagegrabscreen()", "contents": "imagegrabscreen()" },
        { "trigger": "imagegrabwindow()", "contents": "imagegrabwindow(${1:window_handle})$0" },
        { "trigger": "imageinterlace()", "contents": "imageinterlace(${1:image})$0" },
        { "trigger": "imageistruecolor()", "contents": "imageistruecolor(${1:image})$0" },
        { "trigger": "imagejpeg()", "contents": "imagejpeg(${1:image})$0" },
        { "trigger": "imagelayereffect()", "contents": "imagelayereffect(${1:image}, ${2:effect})$0" },
        { "trigger": "imageline()", "contents": "imageline(${1:image}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color})$0" },
        { "trigger": "imageloadfont()", "contents": "imageloadfont(${1:file})$0" },
        { "trigger": "imagepalettecopy()", "contents": "imagepalettecopy(${1:destination}, ${2:source})$0" },
        { "trigger": "imagepng()", "contents": "imagepng(${1:image})$0" },
        { "trigger": "imagepolygon()", "contents": "imagepolygon(${1:image}, ${2:points}, ${3:num_points}, ${4:color})$0" },
        { "trigger": "imagepsbbox()", "contents": "imagepsbbox(${1:text}, ${2:font}, ${3:size})$0" },
        { "trigger": "imagepsencodefont()", "contents": "imagepsencodefont(${1:font_index}, ${2:encodingfile})$0" },
        { "trigger": "imagepsextendfont()", "contents": "imagepsextendfont(${1:font_index}, ${2:extend})$0" },
        { "trigger": "imagepsfreefont()", "contents": "imagepsfreefont(${1:font_index})$0" },
        { "trigger": "imagepsloadfont()", "contents": "imagepsloadfont(${1:filename})$0" },
        { "trigger": "imagepsslantfont()", "contents": "imagepsslantfont(${1:font_index}, ${2:slant})$0" },
        { "trigger": "imagepstext()", "contents": "imagepstext(${1:image}, ${2:text}, ${3:font_index}, ${4:size}, ${5:foreground}, ${6:background}, ${7:x}, ${8:y})$0" },
        { "trigger": "imagerectangle()", "contents": "imagerectangle(${1:image}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color})$0" },
        { "trigger": "imagerotate()", "contents": "imagerotate(${1:image}, ${2:angle}, ${3:bgd_color})$0" },
        { "trigger": "imagesavealpha()", "contents": "imagesavealpha(${1:image}, ${2:saveflag})$0" },
        { "trigger": "imagesetbrush()", "contents": "imagesetbrush(${1:image}, ${2:brush})$0" },
        { "trigger": "imagesetpixel()", "contents": "imagesetpixel(${1:image}, ${2:x}, ${3:y}, ${4:color})$0" },
        { "trigger": "imagesetstyle()", "contents": "imagesetstyle(${1:image}, ${2:style})$0" },
        { "trigger": "imagesetthickness()", "contents": "imagesetthickness(${1:image}, ${2:thickness})$0" },
        { "trigger": "imagesettile()", "contents": "imagesettile(${1:image}, ${2:tile})$0" },
        { "trigger": "imagestring()", "contents": "imagestring(${1:image}, ${2:font}, ${3:x}, ${4:y}, ${5:string}, ${6:color})$0" },
        { "trigger": "imagestringup()", "contents": "imagestringup(${1:image}, ${2:font}, ${3:x}, ${4:y}, ${5:string}, ${6:color})$0" },
        { "trigger": "imagesx()", "contents": "imagesx(${1:image})$0" },
        { "trigger": "imagesy()", "contents": "imagesy(${1:image})$0" },
        { "trigger": "imagetruecolortopalette()", "contents": "imagetruecolortopalette(${1:image}, ${2:dither}, ${3:ncolors})$0" },
        { "trigger": "imagettfbbox()", "contents": "imagettfbbox(${1:size}, ${2:angle}, ${3:fontfile}, ${4:text})$0" },
        { "trigger": "imagettftext()", "contents": "imagettftext(${1:image}, ${2:size}, ${3:angle}, ${4:x}, ${5:y}, ${6:color}, ${7:fontfile}, ${8:text})$0" },
        { "trigger": "imagetypes()", "contents": "imagetypes()" },
        { "trigger": "imagewbmp()", "contents": "imagewbmp(${1:image}${2:[, filename]}${3:[, foreground]})$0" },
        { "trigger": "imagexbm()", "contents": "imagexbm(${1:image}, ${2:filename}${3:[, foreground]})$0" },
        "Imagick",
        { "trigger": "Imagick()\tctor", "contents": "Imagick(${1:files})$0" },
        "ImagickDraw",
        "ImagickPixel",
        { "trigger": "ImagickPixel()\tctor", "contents": "ImagickPixel(${1:[color]})$0" },
        "ImagickPixelIterator",
        { "trigger": "ImagickPixelIterator()\tctor", "contents": "ImagickPixelIterator(${1:wand})$0" },
        /* IMAP protocol
        { "trigger": "imap_8bit()", "contents": "imap_8bit(${1:string})$0" },
        { "trigger": "imap_alerts()", "contents": "imap_alerts()" },
        { "trigger": "imap_append()", "contents": "imap_append(${1:imap_stream}, ${2:mailbox}, ${3:message})$0" },
        { "trigger": "imap_base64()", "contents": "imap_base64(${1:text})$0" },
        { "trigger": "imap_binary()", "contents": "imap_binary(${1:string})$0" },
        { "trigger": "imap_body()", "contents": "imap_body(${1:imap_stream}, ${2:msg_number}${3:[, options]})$0" },
        { "trigger": "imap_bodystruct()", "contents": "imap_bodystruct(${1:imap_stream}, ${2:msg_number}, ${3:section})$0" },
        { "trigger": "imap_check()", "contents": "imap_check(${1:imap_stream})$0" },
        { "trigger": "imap_clearflag_full()", "contents": "imap_clearflag_full(${1:imap_stream}, ${2:sequence}, ${3:flag})$0" },
        { "trigger": "imap_close()", "contents": "imap_close(${1:imap_stream})$0" },
        { "trigger": "imap_createmailbox()", "contents": "imap_createmailbox(${1:imap_stream}, ${2:mailbox})$0" },
        { "trigger": "imap_delete()", "contents": "imap_delete(${1:imap_stream}, ${2:msg_number})$0" },
        { "trigger": "imap_deletemailbox()", "contents": "imap_deletemailbox(${1:imap_stream}, ${2:mailbox})$0" },
        { "trigger": "imap_errors()", "contents": "imap_errors()" },
        { "trigger": "imap_expunge()", "contents": "imap_expunge(${1:imap_stream})$0" },
        { "trigger": "imap_fetch_overview()", "contents": "imap_fetch_overview(${1:imap_stream}, ${2:sequence})$0" },
        { "trigger": "imap_fetchbody()", "contents": "imap_fetchbody(${1:imap_stream}, ${2:msg_number}, ${3:section})$0" },
        { "trigger": "imap_fetchheader()", "contents": "imap_fetchheader(${1:imap_stream}, ${2:msg_number})$0" },
        { "trigger": "imap_fetchmime()", "contents": "imap_fetchmime(${1:imap_stream}, ${2:msg_number}, ${3:section}${4:[, options]})$0" },
        { "trigger": "imap_fetchstructure()", "contents": "imap_fetchstructure(${1:imap_stream}, ${2:msg_number})$0" },
        { "trigger": "imap_fetchtext()", "contents": "imap_fetchtext(${1:imap_stream}, ${2:msg_number}${3:[, options]})$0" },
        { "trigger": "imap_gc()", "contents": "imap_gc(${1:imap_stream}, ${2:caches})$0" },
        { "trigger": "imap_get_quota()", "contents": "imap_get_quota(${1:imap_stream}, ${2:quota_root})$0" },
        { "trigger": "imap_get_quotaroot()", "contents": "imap_get_quotaroot(${1:imap_stream}, ${2:quota_root})$0" },
        { "trigger": "imap_getacl()", "contents": "imap_getacl(${1:imap_stream}, ${2:mailbox})$0" },
        { "trigger": "imap_getmailboxes()", "contents": "imap_getmailboxes(${1:imap_stream}, ${2:ref}, ${3:pattern})$0" },
        { "trigger": "imap_getsubscribed()", "contents": "imap_getsubscribed(${1:imap_stream}, ${2:ref}, ${3:pattern})$0" },
        { "trigger": "imap_header()", "contents": "imap_header(${1:imap_stream}, ${2:msg_number})$0" },
        { "trigger": "imap_headerinfo()", "contents": "imap_headerinfo(${1:imap_stream}, ${2:msg_number})$0" },
        { "trigger": "imap_headers()", "contents": "imap_headers(${1:imap_stream})$0" },
        { "trigger": "imap_last_error()", "contents": "imap_last_error()" },
        { "trigger": "imap_list()", "contents": "imap_list(${1:imap_stream}, ${2:ref}, ${3:pattern})$0" },
        { "trigger": "imap_listmailbox()", "contents": "imap_listmailbox(${1:imap_stream}, ${2:ref}, ${3:pattern})$0" },
        { "trigger": "imap_listscan()", "contents": "imap_listscan(${1:imap_stream}, ${2:ref}, ${3:pattern}, ${4:content})$0" },
        { "trigger": "imap_listsubscribed()", "contents": "imap_listsubscribed(${1:imap_stream}, ${2:ref}, ${3:pattern})$0" },
        { "trigger": "imap_lsub()", "contents": "imap_lsub(${1:imap_stream}, ${2:ref}, ${3:pattern})$0" },
        { "trigger": "imap_mail()", "contents": "imap_mail(${1:to}, ${2:subject}, ${3:message})$0" },
        { "trigger": "imap_mail_compose()", "contents": "imap_mail_compose(${1:envelope}, ${2:body})$0" },
        { "trigger": "imap_mail_copy()", "contents": "imap_mail_copy(${1:imap_stream}, ${2:msglist}, ${3:mailbox})$0" },
        { "trigger": "imap_mail_move()", "contents": "imap_mail_move(${1:imap_stream}, ${2:msglist}, ${3:mailbox})$0" },
        { "trigger": "imap_mailboxmsginfo()", "contents": "imap_mailboxmsginfo(${1:imap_stream})$0" },
        { "trigger": "imap_mime_header_decode()", "contents": "imap_mime_header_decode(${1:text})$0" },
        { "trigger": "imap_msgno()", "contents": "imap_msgno(${1:imap_stream}, ${2:uid})$0" },
        { "trigger": "imap_num_msg()", "contents": "imap_num_msg(${1:imap_stream})$0" },
        { "trigger": "imap_num_recent()", "contents": "imap_num_recent(${1:imap_stream})$0" },
        { "trigger": "imap_open()", "contents": "imap_open(${1:mailbox}, ${2:username}, ${3:password})$0" },
        { "trigger": "imap_ping()", "contents": "imap_ping(${1:imap_stream})$0" },
        { "trigger": "imap_qprint()", "contents": "imap_qprint(${1:string})$0" },
        { "trigger": "imap_rename()", "contents": "imap_rename(${1:imap_stream}, ${2:old_mbox}, ${3:new_mbox})$0" },
        { "trigger": "imap_renamemailbox()", "contents": "imap_renamemailbox(${1:imap_stream}, ${2:old_mbox}, ${3:new_mbox})$0" },
        { "trigger": "imap_reopen()", "contents": "imap_reopen(${1:imap_stream}, ${2:mailbox})$0" },
        { "trigger": "imap_rfc822_parse_adrlist()", "contents": "imap_rfc822_parse_adrlist(${1:address}, ${2:default_host})$0" },
        { "trigger": "imap_rfc822_parse_headers()", "contents": "imap_rfc822_parse_headers(${1:headers})$0" },
        { "trigger": "imap_rfc822_write_address()", "contents": "imap_rfc822_write_address(${1:mailbox}, ${2:host}, ${3:personal})$0" },
        { "trigger": "imap_savebody()", "contents": "imap_savebody(${1:imap_stream}, ${2:file}, ${3:msg_number})$0" },
        { "trigger": "imap_scan()", "contents": "imap_scan(${1:imap_stream}, ${2:ref}, ${3:pattern}, ${4:content})$0" },
        { "trigger": "imap_scanmailbox()", "contents": "imap_scanmailbox(${1:imap_stream}, ${2:ref}, ${3:pattern}, ${4:content})$0" },
        { "trigger": "imap_search()", "contents": "imap_search(${1:imap_stream}, ${2:criteria})$0" },
        { "trigger": "imap_set_quota()", "contents": "imap_set_quota(${1:imap_stream}, ${2:quota_root}, ${3:quota_limit})$0" },
        { "trigger": "imap_setacl()", "contents": "imap_setacl(${1:imap_stream}, ${2:mailbox}, ${3:id}, ${4:rights})$0" },
        { "trigger": "imap_setflag_full()", "contents": "imap_setflag_full(${1:imap_stream}, ${2:sequence}, ${3:flag})$0" },
        { "trigger": "imap_sort()", "contents": "imap_sort(${1:imap_stream}, ${2:criteria}, ${3:reverse})$0" },
        { "trigger": "imap_status()", "contents": "imap_status(${1:imap_stream}, ${2:mailbox}, ${3:options})$0" },
        { "trigger": "imap_subscribe()", "contents": "imap_subscribe(${1:imap_stream}, ${2:mailbox})$0" },
        { "trigger": "imap_thread()", "contents": "imap_thread(${1:imap_stream})$0" },
        { "trigger": "imap_timeout()", "contents": "imap_timeout(${1:timeout_type})$0" },
        { "trigger": "imap_uid()", "contents": "imap_uid(${1:imap_stream}, ${2:msg_number})$0" },
        { "trigger": "imap_undelete()", "contents": "imap_undelete(${1:imap_stream}, ${2:msg_number})$0" },
        { "trigger": "imap_unsubscribe()", "contents": "imap_unsubscribe(${1:imap_stream}, ${2:mailbox})$0" },
        { "trigger": "imap_utf7_decode()", "contents": "imap_utf7_decode(${1:text})$0" },
        { "trigger": "imap_utf7_encode()", "contents": "imap_utf7_encode(${1:data})$0" },
        { "trigger": "imap_utf8()", "contents": "imap_utf8(${1:mime_encoded_text})$0" },
        */
        { "trigger": "implementsInterface()", "contents": "implementsInterface(${1:interface})$0" },
        { "trigger": "implode()", "contents": "implode(${1:[glue, ]}${2:pieces})$0" },
        { "trigger": "import_request_variables()", "contents": "import_request_variables(${1:types}${2:[, prefix]})$0" },
        { "trigger": "in_array()", "contents": "in_array(${1:needle}, ${2:haystack}${3:[, strict]})$0" },
        // { "trigger": "include()", "contents": "include($1)$0" },
        // { "trigger": "include_once()", "contents": "include_once($1)$0" },
        { "trigger": "inclued_get_data()", "contents": "inclued_get_data()" },
        { "trigger": "inet_ntop()", "contents": "inet_ntop(${1:in_addr})$0" },
        { "trigger": "inet_pton()", "contents": "inet_pton(${1:address})$0" },
        "InfiniteIterator",
        { "trigger": "InfiniteIterator()\tctor", "contents": "InfiniteIterator(${1:iterator})$0" },
        /* Ingres driver - moved to PECL as of PHP 5.1.0
        { "trigger": "ingres_autocommit()", "contents": "ingres_autocommit(${1:link})$0" },
        { "trigger": "ingres_autocommit_state()", "contents": "ingres_autocommit_state(${1:link})$0" },
        { "trigger": "ingres_charset()", "contents": "ingres_charset(${1:link})$0" },
        { "trigger": "ingres_close()", "contents": "ingres_close(${1:link})$0" },
        { "trigger": "ingres_commit()", "contents": "ingres_commit(${1:link})$0" },
        { "trigger": "ingres_connect()", "contents": "ingres_connect(${1:[database]}${2:[, username]}${3:[, password]}${4:[, options]})$0" },
        { "trigger": "ingres_cursor()", "contents": "ingres_cursor(${1:result})$0" },
        { "trigger": "ingres_errno()", "contents": "ingres_errno(${1:[link]})$0" },
        { "trigger": "ingres_error()", "contents": "ingres_error(${1:[link]})$0" },
        { "trigger": "ingres_errsqlstate()", "contents": "ingres_errsqlstate(${1:[link]})$0" },
        { "trigger": "ingres_escape_string()", "contents": "ingres_escape_string(${1:link}, ${2:source_string})$0" },
        { "trigger": "ingres_execute()", "contents": "ingres_execute(${1:result})$0" },
        { "trigger": "ingres_fetch_array()", "contents": "ingres_fetch_array(${1:result})$0" },
        { "trigger": "ingres_fetch_assoc()", "contents": "ingres_fetch_assoc(${1:result})$0" },
        { "trigger": "ingres_fetch_object()", "contents": "ingres_fetch_object(${1:result})$0" },
        { "trigger": "ingres_fetch_proc_return()", "contents": "ingres_fetch_proc_return(${1:result})$0" },
        { "trigger": "ingres_fetch_row()", "contents": "ingres_fetch_row(${1:result})$0" },
        { "trigger": "ingres_field_length()", "contents": "ingres_field_length(${1:result}, ${2:index})$0" },
        { "trigger": "ingres_field_name()", "contents": "ingres_field_name(${1:result}, ${2:index})$0" },
        { "trigger": "ingres_field_nullable()", "contents": "ingres_field_nullable(${1:result}, ${2:index})$0" },
        { "trigger": "ingres_field_precision()", "contents": "ingres_field_precision(${1:result}, ${2:index})$0" },
        { "trigger": "ingres_field_scale()", "contents": "ingres_field_scale(${1:result}, ${2:index})$0" },
        { "trigger": "ingres_field_type()", "contents": "ingres_field_type(${1:result}, ${2:index})$0" },
        { "trigger": "ingres_free_result()", "contents": "ingres_free_result(${1:result})$0" },
        { "trigger": "ingres_next_error()", "contents": "ingres_next_error(${1:[link]})$0" },
        { "trigger": "ingres_num_fields()", "contents": "ingres_num_fields(${1:result})$0" },
        { "trigger": "ingres_num_rows()", "contents": "ingres_num_rows(${1:result})$0" },
        { "trigger": "ingres_pconnect()", "contents": "ingres_pconnect($1)$0" },
        { "trigger": "ingres_pconnect(full)", "contents": "ingres_pconnect(${1:[database]}${2:[, username]}${3:[, password]}${4:[, options]})$0" },
        { "trigger": "ingres_prepare()", "contents": "ingres_prepare(${1:link}, ${2:query})$0" },
        { "trigger": "ingres_query()", "contents": "ingres_query(${1:link}, ${2:query})$0" },
        { "trigger": "ingres_result_seek()", "contents": "ingres_result_seek(${1:result}, ${2:position})$0" },
        { "trigger": "ingres_rollback()", "contents": "ingres_rollback(${1:link})$0" },
        { "trigger": "ingres_set_environment()", "contents": "ingres_set_environment(${1:link}, ${2:options})$0" },
        { "trigger": "ingres_unbuffered_query()", "contents": "ingres_unbuffered_query(${1:link}, ${2:query})$0" },
        */
        { "trigger": "ini_alter()", "contents": "ini_alter(${1:varname}, ${2:newvalue})$0" },
        { "trigger": "ini_get()", "contents": "ini_get(${1:varname})$0" },
        { "trigger": "ini_get_all()", "contents": "ini_get_all(${1:[extension]}${2:[, details]})$0" },
        { "trigger": "ini_restore()", "contents": "ini_restore(${1:varname})$0" },
        { "trigger": "ini_set()", "contents": "ini_set(${1:varname}, ${2:newvalue})$0" },
        { "trigger": "inNamespace()", "contents": "inNamespace()" },
        { "trigger": "inotify_add_watch()", "contents": "inotify_add_watch(${1:inotify_instance}, ${2:pathname}, ${3:mask})$0" },
        { "trigger": "inotify_init()", "contents": "inotify_init()" },
        { "trigger": "inotify_queue_len()", "contents": "inotify_queue_len(${1:inotify_instance})$0" },
        { "trigger": "inotify_read()", "contents": "inotify_read(${1:inotify_instance})$0" },
        { "trigger": "inotify_rm_watch()", "contents": "inotify_rm_watch(${1:inotify_instance}, ${2:watch_descriptor})$0" },
        { "trigger": "interface_exists()", "contents": "interface_exists(${1:interface_name})$0" },
        { "trigger": "intl_error_name()", "contents": "intl_error_name(${1:error_code})$0" },
        { "trigger": "intl_get_error_code()", "contents": "intl_get_error_code()" },
        { "trigger": "intl_get_error_message()", "contents": "intl_get_error_message()" },
        { "trigger": "intl_is_failure()", "contents": "intl_is_failure(${1:error_code})$0" },
        "IntlDateFormatter",
        { "trigger": "IntlDateFormatter()\tctor", "contents": "IntlDateFormatter(${1:locale}, ${2:datetype}, ${3:timetype}${4:[, timezone]}${5:[, calendar]}${6:[, pattern]})$0" },
        { "trigger": "intval()", "contents": "intval(${1:var}${2:[, base]})$0" },
        "InvalidArgumentException",
        { "trigger": "invoke()", "contents": "invoke(${1:args})$0" },
        { "trigger": "invokeargs()", "contents": "invokeargs(${1:args})$0" },
        { "trigger": "ip2long()", "contents": "ip2long(${1:ip_address})$0" },
        { "trigger": "iptcembed()", "contents": "iptcembed(${1:iptcdata}, ${2:jpeg_file_name})$0" },
        { "trigger": "iptcparse()", "contents": "iptcparse(${1:iptcblock})$0" },
        { "trigger": "is_a()", "contents": "is_a(${1:object}, ${2:class_name})$0" },
        { "trigger": "is_array()", "contents": "is_array(${1:var})$0" },
        { "trigger": "is_bool()", "contents": "is_bool(${1:var})$0" },
        { "trigger": "is_callable()", "contents": "is_callable(${1:name})$0" },
        { "trigger": "is_dir()", "contents": "is_dir(${1:filename})$0" },
        { "trigger": "is_double()", "contents": "is_double(${1:var})$0" },
        { "trigger": "is_executable()", "contents": "is_executable(${1:filename})$0" },
        { "trigger": "is_file()", "contents": "is_file(${1:filename})$0" },
        { "trigger": "is_finite()", "contents": "is_finite(${1:val})$0" },
        { "trigger": "is_float()", "contents": "is_float(${1:var})$0" },
        { "trigger": "is_infinite()", "contents": "is_infinite(${1:val})$0" },
        { "trigger": "is_int()", "contents": "is_int(${1:var})$0" },
        { "trigger": "is_integer()", "contents": "is_integer(${1:var})$0" },
        { "trigger": "is_link()", "contents": "is_link(${1:filename})$0" },
        { "trigger": "is_long()", "contents": "is_long(${1:var})$0" },
        { "trigger": "is_nan()", "contents": "is_nan(${1:val})$0" },
        { "trigger": "is_null()", "contents": "is_null(${1:var})$0" },
        { "trigger": "is_numeric()", "contents": "is_numeric(${1:var})$0" },
        { "trigger": "is_object()", "contents": "is_object(${1:var})$0" },
        { "trigger": "is_readable()", "contents": "is_readable(${1:filename})$0" },
        { "trigger": "is_real()", "contents": "is_real(${1:var})$0" },
        { "trigger": "is_resource()", "contents": "is_resource(${1:var})$0" },
        { "trigger": "is_scalar()", "contents": "is_scalar(${1:var})$0" },
        { "trigger": "is_soap_fault()", "contents": "is_soap_fault(${1:object})$0" },
        { "trigger": "is_string()", "contents": "is_string(${1:var})$0" },
        { "trigger": "is_subclass_of()", "contents": "is_subclass_of(${1:object}, ${2:class_name})$0" },
        { "trigger": "is_tainted()", "contents": "is_tainted(${1:string})$0" },
        { "trigger": "is_uploaded_file()", "contents": "is_uploaded_file(${1:filename})$0" },
        { "trigger": "is_writable()", "contents": "is_writable(${1:filename})$0" },
        { "trigger": "is_writeable()", "contents": "is_writeable(${1:filename})$0" },
        { "trigger": "isAbstract()", "contents": "isAbstract()" },
        { "trigger": "isCloneable()", "contents": "isCloneable()" },
        { "trigger": "isDisabled()", "contents": "isDisabled()" },
        { "trigger": "isFinal()", "contents": "isFinal()" },
        { "trigger": "isInstance()", "contents": "isInstance(${1:object})$0" },
        { "trigger": "isInstantiable()", "contents": "isInstantiable(${1:object})$0" },
        { "trigger": "isInterface()", "contents": "isInterface()" },
        { "trigger": "isInternal()", "contents": "isInternal()" },
        { "trigger": "isIterateable()", "contents": "isIterateable()" },
        { "trigger": "isset()", "contents": "isset(${1:vars})$0" },
        { "trigger": "isSubclassOf()", "contents": "isSubclassOf(${1:class})$0" },
        { "trigger": "isTrait()", "contents": "isTrait()" },
        { "trigger": "isUserDefined()", "contents": "isUserDefined()" },
        "Iterator",
        { "trigger": "iterator_apply()", "contents": "iterator_apply(${1:iterator}, ${2:function}${3:[, args]})$0" },
        { "trigger": "iterator_count()", "contents": "iterator_count(${1:iterator})$0" },
        { "trigger": "iterator_to_array()", "contents": "iterator_to_array(${1:iterator}${2:[, use_keys]})$0" },
        "IteratorAggregate",
        "IteratorIterator",
        { "trigger": "IteratorIterator()\tctor", "contents": "IteratorIterator(${1:iterator})$0" },
        { "trigger": "java_last_exception_clear()", "contents": "java_last_exception_clear()" },
        { "trigger": "java_last_exception_get()", "contents": "java_last_exception_get()" },
        { "trigger": "JDDayOfWeek()", "contents": "JDDayOfWeek(${1:julianday})$0" },
        { "trigger": "JDMonthName()", "contents": "JDMonthName(${1:julianday}, ${2:mode})$0" },
        { "trigger": "JDToFrench()", "contents": "JDToFrench(${1:juliandaycount})$0" },
        { "trigger": "JDToGregorian()", "contents": "JDToGregorian(${1:julianday})$0" },
        { "trigger": "jdtojewish()", "contents": "jdtojewish(${1:juliandaycount})$0" },
        { "trigger": "JDToJulian()", "contents": "JDToJulian(${1:julianday})$0" },
        { "trigger": "jdtounix()", "contents": "jdtounix(${1:jday})$0" },
        { "trigger": "JewishToJD()", "contents": "JewishToJD(${1:month}, ${2:day}, ${3:year})$0" },
        { "trigger": "join()", "contents": "join(${1:[glue, ]}${2:pieces})$0" },
        { "trigger": "jpeg2wbmp()", "contents": "jpeg2wbmp(${1:jpegname}, ${2:wbmpname}, ${3:dest_height}, ${4:dest_width}, ${5:threshold})$0" },
        { "trigger": "json_decode()", "contents": "json_decode(${1:json})$0" },
        { "trigger": "json_decode(full)", "contents": "json_decode(${1:json}${2:[, assoc]}${3:[, depth]}${4:[, options]})$0" },
        { "trigger": "json_encode()", "contents": "json_encode(${1:value}${2:[, options]})$0" },
        { "trigger": "json_last_error()", "contents": "json_last_error()" },
        "JsonSerializable",
        { "trigger": "Judy()", "contents": "Judy(${1:judy_type})$0" },
        { "trigger": "judy_type()", "contents": "judy_type(${1:array})$0" },
        { "trigger": "judy_version()", "contents": "judy_version()$0" },
        { "trigger": "JulianToJD()", "contents": "JulianToJD(${1:month}, ${2:day}, ${3:year})$0" },
        /* Kerberos V servers
        { "trigger": "kadm5_chpass_principal()", "contents": "kadm5_chpass_principal(${1:handle}, ${2:principal}, ${3:password})$0" },
        { "trigger": "kadm5_create_principal()", "contents": "kadm5_create_principal(${1:handle}, ${2:principal})$0" },
        { "trigger": "kadm5_delete_principal()", "contents": "kadm5_delete_principal(${1:handle}, ${2:principal})$0" },
        { "trigger": "kadm5_destroy()", "contents": "kadm5_destroy(${1:handle})$0" },
        { "trigger": "kadm5_flush()", "contents": "kadm5_flush(${1:handle})$0" },
        { "trigger": "kadm5_get_policies()", "contents": "kadm5_get_policies(${1:handle})$0" },
        { "trigger": "kadm5_get_principal()", "contents": "kadm5_get_principal(${1:handle}, ${2:principal})$0" },
        { "trigger": "kadm5_get_principals()", "contents": "kadm5_get_principals(${1:handle})$0" },
        { "trigger": "kadm5_init_with_password()", "contents": "kadm5_init_with_password(${1:admin_server}, ${2:realm}, ${3:principal}, ${4:password})$0" },
        { "trigger": "kadm5_modify_principal()", "contents": "kadm5_modify_principal(${1:handle}, ${2:principal}, ${3:options})$0" },
        */
        { "trigger": "key()", "contents": "key(${1:array}${2:[, sort_flags]})$0" },
        { "trigger": "krsort()", "contents": "krsort(${1:array})$0" },
        { "trigger": "ksort()", "contents": "ksort(${1:array}${2:[, sort_flags]})$0" },
        "KTaglib_ID3v2_AttachedPictureFrame", "KTaglib_MPEG_AudioProperties",
        "KTaglib_ID3v2_Frame", "KTaglib_ID3v2_Tag", "KTaglib_MPEG_File", "KTaglib_Tag",
        "Lapack",
        "LapackException",
        { "trigger": "lcfirst()", "contents": "lcfirst(${1:str})$0" },
        { "trigger": "lcg_value()", "contents": "lcg_value()" },
        { "trigger": "lchgrp()", "contents": "lchgrp(${1:filename}, ${2:group})$0" },
        { "trigger": "lchown()", "contents": "lchown(${1:filename}, ${2:user})$0" },
        /* Lightweight Directory Access Protocol
        { "trigger": "ldap_8859_to_t61()", "contents": "ldap_8859_to_t61(${1:value})$0" },
        { "trigger": "ldap_add()", "contents": "ldap_add(${1:link_identifier}, ${2:dn}, ${3:entry})$0" },
        { "trigger": "ldap_bind()", "contents": "ldap_bind(${1:link_identifier})$0" },
        { "trigger": "ldap_close()", "contents": "ldap_close(${1:link_identifier})$0" },
        { "trigger": "ldap_compare()", "contents": "ldap_compare(${1:link_identifier}, ${2:dn}, ${3:attribute}, ${4:value})$0" },
        { "trigger": "ldap_connect()", "contents": "ldap_connect(${1:[hostname]}${2:[, port]})$0" },
        { "trigger": "ldap_control_paged_result()", "contents": "ldap_control_paged_result(${1:link}, ${2:pagesize}${3:[, iscritical]}${4:[, cookie]})$0" },
        { "trigger": "ldap_control_paged_result_response()", "contents": "ldap_control_paged_result_response(${1:link}, ${2:result}${3:[, cookie]}${4:[, estimated]})$0" },
        { "trigger": "ldap_count_entries()", "contents": "ldap_count_entries(${1:link_identifier}, ${2:result_identifier})$0" },
        { "trigger": "ldap_delete()", "contents": "ldap_delete(${1:link_identifier}, ${2:dn})$0" },
        { "trigger": "ldap_dn2ufn()", "contents": "ldap_dn2ufn(${1:dn})$0" },
        { "trigger": "ldap_err2str()", "contents": "ldap_err2str(${1:errno})$0" },
        { "trigger": "ldap_errno()", "contents": "ldap_errno(${1:link_identifier})$0" },
        { "trigger": "ldap_error()", "contents": "ldap_error(${1:link_identifier})$0" },
        { "trigger": "ldap_explode_dn()", "contents": "ldap_explode_dn(${1:dn}, ${2:with_attrib})$0" },
        { "trigger": "ldap_first_attribute()", "contents": "ldap_first_attribute(${1:link_identifier}, ${2:result_entry_identifier})$0" },
        { "trigger": "ldap_first_entry()", "contents": "ldap_first_entry(${1:link_identifier}, ${2:result_identifier})$0" },
        { "trigger": "ldap_first_reference()", "contents": "ldap_first_reference(${1:link}, ${2:result})$0" },
        { "trigger": "ldap_free_result()", "contents": "ldap_free_result(${1:result_identifier})$0" },
        { "trigger": "ldap_get_attributes()", "contents": "ldap_get_attributes(${1:link_identifier}, ${2:result_entry_identifier})$0" },
        { "trigger": "ldap_get_dn()", "contents": "ldap_get_dn(${1:link_identifier}, ${2:result_entry_identifier})$0" },
        { "trigger": "ldap_get_entries()", "contents": "ldap_get_entries(${1:link_identifier}, ${2:result_identifier})$0" },
        { "trigger": "ldap_get_option()", "contents": "ldap_get_option(${1:link_identifier}, ${2:option}, ${3:retval})$0" },
        { "trigger": "ldap_get_values()", "contents": "ldap_get_values(${1:link_identifier}, ${2:result_entry_identifier}, ${3:attribute})$0" },
        { "trigger": "ldap_get_values_len()", "contents": "ldap_get_values_len(${1:link_identifier}, ${2:result_entry_identifier}, ${3:attribute})$0" },
        { "trigger": "ldap_list()", "contents": "ldap_list(${1:link_identifier}, ${2:base_dn}, ${3:filter})$0" },
        { "trigger": "ldap_mod_add()", "contents": "ldap_mod_add(${1:link_identifier}, ${2:dn}, ${3:entry})$0" },
        { "trigger": "ldap_mod_del()", "contents": "ldap_mod_del(${1:link_identifier}, ${2:dn}, ${3:entry})$0" },
        { "trigger": "ldap_mod_replace()", "contents": "ldap_mod_replace(${1:link_identifier}, ${2:dn}, ${3:entry})$0" },
        { "trigger": "ldap_modify()", "contents": "ldap_modify(${1:link_identifier}, ${2:dn}, ${3:entry})$0" },
        { "trigger": "ldap_next_attribute()", "contents": "ldap_next_attribute(${1:link_identifier}, ${2:result_entry_identifier})$0" },
        { "trigger": "ldap_next_entry()", "contents": "ldap_next_entry(${1:link_identifier}, ${2:result_entry_identifier})$0" },
        { "trigger": "ldap_next_reference()", "contents": "ldap_next_reference(${1:link}, ${2:entry})$0" },
        { "trigger": "ldap_parse_reference()", "contents": "ldap_parse_reference(${1:link}, ${2:entry}, ${3:referrals})$0" },
        { "trigger": "ldap_parse_result()", "contents": "ldap_parse_result(${1:link}, ${2:result}, ${3:errcode})$0" },
        { "trigger": "ldap_read()", "contents": "ldap_read(${1:link_identifier}, ${2:base_dn}, ${3:filter})$0" },
        { "trigger": "ldap_rename()", "contents": "ldap_rename(${1:link_identifier}, ${2:dn}, ${3:newrdn}, ${4:newparent}, ${5:deleteoldrdn})$0" },
        { "trigger": "ldap_sasl_bind()", "contents": "ldap_sasl_bind(${1:link})$0" },
        { "trigger": "ldap_search()", "contents": "ldap_search(${1:link_identifier}, ${2:base_dn}, ${3:filter})$0" },
        { "trigger": "ldap_set_option()", "contents": "ldap_set_option(${1:link_identifier}, ${2:option}, ${3:newval})$0" },
        { "trigger": "ldap_set_rebind_proc()", "contents": "ldap_set_rebind_proc(${1:link}, ${2:callback})$0" },
        { "trigger": "ldap_sort()", "contents": "ldap_sort(${1:link}, ${2:result}, ${3:sortfilter})$0" },
        { "trigger": "ldap_start_tls()", "contents": "ldap_start_tls(${1:link})$0" },
        { "trigger": "ldap_t61_to_8859()", "contents": "ldap_t61_to_8859(${1:value})$0" },
        { "trigger": "ldap_unbind()", "contents": "ldap_unbind(${1:link_identifier})$0" },
        */
        "LengthException",
        { "trigger": "levenshtein()", "contents": "levenshtein(${1:str1}, ${2:str2}${3:[, costs]})$0" },
        { "trigger": "libxml_clear_errors()", "contents": "libxml_clear_errors()" },
        { "trigger": "libxml_disable_entity_loader()", "contents": "libxml_disable_entity_loader(${1:[disable]})$0" },
        { "trigger": "libxml_get_errors()", "contents": "libxml_get_errors()" },
        { "trigger": "libxml_get_last_error()", "contents": "libxml_get_last_error()" },
        { "trigger": "libxml_set_external_entity_loader()", "contents": "libxml_set_external_entity_loader(${1:resolver_function})$0" },
        { "trigger": "libxml_set_streams_context()", "contents": "libxml_set_streams_context(${1:streams_context})$0" },
        { "trigger": "libxml_use_internal_errors()", "contents": "libxml_use_internal_errors(${1:[use_errors]})$0" },
        "libXMLError",
        "LimitIterator",
        { "trigger": "LimitIterator()\tctor", "contents": "LimitIterator(${1:iterator}${2:[, offset]}${3:[, count]})$0" },
        { "trigger": "link()", "contents": "link(${1:target}, ${2:link})$0" },
        { "trigger": "linkinfo()", "contents": "linkinfo(${1:path})$0" },
        { "trigger": "list()", "contents": "list(${1:varname})$0" },
        "Locale",
        { "trigger": "localeconv()", "contents": "localeconv()" },
        { "trigger": "localtime()", "contents": "localtime(${1:[timestamp]}${2:[, is_associative]})$0" },
        { "trigger": "log()", "contents": "log(${1:arg})$0" },
        { "trigger": "log10()", "contents": "log10(${1:arg})$0" },
        { "trigger": "log1p()", "contents": "log1p(${1:number})$0" },
        "LogicException",
        { "trigger": "long2ip()", "contents": "long2ip(${1:proper_address})$0" },
        { "trigger": "lstat()", "contents": "lstat(${1:filename})$0" },
        { "trigger": "ltrim()", "contents": "ltrim(${1:str}${2:[, charlist]})$0" },
        "Lua",
        { "trigger": "Lua()\tctor", "contents": "Lua(${1:lua_script_file})$0" },
        "LuaClosure",
        { "trigger": "lzf_compress()", "contents": "lzf_compress(${1:data})$0" },
        { "trigger": "lzf_decompress()", "contents": "lzf_decompress(${1:data})$0" },
        { "trigger": "lzf_optimized_for()", "contents": "lzf_optimized_for()$0" },
        /* Monetra - not available on Windows platforms - moved to PECL as of PHP 5.1.0
        { "trigger": "m_checkstatus()", "contents": "m_checkstatus(${1:conn}, ${2:identifier})$0" },
        { "trigger": "m_completeauthorizations()", "contents": "m_completeauthorizations(${1:conn}, ${2:array})$0" },
        { "trigger": "m_connect()", "contents": "m_connect(${1:conn})$0" },
        { "trigger": "m_connectionerror()", "contents": "m_connectionerror(${1:conn})$0" },
        { "trigger": "m_deletetrans()", "contents": "m_deletetrans(${1:conn}, ${2:identifier})$0" },
        { "trigger": "m_destroyconn()", "contents": "m_destroyconn(${1:conn})$0" },
        { "trigger": "m_destroyengine()", "contents": "m_destroyengine()" },
        { "trigger": "m_getcell()", "contents": "m_getcell(${1:conn}, ${2:identifier}, ${3:column}, ${4:row})$0" },
        { "trigger": "m_getcellbynum()", "contents": "m_getcellbynum(${1:conn}, ${2:identifier}, ${3:column}, ${4:row})$0" },
        { "trigger": "m_getcommadelimited()", "contents": "m_getcommadelimited(${1:conn}, ${2:identifier})$0" },
        { "trigger": "m_getheader()", "contents": "m_getheader(${1:conn}, ${2:identifier}, ${3:column_num})$0" },
        { "trigger": "m_initconn()", "contents": "m_initconn()" },
        { "trigger": "m_initengine()", "contents": "m_initengine(${1:location})$0" },
        { "trigger": "m_iscommadelimited()", "contents": "m_iscommadelimited(${1:conn}, ${2:identifier})$0" },
        { "trigger": "m_maxconntimeout()", "contents": "m_maxconntimeout(${1:conn}, ${2:secs})$0" },
        { "trigger": "m_monitor()", "contents": "m_monitor(${1:conn})$0" },
        { "trigger": "m_numcolumns()", "contents": "m_numcolumns(${1:conn}, ${2:identifier})$0" },
        { "trigger": "m_numrows()", "contents": "m_numrows(${1:conn}, ${2:identifier})$0" },
        { "trigger": "m_parsecommadelimited()", "contents": "m_parsecommadelimited(${1:conn}, ${2:identifier})$0" },
        { "trigger": "m_responsekeys()", "contents": "m_responsekeys(${1:conn}, ${2:identifier})$0" },
        { "trigger": "m_responseparam()", "contents": "m_responseparam(${1:conn}, ${2:identifier}, ${3:key})$0" },
        { "trigger": "m_returnstatus()", "contents": "m_returnstatus(${1:conn}, ${2:identifier})$0" },
        { "trigger": "m_setblocking()", "contents": "m_setblocking(${1:conn}, ${2:tf})$0" },
        { "trigger": "m_setdropfile()", "contents": "m_setdropfile(${1:conn}, ${2:directory})$0" },
        { "trigger": "m_setip()", "contents": "m_setip(${1:conn}, ${2:host}, ${3:port})$0" },
        { "trigger": "m_setssl()", "contents": "m_setssl(${1:conn}, ${2:host}, ${3:port})$0" },
        { "trigger": "m_setssl_cafile()", "contents": "m_setssl_cafile(${1:conn}, ${2:cafile})$0" },
        { "trigger": "m_setssl_files()", "contents": "m_setssl_files(${1:conn}, ${2:sslkeyfile}, ${3:sslcertfile})$0" },
        { "trigger": "m_settimeout()", "contents": "m_settimeout(${1:conn}, ${2:seconds})$0" },
        { "trigger": "m_sslcert_gen_hash()", "contents": "m_sslcert_gen_hash(${1:filename})$0" },
        { "trigger": "m_transactionssent()", "contents": "m_transactionssent(${1:conn})$0" },
        { "trigger": "m_transinqueue()", "contents": "m_transinqueue(${1:conn})$0" },
        { "trigger": "m_transkeyval()", "contents": "m_transkeyval(${1:conn}, ${2:identifier}, ${3:key}, ${4:value})$0" },
        { "trigger": "m_transnew()", "contents": "m_transnew(${1:conn})$0" },
        { "trigger": "m_transsend()", "contents": "m_transsend(${1:conn}, ${2:identifier})$0" },
        { "trigger": "m_uwait()", "contents": "m_uwait(${1:microsecs})$0" },
        { "trigger": "m_validateidentifier()", "contents": "m_validateidentifier(${1:conn}, ${2:tf})$0" },
        { "trigger": "m_verifyconnection()", "contents": "m_verifyconnection(${1:conn}, ${2:tf})$0" },
        { "trigger": "m_verifysslcert()", "contents": "m_verifysslcert(${1:conn}, ${2:tf})$0" },
        */
        { "trigger": "magic_quotes_runtime()\tdeprecated 5.3.x", "contents": "magic_quotes_runtime(${1:new_setting})$0" },
        { "trigger": "mail()", "contents": "mail(${1:to}, ${2:subject}, ${3:message}${4:[, addl_headers]})$0" },
        /* Mailparse - moved to PECL as of PHP 5.1.0
        { "trigger": "mailparse_determine_best_xfer_encoding()", "contents": "mailparse_determine_best_xfer_encoding(${1:fp})$0" },
        { "trigger": "mailparse_msg_create()", "contents": "mailparse_msg_create()" },
        { "trigger": "mailparse_msg_extract_part()", "contents": "mailparse_msg_extract_part(${1:mimemail}, ${2:msgbody})$0" },
        { "trigger": "mailparse_msg_extract_part_file()", "contents": "mailparse_msg_extract_part_file(${1:mimemail}, ${2:filename})$0" },
        { "trigger": "mailparse_msg_extract_whole_part_file()", "contents": "mailparse_msg_extract_whole_part_file(${1:mimemail}, ${2:filename})$0" },
        { "trigger": "mailparse_msg_free()", "contents": "mailparse_msg_free(${1:mimemail})$0" },
        { "trigger": "mailparse_msg_get_part()", "contents": "mailparse_msg_get_part(${1:mimemail}, ${2:mimesection})$0" },
        { "trigger": "mailparse_msg_get_part_data()", "contents": "mailparse_msg_get_part_data(${1:mimemail})$0" },
        { "trigger": "mailparse_msg_get_structure()", "contents": "mailparse_msg_get_structure(${1:mimemail})$0" },
        { "trigger": "mailparse_msg_parse()", "contents": "mailparse_msg_parse(${1:mimemail}, ${2:data})$0" },
        { "trigger": "mailparse_msg_parse_file()", "contents": "mailparse_msg_parse_file(${1:filename})$0" },
        { "trigger": "mailparse_rfc822_parse_addresses()", "contents": "mailparse_rfc822_parse_addresses(${1:addresses})$0" },
        { "trigger": "mailparse_stream_encode()", "contents": "mailparse_stream_encode(${1:sourcefp}, ${2:destfp}, ${3:encoding})$0" },
        { "trigger": "mailparse_uudecode_all()", "contents": "mailparse_uudecode_all(${1:fp})$0" },
        */
        { "trigger": "main()\tdummy", "contents": "main()" },
        { "trigger": "max()", "contents": "max(${1:values})$0" },
        /* MaxDB
        { "trigger": "maxdb()\tctor", "contents": "maxdb(${1:[host]}${2:[, username]}${3:[, passwd]}${4:[, dbname]}${5:[, port]}${6:[, socket]})$0" },
        { "trigger": "maxdb_affected_rows()", "contents": "maxdb_affected_rows(${1:link})$0" },
        { "trigger": "maxdb_autocommit()", "contents": "maxdb_autocommit(${1:link}, ${2:mode})$0" },
        { "trigger": "maxdb_bind_param()\tdeprecated ", "contents": "maxdb_bind_param($1)$0" },
        { "trigger": "maxdb_bind_result()\tdeprecated ", "contents": "maxdb_bind_result($1)$0" },
        { "trigger": "maxdb_change_user()", "contents": "maxdb_change_user(${1:[link, ]}${2:user}, ${3:password}, ${4:database})$0" },
        { "trigger": "maxdb_character_set_name()", "contents": "maxdb_character_set_name(${1:link})$0" },
        { "trigger": "maxdb_client_encoding()", "contents": "maxdb_client_encoding(${1:link})$0" },
        { "trigger": "maxdb_close()", "contents": "maxdb_close(${1:link})$0" },
        { "trigger": "maxdb_close_long_data()", "contents": "maxdb_close_long_data(${1:stmt}, ${2:param_nr})$0" },
        { "trigger": "maxdb_commit()", "contents": "maxdb_commit(${1:link})$0" },
        { "trigger": "maxdb_connect()", "contents": "maxdb_connect($1)$0" },
        { "trigger": "maxdb_connect(full)", "contents": "maxdb_connect(${1:[host]}${2:[, username]}${3:[, passwd]}${4:[, dbname]}${5:[, port]}${6:[, socket]})$0" },
        { "trigger": "maxdb_connect_errno()", "contents": "maxdb_connect_errno()" },
        { "trigger": "maxdb_connect_error()", "contents": "maxdb_connect_error()" },
        { "trigger": "maxdb_data_seek()", "contents": "maxdb_data_seek(${1:result}, ${2:offset})$0" },
        { "trigger": "maxdb_debug()", "contents": "maxdb_debug(${1:debug})$0" },
        { "trigger": "maxdb_disable_reads_from_master()", "contents": "maxdb_disable_reads_from_master(${1:link})$0" },
        { "trigger": "maxdb_disable_rpl_parse()", "contents": "maxdb_disable_rpl_parse(${1:link})$0" },
        { "trigger": "maxdb_dump_debug_info()", "contents": "maxdb_dump_debug_info(${1:link})$0" },
        { "trigger": "maxdb_embedded_connect()", "contents": "maxdb_embedded_connect(${1:[dbname]})$0" },
        { "trigger": "maxdb_enable_reads_from_master()", "contents": "maxdb_enable_reads_from_master(${1:link})$0" },
        { "trigger": "maxdb_enable_rpl_parse()", "contents": "maxdb_enable_rpl_parse(${1:link})$0" },
        { "trigger": "maxdb_errno()", "contents": "maxdb_errno(${1:link})$0" },
        { "trigger": "maxdb_error()", "contents": "maxdb_error(${1:link})$0" },
        { "trigger": "maxdb_escape_string()", "contents": "maxdb_escape_string(${1:[link, ]}${2:escapestr})$0" },
        { "trigger": "maxdb_execute()\tdeprecated ", "contents": "maxdb_execute(${1:stmt})$0" },
        { "trigger": "maxdb_fetch()\tdeprecated ", "contents": "maxdb_fetch(${1:stmt})$0" },
        { "trigger": "maxdb_fetch_array()", "contents": "maxdb_fetch_array(${1:result}${2:[, resulttype]})$0" },
        { "trigger": "maxdb_fetch_assoc()", "contents": "maxdb_fetch_assoc(${1:result})$0" },
        { "trigger": "maxdb_fetch_field()", "contents": "maxdb_fetch_field(${1:result})$0" },
        { "trigger": "maxdb_fetch_field_direct()", "contents": "maxdb_fetch_field_direct(${1:result}, ${2:fieldnr})$0" },
        { "trigger": "maxdb_fetch_fields()", "contents": "maxdb_fetch_fields(${1:result})$0" },
        { "trigger": "maxdb_fetch_lengths()", "contents": "maxdb_fetch_lengths(${1:result})$0" },
        { "trigger": "maxdb_fetch_object()", "contents": "maxdb_fetch_object(${1:result})$0" },
        { "trigger": "maxdb_fetch_row()", "contents": "maxdb_fetch_row(${1:result})$0" },
        { "trigger": "maxdb_field_count()", "contents": "maxdb_field_count(${1:link})$0" },
        { "trigger": "maxdb_field_seek()", "contents": "maxdb_field_seek(${1:result}, ${2:fieldnr})$0" },
        { "trigger": "maxdb_field_tell()", "contents": "maxdb_field_tell(${1:result})$0" },
        { "trigger": "maxdb_free_result()", "contents": "maxdb_free_result(${1:result})$0" },
        { "trigger": "maxdb_get_client_info()", "contents": "maxdb_get_client_info()" },
        { "trigger": "maxdb_get_client_version()", "contents": "maxdb_get_client_version()" },
        { "trigger": "maxdb_get_host_info()", "contents": "maxdb_get_host_info(${1:link})$0" },
        { "trigger": "maxdb_get_metadata()", "contents": "maxdb_get_metadata(${1:stmt})$0" },
        { "trigger": "maxdb_get_proto_info()", "contents": "maxdb_get_proto_info(${1:link})$0" },
        { "trigger": "maxdb_get_server_info()", "contents": "maxdb_get_server_info(${1:link})$0" },
        { "trigger": "maxdb_get_server_version()", "contents": "maxdb_get_server_version(${1:link})$0" },
        { "trigger": "maxdb_info()", "contents": "maxdb_info(${1:link})$0" },
        { "trigger": "maxdb_init()", "contents": "maxdb_init()" },
        { "trigger": "maxdb_insert_id()", "contents": "maxdb_insert_id(${1:link})$0" },
        { "trigger": "maxdb_kill()", "contents": "maxdb_kill(${1:link}, ${2:processid})$0" },
        { "trigger": "maxdb_master_query()", "contents": "maxdb_master_query(${1:link}, ${2:query})$0" },
        { "trigger": "maxdb_more_results()", "contents": "maxdb_more_results(${1:link})$0" },
        { "trigger": "maxdb_multi_query()", "contents": "maxdb_multi_query(${1:link}, ${2:query})$0" },
        { "trigger": "maxdb_next_result()", "contents": "maxdb_next_result(${1:link})$0" },
        { "trigger": "maxdb_num_fields()", "contents": "maxdb_num_fields(${1:result})$0" },
        { "trigger": "maxdb_num_rows()", "contents": "maxdb_num_rows(${1:result})$0" },
        { "trigger": "maxdb_options()", "contents": "maxdb_options(${1:link}, ${2:option}, ${3:value})$0" },
        { "trigger": "maxdb_param_count()\tdeprecated ", "contents": "maxdb_param_count(${1:stmt})$0" },
        { "trigger": "maxdb_ping()", "contents": "maxdb_ping(${1:link})$0" },
        { "trigger": "maxdb_prepare()", "contents": "maxdb_prepare(${1:link}, ${2:query})$0" },
        { "trigger": "maxdb_query()", "contents": "maxdb_query(${1:link}, ${2:query}${3:[, resultmode]})$0" },
        { "trigger": "maxdb_real_connect()", "contents": "maxdb_real_connect(${1:link})$0" },
        { "trigger": "maxdb_real_connect(full)", "contents": "maxdb_real_connect(${1:link}${2:[, hostname]}${3:[, username]}${4:[, passwd]}${5:[, dbname]}${5:[, port]}${7:[, socket]})$0" },
        { "trigger": "maxdb_real_escape_string()", "contents": "maxdb_real_escape_string(${1:link}, ${2:escapestr})$0" },
        { "trigger": "maxdb_real_query()", "contents": "maxdb_real_query(${1:link}, ${2:query})$0" },
        { "trigger": "maxdb_report()", "contents": "maxdb_report(${1:flags})$0" },
        { "trigger": "maxdb_rollback()", "contents": "maxdb_rollback(${1:link})$0" },
        { "trigger": "maxdb_rpl_parse_enabled()", "contents": "maxdb_rpl_parse_enabled(${1:link})$0" },
        { "trigger": "maxdb_rpl_probe()", "contents": "maxdb_rpl_probe(${1:link})$0" },
        { "trigger": "maxdb_rpl_query_type()", "contents": "maxdb_rpl_query_type(${1:link})$0" },
        { "trigger": "maxdb_select_db()", "contents": "maxdb_select_db(${1:link}, ${2:dbname})$0" },
        { "trigger": "maxdb_send_long_data()\tdeprecated ", "contents": "maxdb_send_long_data(${1:stmt}, ${2:param_nr}, ${3:data})$0" },
        { "trigger": "maxdb_send_query()", "contents": "maxdb_send_query(${1:link}, ${2:query})$0" },
        { "trigger": "maxdb_server_end()", "contents": "maxdb_server_end()" },
        { "trigger": "maxdb_server_init()", "contents": "maxdb_server_init(${1:server}${2:[, groups]})$0" },
        { "trigger": "maxdb_set_opt()", "contents": "maxdb_set_opt(${1:link}, ${2:option}, ${3:value})$0" },
        { "trigger": "maxdb_sqlstate()", "contents": "maxdb_sqlstate(${1:link})$0" },
        { "trigger": "maxdb_ssl_set()", "contents": "maxdb_ssl_set(${1:link}, ${2:key}, ${3:cert}, ${4:ca}, ${5:capath}, ${6:cipher})$0" },
        { "trigger": "maxdb_stat()", "contents": "maxdb_stat(${1:link})$0" },
        { "trigger": "maxdb_stmt_affected_rows()", "contents": "maxdb_stmt_affected_rows(${1:stmt})$0" },
        { "trigger": "maxdb_stmt_bind_param()", "contents": "maxdb_stmt_bind_param(${1:stmt}, ${2:types}, ${3:vars})$0" },
        { "trigger": "maxdb_stmt_bind_result()", "contents": "maxdb_stmt_bind_result(${1:stmt}, ${:vars})$0" },
        { "trigger": "maxdb_stmt_close()", "contents": "maxdb_stmt_close(${1:stmt})$0" },
        { "trigger": "maxdb_stmt_close_long_data()", "contents": "maxdb_stmt_close_long_data(${1:stmt}, ${2:param_nr})$0" },
        { "trigger": "maxdb_stmt_data_seek()", "contents": "maxdb_stmt_data_seek(${1:statement}, ${2:offset})$0" },
        { "trigger": "maxdb_stmt_errno()", "contents": "maxdb_stmt_errno(${1:stmt})$0" },
        { "trigger": "maxdb_stmt_error()", "contents": "maxdb_stmt_error(${1:stmt})$0" },
        { "trigger": "maxdb_stmt_execute()", "contents": "maxdb_stmt_execute(${1:stmt})$0" },
        { "trigger": "maxdb_stmt_fetch()", "contents": "maxdb_stmt_fetch(${1:stmt})$0" },
        { "trigger": "maxdb_stmt_free_result()", "contents": "maxdb_stmt_free_result(${1:stmt})$0" },
        { "trigger": "maxdb_stmt_init()", "contents": "maxdb_stmt_init(${1:link})$0" },
        { "trigger": "maxdb_stmt_num_rows()", "contents": "maxdb_stmt_num_rows(${1:stmt})$0" },
        { "trigger": "maxdb_stmt_param_count()", "contents": "maxdb_stmt_param_count(${1:stmt})$0" },
        { "trigger": "maxdb_stmt_prepare()", "contents": "maxdb_stmt_prepare(${1:stmt}, ${2:query})$0" },
        { "trigger": "maxdb_stmt_reset()", "contents": "maxdb_stmt_reset(${1:stmt})$0" },
        { "trigger": "maxdb_stmt_result_metadata()", "contents": "maxdb_stmt_result_metadata(${1:stmt})$0" },
        { "trigger": "maxdb_stmt_send_long_data()", "contents": "maxdb_stmt_send_long_data(${1:stmt}, ${2:param_nr}, ${3:data})$0" },
        { "trigger": "maxdb_stmt_sqlstate()", "contents": "maxdb_stmt_sqlstate(${1:stmt})$0" },
        { "trigger": "maxdb_stmt_store_result()", "contents": "maxdb_stmt_store_result(${1:stmt})$0" },
        { "trigger": "maxdb_store_result()", "contents": "maxdb_store_result(${1:link})$0" },
        { "trigger": "maxdb_thread_id()", "contents": "maxdb_thread_id(${1:link})$0" },
        { "trigger": "maxdb_thread_safe()", "contents": "maxdb_thread_safe()" },
        { "trigger": "maxdb_use_result()", "contents": "maxdb_use_result(${1:link})$0" },
        { "trigger": "maxdb_warning_count()", "contents": "maxdb_warning_count(${1:link})$0" },
        */
        // Multibyte string functions
        { "trigger": "mb_check_encoding()", "contents": "mb_check_encoding(${1:[var]}${2:[, encoding]})$0" },
        { "trigger": "mb_convert_case()", "contents": "mb_convert_case(${1:str}, ${2:mode=MB_CASE_UPPER})$0" },
        { "trigger": "mb_convert_encoding()", "contents": "mb_convert_encoding(${1:str}, ${2:to_encoding})$0" },
        { "trigger": "mb_convert_kana()", "contents": "mb_convert_kana(${1:str})$0" },
        { "trigger": "mb_convert_variables()", "contents": "mb_convert_variables(${1:to_encoding}, ${2:from_encoding}, ${3:vars})$0" },
        { "trigger": "mb_decode_mimeheader()", "contents": "mb_decode_mimeheader(${1:str})$0" },
        { "trigger": "mb_decode_numericentity()", "contents": "mb_decode_numericentity(${1:str}, ${2:convmap}, ${3:encoding})$0" },
        { "trigger": "mb_detect_encoding()", "contents": "mb_detect_encoding(${1:str})$0" },
        { "trigger": "mb_detect_order()", "contents": "mb_detect_order(${1:[encoding_list]})$0" },
        { "trigger": "mb_encode_mimeheader()", "contents": "mb_encode_mimeheader(${1:str})$0" },
        { "trigger": "mb_encode_numericentity()", "contents": "mb_encode_numericentity(${1:str}, ${2:convmap}, ${3:encoding})$0" },
        { "trigger": "mb_encoding_aliases()", "contents": "mb_encoding_aliases(${1:encoding})$0" },
        { "trigger": "mb_ereg()", "contents": "mb_ereg(${1:pattern}, ${2:string})$0" },
        { "trigger": "mb_ereg_match()", "contents": "mb_ereg_match(${1:pattern}, ${2:string})$0" },
        { "trigger": "mb_ereg_replace()", "contents": "mb_ereg_replace(${1:pattern}, ${2:replacement}, ${3:string})$0" },
        { "trigger": "mb_ereg_replace_callback()", "contents": "mb_ereg_replace_callback(${1:pattern}, ${2:callback}, ${3:string}${4:[, option]})$0" },
        { "trigger": "mb_ereg_search()", "contents": "mb_ereg_search(${1:[pattern]}${2:[, option]})$0" },
        { "trigger": "mb_ereg_search_getpos()", "contents": "mb_ereg_search_getpos()" },
        { "trigger": "mb_ereg_search_getregs()", "contents": "mb_ereg_search_getregs()" },
        { "trigger": "mb_ereg_search_init()", "contents": "mb_ereg_search_init(${1:string})$0" },
        { "trigger": "mb_ereg_search_pos()", "contents": "mb_ereg_search_pos(${1:[pattern]}${2:[, option]})$0" },
        { "trigger": "mb_ereg_search_regs()", "contents": "mb_ereg_search_regs(${1:[pattern]}${2:[, option]})$0" },
        { "trigger": "mb_ereg_search_setpos()", "contents": "mb_ereg_search_setpos(${1:position})$0" },
        { "trigger": "mb_eregi()", "contents": "mb_eregi(${1:pattern}, ${2:string})$0" },
        { "trigger": "mb_eregi_replace()", "contents": "mb_eregi_replace(${1:pattern}, ${2:replace}, ${3:string})$0" },
        { "trigger": "mb_get_info()", "contents": "mb_get_info(${1:[type]})$0" },
        { "trigger": "mb_http_input()", "contents": "mb_http_input(${1:[type]})$0" },
        { "trigger": "mb_http_output()", "contents": "mb_http_output(${1:[encoding]})$0" },
        { "trigger": "mb_internal_encoding()", "contents": "mb_internal_encoding(${1:[encoding]})$0" },
        { "trigger": "mb_language()", "contents": "mb_language(${1:[language]})$0" },
        { "trigger": "mb_list_encodings()", "contents": "mb_list_encodings()" },
        { "trigger": "mb_output_handler()", "contents": "mb_output_handler(${1:contents}, ${2:status})$0" },
        { "trigger": "mb_parse_str()", "contents": "mb_parse_str(${1:encoded_string})$0" },
        { "trigger": "mb_preferred_mime_name()", "contents": "mb_preferred_mime_name(${1:encoding})$0" },
        { "trigger": "mb_regex_encoding()", "contents": "mb_regex_encoding(${1:[encoding]})$0" },
        { "trigger": "mb_regex_set_options()", "contents": "mb_regex_set_options(${1:[options]})$0" },
        { "trigger": "mb_send_mail()", "contents": "mb_send_mail(${1:to}, ${2:subject}, ${3:message})$0" },
        { "trigger": "mb_split()", "contents": "mb_split(${1:pattern}, ${2:string})$0" },
        { "trigger": "mb_strcut()", "contents": "mb_strcut(${1:str}, ${2:start})$0" },
        { "trigger": "mb_strimwidth()", "contents": "mb_strimwidth(${1:str}, ${2:start}, ${3:width})$0" },
        { "trigger": "mb_stripos()", "contents": "mb_stripos(${1:haystack}, ${2:needle})$0" },
        { "trigger": "mb_stristr()", "contents": "mb_stristr(${1:haystack}, ${2:needle})$0" },
        { "trigger": "mb_strlen()", "contents": "mb_strlen(${1:str})$0" },
        { "trigger": "mb_strpos()", "contents": "mb_strpos(${1:haystack}, ${2:needle})$0" },
        { "trigger": "mb_strrchr()", "contents": "mb_strrchr(${1:haystack}, ${2:needle})$0" },
        { "trigger": "mb_strrichr()", "contents": "mb_strrichr(${1:haystack}, ${2:needle})$0" },
        { "trigger": "mb_strripos()", "contents": "mb_strripos(${1:haystack}, ${2:needle})$0" },
        { "trigger": "mb_strrpos()", "contents": "mb_strrpos(${1:haystack}, ${2:needle})$0" },
        { "trigger": "mb_strstr()", "contents": "mb_strstr(${1:haystack}, ${2:needle})$0" },
        { "trigger": "mb_strtolower()", "contents": "mb_strtolower(${1:str})$0" },
        { "trigger": "mb_strtoupper()", "contents": "mb_strtoupper(${1:str})$0" },
        { "trigger": "mb_strwidth()", "contents": "mb_strwidth(${1:str})$0" },
        { "trigger": "mb_substitute_character()", "contents": "mb_substitute_character(${1:[substrchar]})$0" },
        { "trigger": "mb_substr()", "contents": "mb_substr(${1:str}, ${2:start})$0" },
        { "trigger": "mb_substr_count()", "contents": "mb_substr_count(${1:haystack}, ${2:needle})$0" },
        // mcrypt
        { "trigger": "mcrypt_cbc()", "contents": "mcrypt_cbc(${1:cipher}, ${2:key}, ${3:data}, ${4:mode})$0" },
        { "trigger": "mcrypt_cfb()", "contents": "mcrypt_cfb(${1:cipher}, ${2:key}, ${3:data}, ${4:mode}, ${5:iv})$0" },
        { "trigger": "mcrypt_create_iv()", "contents": "mcrypt_create_iv(${1:size})$0" },
        { "trigger": "mcrypt_decrypt()", "contents": "mcrypt_decrypt(${1:cipher}, ${2:key}, ${3:data}, ${4:mode})$0" },
        { "trigger": "mcrypt_ecb()", "contents": "mcrypt_ecb(${1:cipher}, ${2:key}, ${3:data}, ${4:mode})$0" },
        { "trigger": "mcrypt_enc_get_algorithms_name()", "contents": "mcrypt_enc_get_algorithms_name(${1:td})$0" },
        { "trigger": "mcrypt_enc_get_block_size()", "contents": "mcrypt_enc_get_block_size(${1:td})$0" },
        { "trigger": "mcrypt_enc_get_iv_size()", "contents": "mcrypt_enc_get_iv_size(${1:td})$0" },
        { "trigger": "mcrypt_enc_get_key_size()", "contents": "mcrypt_enc_get_key_size(${1:td})$0" },
        { "trigger": "mcrypt_enc_get_modes_name()", "contents": "mcrypt_enc_get_modes_name(${1:td})$0" },
        { "trigger": "mcrypt_enc_get_supported_key_sizes()", "contents": "mcrypt_enc_get_supported_key_sizes(${1:td})$0" },
        { "trigger": "mcrypt_enc_is_block_algorithm()", "contents": "mcrypt_enc_is_block_algorithm(${1:td})$0" },
        { "trigger": "mcrypt_enc_is_block_algorithm_mode()", "contents": "mcrypt_enc_is_block_algorithm_mode(${1:td})$0" },
        { "trigger": "mcrypt_enc_is_block_mode()", "contents": "mcrypt_enc_is_block_mode(${1:td})$0" },
        { "trigger": "mcrypt_enc_self_test()", "contents": "mcrypt_enc_self_test(${1:td})$0" },
        { "trigger": "mcrypt_encrypt()", "contents": "mcrypt_encrypt(${1:cipher}, ${2:key}, ${3:data}, ${4:mode})$0" },
        { "trigger": "mcrypt_generic()", "contents": "mcrypt_generic(${1:td}, ${2:data})$0" },
        { "trigger": "mcrypt_generic_deinit()", "contents": "mcrypt_generic_deinit(${1:td})$0" },
        { "trigger": "mcrypt_generic_end()", "contents": "mcrypt_generic_end(${1:td})$0" },
        { "trigger": "mcrypt_generic_init()", "contents": "mcrypt_generic_init(${1:td}, ${2:key}, ${3:iv})$0" },
        { "trigger": "mcrypt_get_block_size()", "contents": "mcrypt_get_block_size(${1:cipher})$0" },
        { "trigger": "mcrypt_get_cipher_name()", "contents": "mcrypt_get_cipher_name(${1:cipher})$0" },
        { "trigger": "mcrypt_get_iv_size()", "contents": "mcrypt_get_iv_size(${1:cipher}, ${2:mode})$0" },
        { "trigger": "mcrypt_get_key_size()", "contents": "mcrypt_get_key_size(${1:cipher})$0" },
        { "trigger": "mcrypt_list_algorithms()", "contents": "mcrypt_list_algorithms(${1:[lib_dir]})$0" },
        { "trigger": "mcrypt_list_modes()", "contents": "mcrypt_list_modes(${1:[lib_dir]})$0" },
        { "trigger": "mcrypt_module_close()", "contents": "mcrypt_module_close(${1:td})$0" },
        { "trigger": "mcrypt_module_get_algo_block_size()", "contents": "mcrypt_module_get_algo_block_size(${1:algorithm})$0" },
        { "trigger": "mcrypt_module_get_algo_key_size()", "contents": "mcrypt_module_get_algo_key_size(${1:algorithm})$0" },
        { "trigger": "mcrypt_module_get_supported_key_sizes()", "contents": "mcrypt_module_get_supported_key_sizes(${1:algorithm})$0" },
        { "trigger": "mcrypt_module_is_block_algorithm()", "contents": "mcrypt_module_is_block_algorithm(${1:algorithm})$0" },
        { "trigger": "mcrypt_module_is_block_algorithm_mode()", "contents": "mcrypt_module_is_block_algorithm_mode(${1:mode})$0" },
        { "trigger": "mcrypt_module_is_block_mode()", "contents": "mcrypt_module_is_block_mode(${1:mode})$0" },
        { "trigger": "mcrypt_module_open()", "contents": "mcrypt_module_open(${1:algorithm}, ${2:algorithm_directory}, ${3:mode}, ${4:mode_directory})$0" },
        { "trigger": "mcrypt_module_self_test()", "contents": "mcrypt_module_self_test(${1:algorithm})$0" },
        { "trigger": "mcrypt_ofb()", "contents": "mcrypt_ofb(${1:cipher}, ${2:key}, ${3:data}, ${4:mode}, ${5:iv})$0" },

        { "trigger": "md5()", "contents": "md5(${1:str}${2:[, raw_output]})$0" },
        { "trigger": "md5_file()", "contents": "md5_file(${1:filename}${2:[, raw_output]})$0" },
        { "trigger": "mdecrypt_generic()", "contents": "mdecrypt_generic(${1:td}, ${2:data})$0" },

        "Memcache",
        { "trigger": "memcache_debug()", "contents": "memcache_debug(${1:on_off})$0" },
        "Memcached",
        { "trigger": "Memcached()", "contents": "Memcached(${1:[persistent_id]})$0" },
        { "trigger": "memory_get_peak_usage()", "contents": "memory_get_peak_usage(${1:[real_usage]})$0" },
        { "trigger": "memory_get_usage()", "contents": "memory_get_usage(${1:[real_usage]})$0" },
        "MessageFormatter",
        { "trigger": "MessageFormatter()", "contents": "MessageFormatter(${1:locale}, ${2:pattern})$0" },
        { "trigger": "metaphone()", "contents": "metaphone(${1:str}${2:[, phonemes]})$0" },
        { "trigger": "method_exists()", "contents": "method_exists(${1:object}, ${2:method_name})$0" },
        /* Mhash is obsoleted by Hash
        { "trigger": "mhash()", "contents": "mhash(${1:hash}, ${2:data})$0" },
        { "trigger": "mhash_count()", "contents": "mhash_count()" },
        { "trigger": "mhash_get_block_size()", "contents": "mhash_get_block_size(${1:hash})$0" },
        { "trigger": "mhash_get_hash_name()", "contents": "mhash_get_hash_name(${1:hash})$0" },
        { "trigger": "mhash_keygen_s2k()", "contents": "mhash_keygen_s2k(${1:hash}, ${2:password}, ${3:salt}, ${4:bytes})$0" },
        */
        { "trigger": "microtime()", "contents": "microtime(${1:[get_as_float]})$0" },
        { "trigger": "mime_content_type()", "contents": "mime_content_type(${1:filename})$0" },
        { "trigger": "min()", "contents": "min(${1:values})$0" },
        /* Ming (for creating flash movies) moved to PECL as of PHP 5.1.0
        { "trigger": "ming_keypress()", "contents": "ming_keypress(${1:char})$0" },
        { "trigger": "ming_setcubicthreshold()", "contents": "ming_setcubicthreshold(${1:threshold})$0" },
        { "trigger": "ming_setscale()", "contents": "ming_setscale(${1:scale})$0" },
        { "trigger": "ming_setswfcompression()", "contents": "ming_setswfcompression(${1:level})$0" },
        { "trigger": "ming_useconstants()", "contents": "ming_useconstants(${1:use})$0" },
        { "trigger": "ming_useswfversion()", "contents": "ming_useswfversion(${1:version})$0" },
        */
        { "trigger": "mkdir()", "contents": "mkdir(${1:pathname})$0" },
        { "trigger": "mkdir(full)", "contents": "mkdir(${1:pathname}${2:[, mode]}${3:[, recursive]}${4:[, context]})$0" },
        { "trigger": "mktime()", "contents": "mktime($1)$0" },
        { "trigger": "mktime(full)", "contents": "mktime(${1:[hour]}${2:[, minute]}${3:[, second]}${4:[, month]}${5:[, day]}${6:[, year]})$0" },
        { "trigger": "money_format()", "contents": "money_format(${1:format}, ${2:number})$0" },
        /* MongoDB Native Driver - PECL extension, not bundled with PHP
        { "trigger": "Mongo()\tctor", "contents": "Mongo(${1:[server]}${2:[, options]})$0" },
        { "trigger": "MongoBinData()\tctor", "contents": "MongoBinData(${1:data}${2:[, type]})$0" },
        { "trigger": "MongoCode()\tctor", "contents": "MongoCode(${1:code}${2:[, scope]})$0" },
        { "trigger": "MongoCollection()\tctor", "contents": "MongoCollection(${1:db}, ${2:name})$0" },
        "MongoConnectionException",
        "MongoCursor",
        "MongoCursorException",
        "MongoCursorTimeoutException",
        { "trigger": "MongoDate()\tctor", "contents": "MongoDate(${1:[sec]}${2:[, usec]})$0" },
        { "trigger": "MongoDB()\tctor", "contents": "MongoDB(${1:conn}, ${2:name})$0" },
        "MongoDBRef",
        "MongoException",
        { "trigger": "MongoGridFS()\tctor", "contents": "MongoGridFS(${1:db}${2:[, prefix]}${3:[, chunks]})$0" },
        { "trigger": "MongoGridFSCursor()\tctor", "contents": "MongoGridFSCursor(${1:gridfs}, ${2:connection}, ${3:ns}, ${4:query}, ${5:fields})$0" },
        "MongoGridFSException",
        { "trigger": "MongoGridFSFile()\tctor", "contents": "MongoGridFSFile(${1:gridfs}, ${2:file})$0" },
        { "trigger": "MongoId()\tctor", "contents": "MongoId(${1:[id]})$0" },
        { "trigger": "MongoInt32()\tctor", "contents": "MongoInt32(${1:value})$0" },
        { "trigger": "MongoInt64()\tctor", "contents": "MongoInt64(${1:value})$0" },
        "MongoLog",
        "MongoMaxKey",
        "MongoMinKey",
        "MongoPool",
        { "trigger": "MongoRegex()\tctor", "contents": "MongoRegex(${1:regex})$0" },
        { "trigger": "MongoTimestamp()\tctor", "contents": "MongoTimestamp(${1:[sec]}${2:[, inc]})$0" },
        */
        { "trigger": "move_uploaded_file()", "contents": "move_uploaded_file(${1:filename}, ${2:destination})$0" },
        /*  IBM's WebSphere MQ series Queue managers
        { "trigger": "mqseries_back()", "contents": "mqseries_back(${1:hconn}, ${2:compCode}, ${3:reason})$0" },
        { "trigger": "mqseries_begin()", "contents": "mqseries_begin(${1:hconn}, ${2:beginOptions}, ${3:compCode}, ${4:reason})$0" },
        { "trigger": "mqseries_close()", "contents": "mqseries_close(${1:hconn}, ${2:hobj}, ${3:options}, ${4:compCode}, ${5:reason})$0" },
        { "trigger": "mqseries_cmit()", "contents": "mqseries_cmit(${1:hconn}, ${2:compCode}, ${3:reason})$0" },
        { "trigger": "mqseries_conn()", "contents": "mqseries_conn(${1:qManagerName}, ${2:hconn}, ${3:compCode}, ${4:reason})$0" },
        { "trigger": "mqseries_connx()", "contents": "mqseries_connx(${1:qManagerName}, ${2:connOptions}, ${3:hconn}, ${4:compCode}, ${5:reason})$0" },
        { "trigger": "mqseries_disc()", "contents": "mqseries_disc(${1:hconn}, ${2:compCode}, ${3:reason})$0" },
        { "trigger": "mqseries_get()", "contents": "mqseries_get(${1:hConn}, ${2:hObj}, ${3:md}, ${4:gmo}, ${5:bufferLength}, ${6:msg}, ${7:data_length}, ${8:compCode}, ${9:reason})$0" },
        { "trigger": "mqseries_inq()", "contents": "mqseries_inq(${1:hconn}, ${2:hobj}, ${3:selectorCount}, ${4:selectors}, ${5:intAttrCount}, ${6:intAttr}, ${7:charAttrLength}, ${8:charAttr}, ${9:compCode}, ${10:reason})$0" },
        { "trigger": "mqseries_open()", "contents": "mqseries_open(${1:hconn}, ${2:objDesc}, ${3:option}, ${4:hobj}, ${5:compCode}, ${6:reason})$0" },
        { "trigger": "mqseries_put()", "contents": "mqseries_put(${1:hConn}, ${2:hObj}, ${3:md}, ${4:pmo}, ${5:message}, ${6:compCode}, ${7:reason})$0" },
        { "trigger": "mqseries_put1()", "contents": "mqseries_put1(${1:hconn}, ${2:objDesc}, ${3:msgDesc}, ${4:pmo}, ${5:buffer}, ${6:compCode}, ${7:reason})$0" },
        { "trigger": "mqseries_set()", "contents": "mqseries_set(${1:hconn}, ${2:hobj}, ${3:selectorcount}, ${4:selectors}, ${5:intattrcount}, ${6:intattrs}, ${7:charattrlength}, ${8:charattrs}, ${9:compCode}, ${10:reason})$0" },
        { "trigger": "mqseries_strerror()", "contents": "mqseries_strerror(${1:reason})$0" },
        */
        /* Mohawk Software Session - not available on Windows -  moved to PECL as of PHP 5.1.3
        { "trigger": "msession_connect()", "contents": "msession_connect(${1:host}, ${2:port})$0" },
        { "trigger": "msession_count()", "contents": "msession_count()" },
        { "trigger": "msession_create()", "contents": "msession_create(${1:session})$0" },
        { "trigger": "msession_destroy()", "contents": "msession_destroy(${1:name})$0" },
        { "trigger": "msession_disconnect()", "contents": "msession_disconnect()" },
        { "trigger": "msession_find()", "contents": "msession_find(${1:name}, ${2:value})$0" },
        { "trigger": "msession_get()", "contents": "msession_get(${1:session}, ${2:name}, ${3:value})$0" },
        { "trigger": "msession_get_array()", "contents": "msession_get_array(${1:session})$0" },
        { "trigger": "msession_get_data()", "contents": "msession_get_data(${1:session})$0" },
        { "trigger": "msession_inc()", "contents": "msession_inc(${1:session}, ${2:name})$0" },
        { "trigger": "msession_list()", "contents": "msession_list()" },
        { "trigger": "msession_listvar()", "contents": "msession_listvar(${1:name})$0" },
        { "trigger": "msession_lock()", "contents": "msession_lock(${1:name})$0" },
        { "trigger": "msession_plugin()", "contents": "msession_plugin(${1:session}, ${2:val})$0" },
        { "trigger": "msession_randstr()", "contents": "msession_randstr(${1:param})$0" },
        { "trigger": "msession_set()", "contents": "msession_set(${1:session}, ${2:name}, ${3:value})$0" },
        { "trigger": "msession_set_array()", "contents": "msession_set_array(${1:session}, ${2:tuples})$0" },
        { "trigger": "msession_set_data()", "contents": "msession_set_data(${1:session}, ${2:value})$0" },
        { "trigger": "msession_timeout()", "contents": "msession_timeout(${1:session})$0" },
        { "trigger": "msession_uniq()", "contents": "msession_uniq(${1:param})$0" },
        { "trigger": "msession_unlock()", "contents": "msession_unlock(${1:session}, ${2:key})$0" },
        */
        // Semaphore fns - not available on Windows
        { "trigger": "msg_get_queue()", "contents": "msg_get_queue(${1:key}${2:[, perms]})$0" },
        { "trigger": "msg_queue_exists()", "contents": "msg_queue_exists(${1:key})$0" },
        { "trigger": "msg_receive()", "contents": "msg_receive(${1:queue}, ${2:desiredmsgtype}, ${3:msgtype}, ${4:maxsize}, ${5:message}${6:[, unserialize]}${7:[, flags]}${8:[, errorcode]})$0" },
        { "trigger": "msg_remove_queue()", "contents": "msg_remove_queue(${1:queue})$0" },
        { "trigger": "msg_send()", "contents": "msg_send(${1:queue}, ${2:msgtype}, ${3:message}${4:[, serialize]}${5:[, blocking]}${6:[, errorcode]})$0" },
        { "trigger": "msg_set_queue()", "contents": "msg_set_queue(${1:queue}, ${2:data})$0" },
        { "trigger": "msg_stat_queue()", "contents": "msg_stat_queue(${1:queue})$0" },
        /* Mini SQL database
        { "trigger": "msql()", "contents": "msql(${1:database}, ${2:query}${3:[, link_identifier]})$0" },
        { "trigger": "msql_affected_rows()", "contents": "msql_affected_rows(${1:result})$0" },
        { "trigger": "msql_close()", "contents": "msql_close(${1:[link_identifier]})$0" },
        { "trigger": "msql_connect()", "contents": "msql_connect(${1:[hostname]})$0" },
        { "trigger": "msql_create_db()", "contents": "msql_create_db(${1:database_name})$0" },
        { "trigger": "msql_createdb()", "contents": "msql_createdb(${1:database_name}${2:[, link_identifier]})$0" },
        { "trigger": "msql_data_seek()", "contents": "msql_data_seek(${1:result}, ${2:row_number})$0" },
        { "trigger": "msql_db_query()", "contents": "msql_db_query(${1:database}, ${2:query})$0" },
        { "trigger": "msql_dbname()", "contents": "msql_dbname(${1:result}, ${2:row}${3:[, field]})$0" },
        { "trigger": "msql_drop_db()", "contents": "msql_drop_db(${1:database_name})$0" },
        { "trigger": "msql_error()", "contents": "msql_error()" },
        { "trigger": "msql_fetch_array()", "contents": "msql_fetch_array(${1:result})$0" },
        { "trigger": "msql_fetch_field()", "contents": "msql_fetch_field(${1:result})$0" },
        { "trigger": "msql_fetch_object()", "contents": "msql_fetch_object(${1:result})$0" },
        { "trigger": "msql_fetch_row()", "contents": "msql_fetch_row(${1:result})$0" },
        { "trigger": "msql_field_flags()", "contents": "msql_field_flags(${1:result}, ${2:field_offset})$0" },
        { "trigger": "msql_field_len()", "contents": "msql_field_len(${1:result}, ${2:field_offset})$0" },
        { "trigger": "msql_field_name()", "contents": "msql_field_name(${1:result}, ${2:field_offset})$0" },
        { "trigger": "msql_field_seek()", "contents": "msql_field_seek(${1:result}, ${2:field_offset})$0" },
        { "trigger": "msql_field_table()", "contents": "msql_field_table(${1:result}, ${2:field_offset})$0" },
        { "trigger": "msql_field_type()", "contents": "msql_field_type(${1:result}, ${2:field_offset})$0" },
        { "trigger": "msql_fieldflags()", "contents": "msql_fieldflags(${1:result}, ${2:field_offset})$0" },
        { "trigger": "msql_fieldlen()", "contents": "msql_fieldlen(${1:result}, ${2:field_offset})$0" },
        { "trigger": "msql_fieldname()", "contents": "msql_fieldname(${1:result}, ${2:field_offset})$0" },
        { "trigger": "msql_fieldtable()", "contents": "msql_fieldtable(${1:result}, ${2:field_offset})$0" },
        { "trigger": "msql_fieldtype()", "contents": "msql_fieldtype(${1:result}, ${2:field_offset})$0" },
        { "trigger": "msql_free_result()", "contents": "msql_free_result(${1:result})$0" },
        { "trigger": "msql_list_dbs()", "contents": "msql_list_dbs(${1:[link_identifier]})$0" },
        { "trigger": "msql_list_fields()", "contents": "msql_list_fields(${1:database}, ${2:tablename})$0" },
        { "trigger": "msql_list_tables()", "contents": "msql_list_tables(${1:database})$0" },
        { "trigger": "msql_num_fields()", "contents": "msql_num_fields(${1:result})$0" },
        { "trigger": "msql_num_rows()", "contents": "msql_num_rows(${1:query_identifier})$0" },
        { "trigger": "msql_numfields()", "contents": "msql_numfields($${1:result})$0" },
        { "trigger": "msql_numrows()", "contents": "msql_numrows(${1:query_identifier})$0" },
        { "trigger": "msql_pconnect()", "contents": "msql_pconnect(${1:hostname})$0" },
        { "trigger": "msql_query()", "contents": "msql_query(${1:query})$0" },
        { "trigger": "msql_regcase()", "contents": "msql_regcase(${1:string})$0" },
        { "trigger": "msql_result()", "contents": "msql_result(${1:result}, ${2:row})$0" },
        { "trigger": "msql_select_db()", "contents": "msql_select_db(${1:database_name})$0" },
        { "trigger": "msql_tablename()", "contents": "msql_tablename(${1:result}, ${2:row}${3:[, field]})$0" },
        */
        // MS SQL Server - not available on Windows as of PHP 5.3 (SQLSRV is an alterative MS driver)
        { "trigger": "mssql_bind()", "contents": "mssql_bind(${1:stmt}, ${2:param_name}, ${3:var}, ${4:type})$0" },
        { "trigger": "mssql_close()", "contents": "mssql_close(${1:[link_identifier]})$0" },
        { "trigger": "mssql_connect()", "contents": "mssql_connect($1)$0" },
        { "trigger": "mssql_connect(full)", "contents": "mssql_connect(${1:[servername, ]}${2:[username]}${3:[, password]}${4:[, new_link]})$0" },
        { "trigger": "mssql_data_seek()", "contents": "mssql_data_seek(${1:result_identifier}, ${2:row_number})$0" },
        { "trigger": "mssql_execute()", "contents": "mssql_execute(${1:stmt})$0" },
        { "trigger": "mssql_fetch_array()", "contents": "mssql_fetch_array(${1:result})$0" },
        { "trigger": "mssql_fetch_assoc()", "contents": "mssql_fetch_assoc(${1:result_id})$0" },
        { "trigger": "mssql_fetch_batch()", "contents": "mssql_fetch_batch(${1:result})$0" },
        { "trigger": "mssql_fetch_field()", "contents": "mssql_fetch_field(${1:result})$0" },
        { "trigger": "mssql_fetch_object()", "contents": "mssql_fetch_object(${1:result})$0" },
        { "trigger": "mssql_fetch_row()", "contents": "mssql_fetch_row(${1:result})$0" },
        { "trigger": "mssql_field_length()", "contents": "mssql_field_length(${1:result})$0" },
        { "trigger": "mssql_field_name()", "contents": "mssql_field_name(${1:result})$0" },
        { "trigger": "mssql_field_seek()", "contents": "mssql_field_seek(${1:result}, ${2:field_offset})$0" },
        { "trigger": "mssql_field_type()", "contents": "mssql_field_type(${1:result})$0" },
        { "trigger": "mssql_free_result()", "contents": "mssql_free_result(${1:result})$0" },
        { "trigger": "mssql_free_statement()", "contents": "mssql_free_statement(${1:stmt})$0" },
        { "trigger": "mssql_get_last_message()", "contents": "mssql_get_last_message()" },
        { "trigger": "mssql_guid_string()", "contents": "mssql_guid_string(${1:binary})$0" },
        { "trigger": "mssql_init()", "contents": "mssql_init(${1:sp_name})$0" },
        { "trigger": "mssql_min_error_severity()", "contents": "mssql_min_error_severity(${1:severity})$0" },
        { "trigger": "mssql_min_message_severity()", "contents": "mssql_min_message_severity(${1:severity})$0" },
        { "trigger": "mssql_next_result()", "contents": "mssql_next_result(${1:result_id})$0" },
        { "trigger": "mssql_num_fields()", "contents": "mssql_num_fields(${1:result})$0" },
        { "trigger": "mssql_num_rows()", "contents": "mssql_num_rows(${1:result})$0" },
        { "trigger": "mssql_pconnect()", "contents": "mssql_pconnect($1)$0" },
        { "trigger": "mssql_pconnect(full)", "contents": "mssql_pconnect(${1:[servername, ]}${2:[username]}${3:[, password]}${4:[, new_link]})$0" },
        { "trigger": "mssql_query()", "contents": "mssql_query(${1:query})$0" },
        { "trigger": "mssql_result()", "contents": "mssql_result(${1:result}, ${2:row}, ${3:field})$0" },
        { "trigger": "mssql_rows_affected()", "contents": "mssql_rows_affected(${1:link_identifier})$0" },
        { "trigger": "mssql_select_db()", "contents": "mssql_select_db(${1:database_name})$0" },

        { "trigger": "mt_getrandmax()", "contents": "mt_getrandmax()" },
        { "trigger": "mt_rand()", "contents": "mt_rand(${1:${2:[min]}${3:[, max]}})$0" },
        { "trigger": "mt_srand()", "contents": "mt_srand(${1:[seed]})$0" },
        "MultipleIterator",
        { "trigger": "MultipleIterator()\tctor", "contents": "MultipleIterator(${1:[flags]})$0" },

        // MySQL - use Mysqli instead (improved)
        { "trigger": "mysql_affected_rows()\tdiscouraged ", "contents": "mysql_affected_rows(${1:[link_identifier]})$0" },
        { "trigger": "mysql_client_encoding()\tdiscouraged ", "contents": "mysql_client_encoding(${1:[link_identifier]})$0" },
        { "trigger": "mysql_close()\tdiscouraged ", "contents": "mysql_close(${1:[link_identifier]})$0" },
        { "trigger": "mysql_connect()\tdiscouraged ", "contents": "mysql_connect(${1:[server]}${2:[, username]}${3:[, password]}${4:[, new_link]}${5:[, client_flags]})$0" },
        { "trigger": "mysql_create_db()\tdiscouraged ", "contents": "mysql_create_db(${1:database_name}${2:[, link_identifier]})$0" },
        { "trigger": "mysql_data_seek()\tdiscouraged ", "contents": "mysql_data_seek(${1:result}, ${2:row_number})$0" },
        { "trigger": "mysql_db_name()\tdiscouraged ", "contents": "mysql_db_name(${1:result}, ${2:row}${3:[, field]})$0" },
        { "trigger": "mysql_db_query()\tdiscouraged ", "contents": "mysql_db_query(${1:database}, ${2:query}${3:[, link_identifier]})$0" },
        { "trigger": "mysql_drop_db()\tdiscouraged ", "contents": "mysql_drop_db(${1:database_name}${2:[, link_identifier]})$0" },
        { "trigger": "mysql_errno()\tdiscouraged ", "contents": "mysql_errno(${1:[link_identifier]})$0" },
        { "trigger": "mysql_error()\tdiscouraged ", "contents": "mysql_error(${1:[link_identifier]})$0" },
        { "trigger": "mysql_escape_string()\tdiscouraged ", "contents": "mysql_escape_string(${1:unescaped_string})$0" },
        { "trigger": "mysql_fetch_array()\tdiscouraged ", "contents": "mysql_fetch_array(${1:result}${2:[, result_type]})$0" },
        { "trigger": "mysql_fetch_assoc()\tdiscouraged ", "contents": "mysql_fetch_assoc(${1:result})$0" },
        { "trigger": "mysql_fetch_field()\tdiscouraged ", "contents": "mysql_fetch_field(${1:result}${2:[, field_offset]})$0" },
        { "trigger": "mysql_fetch_lengths()\tdiscouraged ", "contents": "mysql_fetch_lengths(${1:result})$0" },
        { "trigger": "mysql_fetch_object()\tdiscouraged ", "contents": "mysql_fetch_object(${1:result}${2:[, class_name]}${3:[, params]})$0" },
        { "trigger": "mysql_fetch_row()\tdiscouraged ", "contents": "mysql_fetch_row(${1:result})$0" },
        { "trigger": "mysql_field_flags()\tdiscouraged ", "contents": "mysql_field_flags(${1:result}, ${2:field_offset})$0" },
        { "trigger": "mysql_field_len()\tdiscouraged ", "contents": "mysql_field_len(${1:result}, ${2:field_offset})$0" },
        { "trigger": "mysql_field_name()\tdiscouraged ", "contents": "mysql_field_name(${1:result}, ${2:field_offset})$0" },
        { "trigger": "mysql_field_seek()\tdiscouraged ", "contents": "mysql_field_seek(${1:result}, ${2:field_offset})$0" },
        { "trigger": "mysql_field_table()\tdiscouraged ", "contents": "mysql_field_table(${1:result}, ${2:field_offset})$0" },
        { "trigger": "mysql_field_type()\tdiscouraged ", "contents": "mysql_field_type(${1:result}, ${2:field_offset})$0" },
        { "trigger": "mysql_free_result()\tdiscouraged ", "contents": "mysql_free_result(${1:result})$0" },
        { "trigger": "mysql_get_client_info()\tdiscouraged ", "contents": "mysql_get_client_info()" },
        { "trigger": "mysql_get_host_info()\tdiscouraged ", "contents": "mysql_get_host_info(${1:[link_identifier]})$0" },
        { "trigger": "mysql_get_proto_info()\tdiscouraged ", "contents": "mysql_get_proto_info(${1:[link_identifier]})$0" },
        { "trigger": "mysql_get_server_info()\tdiscouraged ", "contents": "mysql_get_server_info(${1:[link_identifier]})$0" },
        { "trigger": "mysql_info()\tdiscouraged ", "contents": "mysql_info(${1:[link_identifier]})$0" },
        { "trigger": "mysql_insert_id()\tdiscouraged ", "contents": "mysql_insert_id(${1:[link_identifier]})$0" },
        { "trigger": "mysql_list_dbs()\tdiscouraged ", "contents": "mysql_list_dbs(${1:[link_identifier]})$0" },
        { "trigger": "mysql_list_fields()\tdiscouraged ", "contents": "mysql_list_fields(${1:database_name}, ${2:table_name}${3:[, link_identifier]})$0" },
        { "trigger": "mysql_list_processes()\tdiscouraged ", "contents": "mysql_list_processes(${1:[link_identifier]})$0" },
        { "trigger": "mysql_list_tables()\tdiscouraged ", "contents": "mysql_list_tables(${1:database}${2:[, link_identifier]})$0" },
        { "trigger": "mysql_num_fields()\tdiscouraged ", "contents": "mysql_num_fields(${1:result})$0" },
        { "trigger": "mysql_num_rows()\tdiscouraged ", "contents": "mysql_num_rows(${1:result})$0" },
        { "trigger": "mysql_pconnect()\tdiscouraged ", "contents": "mysql_pconnect(${1:[server]}${2:[, username]}${3:[, password]}${4:[, client_flags]})$0" },
        { "trigger": "mysql_ping()\tdiscouraged ", "contents": "mysql_ping(${1:[link_identifier]})$0" },
        { "trigger": "mysql_query()\tdiscouraged ", "contents": "mysql_query(${1:query}${2:[, link_identifier]})$0" },
        { "trigger": "mysql_real_escape_string()\tdiscouraged ", "contents": "mysql_real_escape_string(${1:unescaped_string}${2:[, link_identifier]})$0" },
        { "trigger": "mysql_result()", "contents": "mysql_result(${1:result}, ${2:row}${3:[, field]})$0" },
        { "trigger": "mysql_select_db()\tdiscouraged ", "contents": "mysql_select_db(${1:database_name}${2:[, link_identifier]})$0" },
        { "trigger": "mysql_set_charset()\tdiscouraged ", "contents": "mysql_set_charset(${1:charset}${2:[, link_identifier]})$0" },
        { "trigger": "mysql_stat()\tdiscouraged ", "contents": "mysql_stat(${1:[link_identifier]})$0" },
        { "trigger": "mysql_tablename()\tdiscouraged ", "contents": "mysql_tablename(${1:result}, ${2:i})$0" },
        { "trigger": "mysql_thread_id()\tdiscouraged ", "contents": "mysql_thread_id(${1:[link_identifier]})$0" },
        { "trigger": "mysql_unbuffered_query()\tdiscouraged ", "contents": "mysql_unbuffered_query(${1:query}${2:[, link_identifier]})$0" },

        // Mysqli (improved) OO-approach
        "mysqli",
        { "trigger": "mysqli()\tctor", "contents": "mysqli(${1:[host]}${2:[, username]}${3:[, passwd]}${4:[, dbname]}${5:[, port]}${6:[, socket]})$0" },
        { "trigger": "autocommit()\tmysqli", "contents": "autocommit(${1:mode})$0" },
        { "trigger": "change_user()\tmysqli", "contents": "change_user(${1:user}, ${2:password}, ${3:database})$0" },
        { "trigger": "character_set_name()\tmysqli", "contents": "character_set_name()" },
        { "trigger": "close()\tmysqli", "contents": "close()" },
        { "trigger": "commit()\tmysqli", "contents": "commit()" },
        { "trigger": "debug()\tmysqli", "contents": "debug(${1:message})$0" },
        { "trigger": "disable_reads_from_master()\tmysqli(depr.)", "contents": "disable_reads_from_master()" },
        { "trigger": "dump_debug_info()\tmysqli", "contents": "dump_debug_info()" },
        { "trigger": "escape_string()\tmysqli", "contents": "escape_string(${1:escapestr})$0" },
        { "trigger": "get_charset()\tmysqli", "contents": "get_charset()" },
        { "trigger": "get_client_info()\tmysqli", "contents": "get_client_info()" },
        { "trigger": "get_connection_stats()\tmysqli", "contents": "get_connection_stats()" },
        { "trigger": "get_warnings()\tmysqli", "contents": "get_warnings()" },
        { "trigger": "init()\tmysqli", "contents": "init()" },
        { "trigger": "kill()\tmysqli", "contents": "kill(${1:processid})$0" },
        { "trigger": "more_results()\tmysqli", "contents": "more_results()" },
        { "trigger": "multi_query()\tmysqli", "contents": "multi_query(${1:query})$0" },
        { "trigger": "next_result()\tmysqli", "contents": "next_result()" },
        { "trigger": "options()\tmysqli", "contents": "options(${1:option}, ${2:value})$0" },
        { "trigger": "ping()\tmysqli", "contents": "ping()" },
        { "trigger": "poll()\tmysqli", "contents": "poll(${1:read}, ${2:error}, ${3:reject}, ${4:sec}${5:[, usec]})$0" },
        { "trigger": "prepare()\tmysqli", "contents": "prepare(${1:query})$0" },
        { "trigger": "query()\tmysqli", "contents": "query(${1:query}${2:[, resultmode]})$0" },
        { "trigger": "real_connect()\tmysqli", "contents": "real_connect($1)$0" },
        { "trigger": "real_connect(full)\tmysqli", "contents": "real_connect(${1:[host]}${2:[, username]}${3:[, passwd]}${4:[, dbname]}${5:[, port]}${6:[, socket]}${7:[, flags]})$0" },
        { "trigger": "real_escape_string()\tmysqli", "contents": "real_escape_string(${1:escapestr})$0" },
        { "trigger": "real_query()\tmysqli", "contents": "real_query(${1:query})$0" },
        { "trigger": "reap_async_query()\tmysqli", "contents": "reap_async_query()" },
        { "trigger": "refresh()\tmysqli", "contents": "refresh(${1:options})$0" },
        { "trigger": "rollback()\tmysqli", "contents": "rollback()" },
        { "trigger": "rpl_query_type()\tmysqli(depr.)", "contents": "rpl_query_type(${1:query})$0" },
        { "trigger": "select_db()\tmysqli", "contents": "select_db(${1:dbname})$0" },
        { "trigger": "send_query()\tmysqli(depr.)", "contents": "send_query(${1:query})$0" },
        { "trigger": "set_charset()\tmysqli", "contents": "set_charset(${1:charset})$0" },
        { "trigger": "set_local_infile_default()\tmysqli", "contents": "set_local_infile_default()" },
        { "trigger": "set_local_infile_handler()\tmysqli", "contents": "set_local_infile_handler(${1:link}, ${2:read_func})$0" },
        { "trigger": "ssl_set()\tmysqli", "contents": "ssl_set(${1:key}, ${2:cert}, ${3:ca}, ${4:capath}, ${5:cipher})$0" },
        { "trigger": "stat()\tmysqli", "contents": "stat()" },
        { "trigger": "stmt_init()\tmysqli", "contents": "stmt_init()" },
        { "trigger": "store_result()\tmysqli", "contents": "store_result()" },
        { "trigger": "thread_safe()\tmysqli", "contents": "thread_safe()" },
        { "trigger": "use_result()\tmysqli", "contents": "use_result()" },
        "mysqli_driver",
        { "trigger": "embedded_server_end()\tmysqli_driver", "contents": "embedded_server_end()" },
        { "trigger": "embedded_server_start()\tmysqli_driver", "contents": "embedded_server_start(${1:start}, ${2:arguments}, ${3:groups})$0" },
        "mysqli_result",
        { "trigger": "close()\tmysqli_result", "contents": "close()" },
        { "trigger": "data_seek()\tmysqli_result", "contents": "data_seek(${1:offset})$0" },
        { "trigger": "fetch_all()\tmysqli_result", "contents": "fetch_all(${1:[resulttype]})$0" },
        { "trigger": "fetch_array()\tmysqli_result", "contents": "fetch_array(${1:[resulttype]})$0" },
        { "trigger": "fetch_assoc()\tmysqli_result", "contents": "fetch_assoc()" },
        { "trigger": "fetch_field()\tmysqli_result", "contents": "fetch_field()" },
        { "trigger": "fetch_field_direct()\tmysqli_result", "contents": "fetch_field_direct(${1:fieldnr})$0" },
        { "trigger": "fetch_fields()\tmysqli_result", "contents": "fetch_fields()" },
        { "trigger": "fetch_object()\tmysqli_result", "contents": "fetch_object(${1:[class_name]}${2:[, params]})$0" },
        { "trigger": "fetch_row()\tmysqli_result", "contents": "fetch_row()" },
        { "trigger": "field_seek()\tmysqli_result", "contents": "field_seek(${1:fieldnr})$0" },
        { "trigger": "free()\tmysqli_result", "contents": "free()" },
        { "trigger": "free_result()\tmysqli_result", "contents": "free_result()" },
        "mysqli_sql_exception",
        "mysqli_stmt",
        { "trigger": "attr_get()\tmysqli_stmt", "contents": "attr_get(${1:attr})$0" },
        { "trigger": "attr_set()\tmysqli_stmt", "contents": "attr_set(${1:attr}, ${2:mode})$0" },
        { "trigger": "bind_param()\tmysqli_stmt", "contents": "bind_param(${1:types}, ${2:vars})$0" },
        { "trigger": "bind_result()\tmysqli_stmt", "contents": "bind_result(${1:vars})$0" },
        { "trigger": "close()\tmysqli_stmt", "contents": "close()" },
        { "trigger": "data_seek()\tmysqli_stmt", "contents": "data_seek(${1:offset})$0" },
        { "trigger": "execute()\tmysqli_stmt", "contents": "execute()" },
        { "trigger": "fetch()\tmysqli_stmt", "contents": "fetch()" },
        { "trigger": "free_result()\tmysqli_stmt", "contents": "free_result()" },
        { "trigger": "get_result()\tmysqli_stmt", "contents": "get_result()" },
        { "trigger": "get_warnings()\tmysqli_stmt", "contents": "get_warnings($stmt)" },
        { "trigger": "more_results()\tmysqli_stmt", "contents": "more_results()" },
        { "trigger": "next_result()\tmysqli_stmt", "contents": "next_result()" },
        { "trigger": "prepare()\tmysqli_stmt", "contents": "prepare(${1:query})$0" },
        { "trigger": "reset()\tmysqli_stmt", "contents": "reset()" },
        { "trigger": "result_metadata()\tmysqli_stmt", "contents": "result_metadata()" },
        { "trigger": "send_long_data()\tmysqli_stmt", "contents": "send_long_data(${1:param_nr}, ${2:data})$0" },
        { "trigger": "store_result()\tmysqli_stmt", "contents": "store_result()" },
        "mysqli_warning",
        { "trigger": "next()\tmysqli_warning", "contents": "next()" },
        // Mysqli (improved) constants
        "MYSQLI_ASSOC",
        "MYSQLI_AUTO_INCREMENT_FLAG",
        "MYSQLI_BLOB_FLAG",
        "MYSQLI_BOTH",
        "MYSQLI_CLIENT_COMPRESS",
        "MYSQLI_CLIENT_IGNORE_SPACE",
        "MYSQLI_CLIENT_INTERACTIVE",
        "MYSQLI_CLIENT_MULTI_QUERIES",
        "MYSQLI_CLIENT_NO_SCHEMA",
        "MYSQLI_CLIENT_SSL",
        "MYSQLI_CURSOR_TYPE_FOR_UPDATE",
        "MYSQLI_CURSOR_TYPE_NO_CURSOR",
        "MYSQLI_CURSOR_TYPE_READ_ONLY",
        "MYSQLI_CURSOR_TYPE_SCROLLABLE",
        "MYSQLI_DATA_TRUNCATED",
        "MYSQLI_DEBUG_TRACE_ENABLED",
        "MYSQLI_ENUM_FLAG",
        "MYSQLI_GROUP_FLAG",
        "MYSQLI_INIT_COMMAND",
        "MYSQLI_MULTIPLE_KEY_FLAG",
        "MYSQLI_NEED_DATA",
        "MYSQLI_NO_DATA",
        "MYSQLI_NOT_NULL_FLAG",
        "MYSQLI_NUM",
        "MYSQLI_NUM_FLAG",
        "MYSQLI_OPT_CONNECT_TIMEOUT",
        "MYSQLI_OPT_LOCAL_INFILE",
        "MYSQLI_PART_KEY_FLAG",
        "MYSQLI_PRI_KEY_FLAG",
        "MYSQLI_READ_DEFAULT_FILE",
        "MYSQLI_READ_DEFAULT_GROUP",
        "MYSQLI_REFRESH_GRANT",
        "MYSQLI_REFRESH_HOSTS",
        "MYSQLI_REFRESH_LOG",
        "MYSQLI_REFRESH_MASTER",
        "MYSQLI_REFRESH_SLAVE",
        "MYSQLI_REFRESH_STATUS",
        "MYSQLI_REFRESH_TABLES",
        "MYSQLI_REFRESH_THREADS",
        "MYSQLI_REPORT_ALL",
        "MYSQLI_REPORT_ERROR",
        "MYSQLI_REPORT_INDEX",
        "MYSQLI_REPORT_OFF",
        "MYSQLI_REPORT_STRICT",
        "MYSQLI_SERVER_QUERY_NO_GOOD_INDEX_USED",
        "MYSQLI_SERVER_QUERY_NO_INDEX_USED",
        "MYSQLI_SET_CHARSET_NAME",
        "MYSQLI_SET_FLAG",
        "MYSQLI_STMT_ATTR_CURSOR_TYPE",
        "MYSQLI_STMT_ATTR_PREFETCH_ROWS",
        "MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH",
        "MYSQLI_STORE_RESULT",
        "MYSQLI_TIMESTAMP_FLAG",
        "MYSQLI_TYPE_BIT",
        "MYSQLI_TYPE_BLOB",
        "MYSQLI_TYPE_CHAR",
        "MYSQLI_TYPE_DATE",
        "MYSQLI_TYPE_DATETIME",
        "MYSQLI_TYPE_DECIMAL",
        "MYSQLI_TYPE_DOUBLE",
        "MYSQLI_TYPE_ENUM",
        "MYSQLI_TYPE_FLOAT",
        "MYSQLI_TYPE_GEOMETRY",
        "MYSQLI_TYPE_INT24",
        "MYSQLI_TYPE_INTERVAL",
        "MYSQLI_TYPE_LONG",
        "MYSQLI_TYPE_LONG_BLOB",
        "MYSQLI_TYPE_LONGLONG",
        "MYSQLI_TYPE_MEDIUM_BLOB",
        "MYSQLI_TYPE_NEWDATE",
        "MYSQLI_TYPE_NEWDECIMAL",
        "MYSQLI_TYPE_NULL",
        "MYSQLI_TYPE_SET",
        "MYSQLI_TYPE_SHORT",
        "MYSQLI_TYPE_STRING",
        "MYSQLI_TYPE_TIME",
        "MYSQLI_TYPE_TIMESTAMP",
        "MYSQLI_TYPE_TINY",
        "MYSQLI_TYPE_TINY_BLOB",
        "MYSQLI_TYPE_VAR_STRING",
        "MYSQLI_TYPE_YEAR",
        "MYSQLI_UNIQUE_KEY_FLAG",
        "MYSQLI_UNSIGNED_FLAG",
        "MYSQLI_USE_RESULT",
        "MYSQLI_ZEROFILL_FLAG",
        // Mysqli (improved) procedural
        { "trigger": "mysqli_affected_rows()", "contents": "mysqli_affected_rows(${1:link})$0" },
        { "trigger": "mysqli_autocommit()", "contents": "mysqli_autocommit(${1:link}, ${2:mode})$0" },
        { "trigger": "mysqli_bind_param()\tdeprecated ", "contents": "mysqli_bind_param(${1:stmt}, ${2:types}${3:[, vars]})$0" },
        { "trigger": "mysqli_bind_result()\tdeprecated ", "contents": "mysqli_bind_result(${1:stmt}, ${2:vars})$0" },
        { "trigger": "mysqli_change_user()", "contents": "mysqli_change_user(${1:link}, ${2:user}, ${3:password}, ${4:database})$0" },
        { "trigger": "mysqli_character_set_name()", "contents": "mysqli_character_set_name(${1:link})$0" },
        { "trigger": "mysqli_client_encoding()", "contents": "mysqli_client_encoding(${1:link})$0" },
        { "trigger": "mysqli_close()", "contents": "mysqli_close(${1:link})$0" },
        { "trigger": "mysqli_commit()", "contents": "mysqli_commit(${1:link})$0" },
        { "trigger": "mysqli_connect()", "contents": "mysqli_connect($1)$0" },
        { "trigger": "mysqli_connect(full)", "contents": "mysqli_connect(${1:[host]}${2:[, username]}${3:[, passwd]}${4:[, dbname]}${5:[, port]}${6:[, socket]})$0" },
        { "trigger": "mysqli_connect_errno()", "contents": "mysqli_connect_errno()" },
        { "trigger": "mysqli_connect_error()", "contents": "mysqli_connect_error()" },
        { "trigger": "mysqli_data_seek()", "contents": "mysqli_data_seek(${1:result}, ${2:offset})$0" },
        { "trigger": "mysqli_debug()", "contents": "mysqli_debug(${1:message})$0" },
        { "trigger": "mysqli_disable_reads_from_master()\tdeprecated ", "contents": "mysqli_disable_reads_from_master(${1:link})$0" },
        { "trigger": "mysqli_disable_rpl_parse()\tdeprecated ", "contents": "mysqli_disable_rpl_parse(${1:link})$0" },
        { "trigger": "mysqli_dump_debug_info()", "contents": "mysqli_dump_debug_info(${1:link})$0" },
        { "trigger": "mysqli_enable_reads_from_master()\tdeprecated ", "contents": "mysqli_enable_reads_from_master(${1:link})$0" },
        { "trigger": "mysqli_enable_rpl_parse()", "contents": "mysqli_enable_rpl_parse(${1:link})$0" },
        { "trigger": "mysqli_errno()", "contents": "mysqli_errno(${1:link})$0" },
        { "trigger": "mysqli_error()", "contents": "mysqli_error(${1:link})$0" },
        { "trigger": "mysqli_error_list()", "contents": "mysqli_error_list(${1:link})$0" },
        { "trigger": "mysqli_escape_string()", "contents": "mysqli_escape_string(${1:[link, ]}${2:escapestr})$0" },
        { "trigger": "mysqli_execute()\tdeprecated ", "contents": "mysqli_execute(${1:stmt})$0" },
        { "trigger": "mysqli_fetch()\tdeprecated ", "contents": "mysqli_fetch(${1:stmt})$0" },
        { "trigger": "mysqli_fetch_array()", "contents": "mysqli_fetch_array(${1:result}${2:[, resulttype]})$0" },
        { "trigger": "mysqli_fetch_assoc()", "contents": "mysqli_fetch_assoc(${1:result})$0" },
        { "trigger": "mysqli_fetch_object()", "contents": "mysqli_fetch_object(${1:result}${2:[, class_name]}${3:[, params]})$0" },
        { "trigger": "mysqli_fetch_row()", "contents": "mysqli_fetch_row(${1:result})$0" },
        { "trigger": "mysqli_field_count()", "contents": "mysqli_field_count(${1:link})$0" },
        { "trigger": "mysqli_free_result()", "contents": "mysqli_free_result(${1:result})$0" },
        { "trigger": "mysqli_get_cache_stats()", "contents": "mysqli_get_cache_stats()" },
        { "trigger": "mysqli_get_charset()", "contents": "mysqli_get_charset(${1:link})$0" },
        { "trigger": "mysqli_get_client_info()", "contents": "mysqli_get_client_info(${1:link})$0" },
        { "trigger": "mysqli_get_client_stats()", "contents": "mysqli_get_client_stats()" },
        { "trigger": "mysqli_get_client_version()", "contents": "mysqli_get_client_version(${1:link})$0" },
        { "trigger": "mysqli_get_connection_stats()", "contents": "mysqli_get_connection_stats(${1:link})$0" },
        { "trigger": "mysqli_get_host_info()", "contents": "mysqli_get_host_info(${1:link})$0" },
        { "trigger": "mysqli_get_metadata()\tdeprecated ", "contents": "mysqli_get_metadata(${1:stmt})$0" },
        { "trigger": "mysqli_get_proto_info()", "contents": "mysqli_get_proto_info(${1:link})$0" },
        { "trigger": "mysqli_get_server_info()", "contents": "mysqli_get_server_info(${1:link})$0" },
        { "trigger": "mysqli_get_server_version()", "contents": "mysqli_get_server_version(${1:link})$0" },
        { "trigger": "mysqli_get_warnings()", "contents": "mysqli_get_warnings(${1:link})$0" },
        { "trigger": "mysqli_info()", "contents": "mysqli_info(${1:link})$0" },
        { "trigger": "mysqli_init()", "contents": "mysqli_init()" },
        { "trigger": "mysqli_insert_id()", "contents": "mysqli_insert_id(${1:link})$0" },
        { "trigger": "mysqli_kill()", "contents": "mysqli_kill(${1:link}, ${2:processid})$0" },
        { "trigger": "mysqli_master_query()\tdeprecated ", "contents": "mysqli_master_query(${1:link}, ${2:query})$0" },
        { "trigger": "mysqli_more_results()", "contents": "mysqli_more_results(${1:link})$0" },
        { "trigger": "mysqli_multi_query()", "contents": "mysqli_multi_query(${1:link}, ${2:query})$0" },
        { "trigger": "mysqli_next_result()", "contents": "mysqli_next_result(${1:link})$0" },
        { "trigger": "mysqli_num_rows()", "contents": "mysqli_num_rows(${1:result})$0" },
        { "trigger": "mysqli_options()", "contents": "mysqli_options(${1:link}, ${2:option}, ${3:value})$0" },
        { "trigger": "mysqli_param_count()\tdeprecated ", "contents": "mysqli_param_count(${1:stmt})$0" },
        { "trigger": "mysqli_ping()", "contents": "mysqli_ping(${1:link})$0" },
        { "trigger": "mysqli_poll()", "contents": "mysqli_poll(${1:read}, ${2:error}, ${3:reject}, ${4:sec}${5:[, usec]})$0" },
        { "trigger": "mysqli_prepare()", "contents": "mysqli_prepare(${1:link}, ${2:query})$0" },
        { "trigger": "mysqli_query()", "contents": "mysqli_query(${1:link}, ${2:query}${3:[, resultmode]})$0" },
        { "trigger": "mysqli_real_connect()", "contents": "mysqli_real_connect($1)$0" },
        { "trigger": "mysqli_real_connect(full)", "contents": "mysqli_real_connect(${1:link}${2:[, host]}${3:[, username]}${4:[, passwd]}${5:[, dbname]}${6:[, port]}${7:[, socket]}${8:[, flags]})$0" },
        { "trigger": "mysqli_real_escape_string()", "contents": "mysqli_real_escape_string(${1:link}, ${2:escapestr})$0" },
        { "trigger": "mysqli_real_query()", "contents": "mysqli_real_query(${1:link}, ${2:query})$0" },
        { "trigger": "mysqli_reap_async_query()", "contents": "mysqli_reap_async_query(${1:link})$0" },
        { "trigger": "mysqli_refresh()", "contents": "mysqli_refresh(${1:link}, ${2:options})$0" },
        { "trigger": "mysqli_report()", "contents": "mysqli_report(${1:flags})$0" },
        { "trigger": "mysqli_rollback()", "contents": "mysqli_rollback(${1:link})$0" },
        { "trigger": "mysqli_rpl_parse_enabled()\tdeprecated ", "contents": "mysqli_rpl_parse_enabled(${1:link})$0" },
        { "trigger": "mysqli_rpl_probe()", "contents": "mysqli_rpl_probe(${1:link})$0" },
        { "trigger": "mysqli_rpl_query_type()\tdeprecated ", "contents": "mysqli_rpl_query_type(${1:link}, ${2:query})$0" },
        { "trigger": "mysqli_select_db()", "contents": "mysqli_select_db(${1:link}, ${2:dbname})$0" },
        { "trigger": "mysqli_send_long_data()\tdeprecated ", "contents": "mysqli_send_long_data(${1:stmt}, ${2:param_nr}, ${3:data})$0" },
        { "trigger": "mysqli_send_query()\tdeprecated ", "contents": "mysqli_send_query(${1:link}, ${2:query})$0" },
        { "trigger": "mysqli_set_opt()", "contents": "mysqli_set_opt(${1:link}, ${2:option}, ${3:value})$0" },
        { "trigger": "mysqli_set_charset()", "contents": "mysqli_set_charset(${1:link}, ${2:charset})$0" },
        { "trigger": "mysqli_set_local_infile_default()", "contents": "mysqli_set_local_infile_default(${1:link})$0" },
        { "trigger": "mysqli_set_local_infile_handler()", "contents": "mysqli_set_local_infile_handler(${1:link}, ${2:read_func})$0" },
        { "trigger": "mysqli_slave_query()\tdeprecated ", "contents": "mysqli_slave_query(${1:link}, ${2:query})$0" },
        { "trigger": "mysqli_sqlstate()", "contents": "mysqli_sqlstate(${1:link})$0" },
        { "trigger": "mysqli_ssl_set()", "contents": "mysqli_ssl_set(${1:link}, ${2:key}, ${3:cert}, ${4:ca}, ${5:capath}, ${6:cipher})$0" },
        { "trigger": "mysqli_stat()", "contents": "mysqli_stat(${1:link})$0" },
        { "trigger": "mysqli_stmt_affected_rows()", "contents": "mysqli_stmt_affected_rows(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_attr_get()", "contents": "mysqli_stmt_attr_get(${1:stmt}, ${2:attr})$0" },
        { "trigger": "mysqli_stmt_attr_set()", "contents": "mysqli_stmt_attr_set(${1:stmt}, ${2:attr}, ${3:mode})$0" },
        { "trigger": "mysqli_stmt_bind_param()", "contents": "mysqli_stmt_bind_param(${1:stmt}, ${2:types}, ${3:vars})$0" },
        { "trigger": "mysqli_stmt_bind_result()", "contents": "mysqli_stmt_bind_result(${1:stmt}, ${2:vars})$0" },
        { "trigger": "mysqli_stmt_close()", "contents": "mysqli_stmt_close(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_data_seek()", "contents": "mysqli_stmt_data_seek(${1:stmt}, ${2:offset})$0" },
        { "trigger": "mysqli_stmt_errno()", "contents": "mysqli_stmt_errno(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_error()", "contents": "mysqli_stmt_error(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_error_list()", "contents": "mysqli_stmt_error_list(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_execute()", "contents": "mysqli_stmt_execute(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_fetch()", "contents": "mysqli_stmt_fetch(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_field_count()", "contents": "mysqli_stmt_field_count(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_free_result()", "contents": "mysqli_stmt_free_result(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_get_result()", "contents": "mysqli_stmt_get_result(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_get_warnings()", "contents": "mysqli_stmt_get_warnings(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_init()", "contents": "mysqli_stmt_init(${1:link})$0" },
        { "trigger": "mysqli_stmt_insert_id()", "contents": "mysqli_stmt_insert_id(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_more_results()", "contents": "mysqli_stmt_more_results(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_next_result()", "contents": "mysqli_stmt_next_result(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_num_rows()", "contents": "mysqli_stmt_num_rows(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_param_count()", "contents": "mysqli_stmt_param_count(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_prepare()", "contents": "mysqli_stmt_prepare(${1:stmt}, ${2:query})$0" },
        { "trigger": "mysqli_stmt_reset()", "contents": "mysqli_stmt_reset(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_result_metadata()", "contents": "mysqli_stmt_result_metadata(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_send_long_data()", "contents": "mysqli_stmt_send_long_data(${1:stmt}, ${2:param_nr}, ${3:data})$0" },
        { "trigger": "mysqli_stmt_sqlstate()", "contents": "mysqli_stmt_sqlstate(${1:stmt})$0" },
        { "trigger": "mysqli_stmt_store_result()", "contents": "mysqli_stmt_store_result(${1:stmt})$0" },
        { "trigger": "mysqli_store_result()", "contents": "mysqli_store_result(${1:link})$0" },
        { "trigger": "mysqli_thread_id()", "contents": "mysqli_thread_id(${1:link})$0" },
        { "trigger": "mysqli_thread_safe()", "contents": "mysqli_thread_safe()" },
        { "trigger": "mysqli_use_result()", "contents": "mysqli_use_result(${1:link})$0" },
        { "trigger": "mysqli_warning_count()", "contents": "mysqli_warning_count(${1:link})$0" },
        "MysqlndUhConnection",
        "MysqlndUhPreparedStatement",

        // MySQL Native Driver (procedural)
        { "trigger": "mysqlnd_ms_get_last_gtid()", "contents": "mysqlnd_ms_get_last_gtid(${1:connection})$0" },
        { "trigger": "mysqlnd_ms_get_last_used_connection()", "contents": "mysqlnd_ms_get_last_used_connection(${1:connection})$0" },
        { "trigger": "mysqlnd_ms_get_stats()", "contents": "mysqlnd_ms_get_stats()" },
        { "trigger": "mysqlnd_ms_match_wild()", "contents": "mysqlnd_ms_match_wild(${1:table_name}, ${2:wildcard})$0" },
        { "trigger": "mysqlnd_ms_query_is_select()", "contents": "mysqlnd_ms_query_is_select(${1:query})$0" },
        { "trigger": "mysqlnd_ms_set_qos()", "contents": "mysqlnd_ms_set_qos(${1:connection}, ${2:service_level}${3:[, service_level_option]}${4:[, option_value]})$0" },
        { "trigger": "mysqlnd_ms_set_user_pick_server()", "contents": "mysqlnd_ms_set_user_pick_server(${1:function})$0" },
        { "trigger": "mysqlnd_qc_change_handler()", "contents": "mysqlnd_qc_change_handler(${1:handler})$0" },
        { "trigger": "mysqlnd_qc_clear_cache()", "contents": "mysqlnd_qc_clear_cache()" },
        { "trigger": "mysqlnd_qc_get_available_handlers()", "contents": "mysqlnd_qc_get_available_handlers()" },
        { "trigger": "mysqlnd_qc_get_cache_info()", "contents": "mysqlnd_qc_get_cache_info()" },
        { "trigger": "mysqlnd_qc_get_core_stats()", "contents": "mysqlnd_qc_get_core_stats()" },
        { "trigger": "mysqlnd_qc_get_available_handler()", "contents": "mysqlnd_qc_get_available_handler()" },
        { "trigger": "mysqlnd_qc_get_normalized_query_trace_log()", "contents": "mysqlnd_qc_get_normalized_query_trace_log()" },
        { "trigger": "mysqlnd_qc_get_query_trace_log()", "contents": "mysqlnd_qc_get_query_trace_log()" },
        { "trigger": "mysqlnd_qc_set_cache_condition()", "contents": "mysqlnd_qc_set_cache_condition(${1:condition_type}, ${2:condition}, ${3:condition_option})$0" },
        { "trigger": "mysqlnd_qc_set_is_select()", "contents": "mysqlnd_qc_set_is_select(${1:callback})$0" },
        { "trigger": "mysqlnd_qc_set_storage_handler()", "contents": "mysqlnd_qc_set_storage_handler(${1:handler})$0" },
        { "trigger": "mysqlnd_qc_set_user_handlers()", "contents": "mysqlnd_qc_set_user_handlers(${1:get_hash}, ${2:find_query_in_cache}, ${3:return_to_cache}, ${4:add_query_to_cache_if_not_exists}, ${5:query_is_select}, ${6:update_query_run_time_stats}, ${7:get_stats}, ${8:clear_cache})$0" },
        { "trigger": "mysqlnd_uh_convert_to_mysqlnd()", "contents": "mysqlnd_uh_convert_to_mysqlnd(${1:mysql_connection})$0" },
        { "trigger": "mysqlnd_uh_set_connection_proxy()", "contents": "mysqlnd_uh_set_connection_proxy(${1:connection_proxy}${2:[, mysqli_connection]})$0" },
        { "trigger": "mysqlnd_uh_set_statement_proxy()", "contents": "mysqlnd_uh_set_statement_proxy(${1:statement_proxy})$0" },

        { "trigger": "natcasesort()", "contents": "natcasesort(${1:array})$0" },
        { "trigger": "natsort()", "contents": "natsort(${1:array})$0" },
        /* Ncurses (new curses) - moved to PECL as of 5.3.0
        { "trigger": "ncurses_addch()", "contents": "ncurses_addch(${1:ch})$0" },
        { "trigger": "ncurses_addchnstr()", "contents": "ncurses_addchnstr(${1:s}, ${2:n})$0" },
        { "trigger": "ncurses_addchstr()", "contents": "ncurses_addchstr(${1:s})$0" },
        { "trigger": "ncurses_addnstr()", "contents": "ncurses_addnstr(${1:s}, ${2:n})$0" },
        { "trigger": "ncurses_addstr()", "contents": "ncurses_addstr(${1:text})$0" },
        { "trigger": "ncurses_assume_default_colors()", "contents": "ncurses_assume_default_colors(${1:fg}, ${2:bg})$0" },
        { "trigger": "ncurses_attroff()", "contents": "ncurses_attroff(${1:attributes})$0" },
        { "trigger": "ncurses_attron()", "contents": "ncurses_attron(${1:attributes})$0" },
        { "trigger": "ncurses_attrset()", "contents": "ncurses_attrset(${1:attributes})$0" },
        { "trigger": "ncurses_baudrate()", "contents": "ncurses_baudrate()" },
        { "trigger": "ncurses_beep()", "contents": "ncurses_beep()" },
        { "trigger": "ncurses_bkgd()", "contents": "ncurses_bkgd(${1:attrchar})$0" },
        { "trigger": "ncurses_bkgdset()", "contents": "ncurses_bkgdset(${1:attrchar})$0" },
        { "trigger": "ncurses_border()", "contents": "ncurses_border(${1:left}, ${2:right}, ${3:top}, ${4:bottom}, ${5:tl_corner}, ${6:tr_corner}, ${7:bl_corner}, ${8:br_corner})$0" },
        { "trigger": "ncurses_bottom_panel()", "contents": "ncurses_bottom_panel(${1:panel})$0" },
        { "trigger": "ncurses_can_change_color()", "contents": "ncurses_can_change_color()" },
        { "trigger": "ncurses_cbreak()", "contents": "ncurses_cbreak()" },
        { "trigger": "ncurses_clear()", "contents": "ncurses_clear()" },
        { "trigger": "ncurses_clrtobot()", "contents": "ncurses_clrtobot()" },
        { "trigger": "ncurses_clrtoeol()", "contents": "ncurses_clrtoeol()" },
        { "trigger": "ncurses_color_content()", "contents": "ncurses_color_content(${1:color}, ${2:r}, ${3:g}, ${4:b})$0" },
        { "trigger": "ncurses_color_set()", "contents": "ncurses_color_set(${1:pair})$0" },
        { "trigger": "ncurses_curs_set()", "contents": "ncurses_curs_set(${1:visibility})$0" },
        { "trigger": "ncurses_def_prog_mode()", "contents": "ncurses_def_prog_mode()" },
        { "trigger": "ncurses_def_shell_mode()", "contents": "ncurses_def_shell_mode()" },
        { "trigger": "ncurses_define_key()", "contents": "ncurses_define_key(${1:definition}, ${2:keycode})$0" },
        { "trigger": "ncurses_del_panel()", "contents": "ncurses_del_panel(${1:panel})$0" },
        { "trigger": "ncurses_delay_output()", "contents": "ncurses_delay_output(${1:milliseconds})$0" },
        { "trigger": "ncurses_delch()", "contents": "ncurses_delch()" },
        { "trigger": "ncurses_deleteln()", "contents": "ncurses_deleteln()" },
        { "trigger": "ncurses_delwin()", "contents": "ncurses_delwin(${1:window})$0" },
        { "trigger": "ncurses_doupdate()", "contents": "ncurses_doupdate()" },
        { "trigger": "ncurses_echo()", "contents": "ncurses_echo()" },
        { "trigger": "ncurses_echochar()", "contents": "ncurses_echochar(${1:character})$0" },
        { "trigger": "ncurses_end()", "contents": "ncurses_end()" },
        { "trigger": "ncurses_erase()", "contents": "ncurses_erase()" },
        { "trigger": "ncurses_erasechar()", "contents": "ncurses_erasechar()" },
        { "trigger": "ncurses_filter()", "contents": "ncurses_filter()" },
        { "trigger": "ncurses_flash()", "contents": "ncurses_flash()" },
        { "trigger": "ncurses_flushinp()", "contents": "ncurses_flushinp()" },
        { "trigger": "ncurses_getch()", "contents": "ncurses_getch()" },
        { "trigger": "ncurses_getmaxyx()", "contents": "ncurses_getmaxyx(${1:window}, ${2:y}, ${3:x})$0" },
        { "trigger": "ncurses_getmouse()", "contents": "ncurses_getmouse(${1:mevent})$0" },
        { "trigger": "ncurses_getyx()", "contents": "ncurses_getyx(${1:window}, ${2:y}, ${3:x})$0" },
        { "trigger": "ncurses_halfdelay()", "contents": "ncurses_halfdelay(${1:tenth})$0" },
        { "trigger": "ncurses_has_colors()", "contents": "ncurses_has_colors()" },
        { "trigger": "ncurses_has_ic()", "contents": "ncurses_has_ic()" },
        { "trigger": "ncurses_has_il()", "contents": "ncurses_has_il()" },
        { "trigger": "ncurses_has_key()", "contents": "ncurses_has_key(${1:keycode})$0" },
        { "trigger": "ncurses_hide_panel()", "contents": "ncurses_hide_panel(${1:panel})$0" },
        { "trigger": "ncurses_hline()", "contents": "ncurses_hline(${1:charattr}, ${2:n})$0" },
        { "trigger": "ncurses_inch()", "contents": "ncurses_inch()" },
        { "trigger": "ncurses_init()", "contents": "ncurses_init()" },
        { "trigger": "ncurses_init_color()", "contents": "ncurses_init_color(${1:color}, ${2:r}, ${3:g}, ${4:b})$0" },
        { "trigger": "ncurses_init_pair()", "contents": "ncurses_init_pair(${1:pair}, ${2:fg}, ${3:bg})$0" },
        { "trigger": "ncurses_insch()", "contents": "ncurses_insch(${1:character})$0" },
        { "trigger": "ncurses_insdelln()", "contents": "ncurses_insdelln(${1:count})$0" },
        { "trigger": "ncurses_insertln()", "contents": "ncurses_insertln()" },
        { "trigger": "ncurses_insstr()", "contents": "ncurses_insstr(${1:text})$0" },
        { "trigger": "ncurses_instr()", "contents": "ncurses_instr(${1:buffer})$0" },
        { "trigger": "ncurses_isendwin()", "contents": "ncurses_isendwin()" },
        { "trigger": "ncurses_keyok()", "contents": "ncurses_keyok(${1:keycode}, ${2:enable})$0" },
        { "trigger": "ncurses_keypad()", "contents": "ncurses_keypad(${1:window}, ${2:bf})$0" },
        { "trigger": "ncurses_killchar()", "contents": "ncurses_killchar()" },
        { "trigger": "ncurses_longname()", "contents": "ncurses_longname()" },
        { "trigger": "ncurses_meta()", "contents": "ncurses_meta(${1:window}, ${2:8bit})$0" },
        { "trigger": "ncurses_mouse_trafo()", "contents": "ncurses_mouse_trafo(${1:y}, ${2:x}, ${3:toscreen})$0" },
        { "trigger": "ncurses_mouseinterval()", "contents": "ncurses_mouseinterval(${1:milliseconds})$0" },
        { "trigger": "ncurses_mousemask()", "contents": "ncurses_mousemask(${1:newmask}, ${2:oldmask})$0" },
        { "trigger": "ncurses_move()", "contents": "ncurses_move(${1:y}, ${2:x})$0" },
        { "trigger": "ncurses_move_panel()", "contents": "ncurses_move_panel(${1:panel}, ${2:startx}, ${3:starty})$0" },
        { "trigger": "ncurses_mvaddch()", "contents": "ncurses_mvaddch(${1:y}, ${2:x}, ${3:c})$0" },
        { "trigger": "ncurses_mvaddchnstr()", "contents": "ncurses_mvaddchnstr(${1:y}, ${2:x}, ${3:s}, ${4:n})$0" },
        { "trigger": "ncurses_mvaddchstr()", "contents": "ncurses_mvaddchstr(${1:y}, ${2:x}, ${3:s})$0" },
        { "trigger": "ncurses_mvaddnstr()", "contents": "ncurses_mvaddnstr(${1:y}, ${2:x}, ${3:s}, ${4:n})$0" },
        { "trigger": "ncurses_mvaddstr()", "contents": "ncurses_mvaddstr(${1:y}, ${2:x}, ${3:s})$0" },
        { "trigger": "ncurses_mvcur()", "contents": "ncurses_mvcur(${1:old_y}, ${2:old_x}, ${3:new_y}, ${4:new_x})$0" },
        { "trigger": "ncurses_mvdelch()", "contents": "ncurses_mvdelch(${1:y}, ${2:x})$0" },
        { "trigger": "ncurses_mvgetch()", "contents": "ncurses_mvgetch(${1:y}, ${2:x})$0" },
        { "trigger": "ncurses_mvhline()", "contents": "ncurses_mvhline(${1:y}, ${2:x}, ${3:attrchar}, ${4:n})$0" },
        { "trigger": "ncurses_mvinch()", "contents": "ncurses_mvinch(${1:y}, ${2:x})$0" },
        { "trigger": "ncurses_mvvline()", "contents": "ncurses_mvvline(${1:y}, ${2:x}, ${3:attrchar}, ${4:n})$0" },
        { "trigger": "ncurses_mvwaddstr()", "contents": "ncurses_mvwaddstr(${1:window}, ${2:y}, ${3:x}, ${4:text})$0" },
        { "trigger": "ncurses_napms()", "contents": "ncurses_napms(${1:milliseconds})$0" },
        { "trigger": "ncurses_new_panel()", "contents": "ncurses_new_panel(${1:window})$0" },
        { "trigger": "ncurses_newpad()", "contents": "ncurses_newpad(${1:rows}, ${2:cols})$0" },
        { "trigger": "ncurses_newwin()", "contents": "ncurses_newwin(${1:rows}, ${2:cols}, ${3:y}, ${4:x})$0" },
        { "trigger": "ncurses_nl()", "contents": "ncurses_nl()" },
        { "trigger": "ncurses_nocbreak()", "contents": "ncurses_nocbreak()" },
        { "trigger": "ncurses_noecho()", "contents": "ncurses_noecho()" },
        { "trigger": "ncurses_nonl()", "contents": "ncurses_nonl()" },
        { "trigger": "ncurses_noqiflush()", "contents": "ncurses_noqiflush()" },
        { "trigger": "ncurses_noraw()", "contents": "ncurses_noraw()" },
        { "trigger": "ncurses_pair_content()", "contents": "ncurses_pair_content(${1:pair}, ${2:f}, ${3:b})$0" },
        { "trigger": "ncurses_panel_above()", "contents": "ncurses_panel_above(${1:panel})$0" },
        { "trigger": "ncurses_panel_below()", "contents": "ncurses_panel_below(${1:panel})$0" },
        { "trigger": "ncurses_panel_window()", "contents": "ncurses_panel_window(${1:panel})$0" },
        { "trigger": "ncurses_pnoutrefresh()", "contents": "ncurses_pnoutrefresh(${1:pad}, ${2:pminrow}, ${3:pmincol}, ${4:sminrow}, ${5:smincol}, ${6:smaxrow}, ${7:smaxcol})$0" },
        { "trigger": "ncurses_prefresh()", "contents": "ncurses_prefresh(${1:pad}, ${2:pminrow}, ${3:pmincol}, ${4:sminrow}, ${5:smincol}, ${6:smaxrow}, ${7:smaxcol})$0" },
        { "trigger": "ncurses_putp()", "contents": "ncurses_putp(${1:text})$0" },
        { "trigger": "ncurses_qiflush()", "contents": "ncurses_qiflush()" },
        { "trigger": "ncurses_raw()", "contents": "ncurses_raw()" },
        { "trigger": "ncurses_refresh()", "contents": "ncurses_refresh(${1:ch})$0" },
        { "trigger": "ncurses_replace_panel()", "contents": "ncurses_replace_panel(${1:panel}, ${2:window})$0" },
        { "trigger": "ncurses_reset_prog_mode()", "contents": "ncurses_reset_prog_mode()" },
        { "trigger": "ncurses_reset_shell_mode()", "contents": "ncurses_reset_shell_mode()" },
        { "trigger": "ncurses_resetty()", "contents": "ncurses_resetty()" },
        { "trigger": "ncurses_savetty()", "contents": "ncurses_savetty()" },
        { "trigger": "ncurses_scr_dump()", "contents": "ncurses_scr_dump(${1:filename})$0" },
        { "trigger": "ncurses_scr_init()", "contents": "ncurses_scr_init(${1:filename})$0" },
        { "trigger": "ncurses_scr_restore()", "contents": "ncurses_scr_restore(${1:filename})$0" },
        { "trigger": "ncurses_scr_set()", "contents": "ncurses_scr_set(${1:filename})$0" },
        { "trigger": "ncurses_scrl()", "contents": "ncurses_scrl(${1:count})$0" },
        { "trigger": "ncurses_show_panel()", "contents": "ncurses_show_panel(${1:panel})$0" },
        { "trigger": "ncurses_slk_attr()", "contents": "ncurses_slk_attr()" },
        { "trigger": "ncurses_slk_attroff()", "contents": "ncurses_slk_attroff(${1:intarg})$0" },
        { "trigger": "ncurses_slk_attron()", "contents": "ncurses_slk_attron(${1:intarg})$0" },
        { "trigger": "ncurses_slk_attrset()", "contents": "ncurses_slk_attrset(${1:intarg})$0" },
        { "trigger": "ncurses_slk_clear()", "contents": "ncurses_slk_clear()" },
        { "trigger": "ncurses_slk_color()", "contents": "ncurses_slk_color(${1:intarg})$0" },
        { "trigger": "ncurses_slk_init()", "contents": "ncurses_slk_init(${1:format})$0" },
        { "trigger": "ncurses_slk_noutrefresh()", "contents": "ncurses_slk_noutrefresh()" },
        { "trigger": "ncurses_slk_refresh()", "contents": "ncurses_slk_refresh()" },
        { "trigger": "ncurses_slk_restore()", "contents": "ncurses_slk_restore()" },
        { "trigger": "ncurses_slk_set()", "contents": "ncurses_slk_set(${1:labelnr}, ${2:label}, ${3:format})$0" },
        { "trigger": "ncurses_slk_touch()", "contents": "ncurses_slk_touch()" },
        { "trigger": "ncurses_standend()", "contents": "ncurses_standend()" },
        { "trigger": "ncurses_standout()", "contents": "ncurses_standout()" },
        { "trigger": "ncurses_start_color()", "contents": "ncurses_start_color()" },
        { "trigger": "ncurses_termattrs()", "contents": "ncurses_termattrs()" },
        { "trigger": "ncurses_termname()", "contents": "ncurses_termname()" },
        { "trigger": "ncurses_timeout()", "contents": "ncurses_timeout(${1:millisec})$0" },
        { "trigger": "ncurses_top_panel()", "contents": "ncurses_top_panel(${1:panel})$0" },
        { "trigger": "ncurses_typeahead()", "contents": "ncurses_typeahead(${1:fd})$0" },
        { "trigger": "ncurses_ungetch()", "contents": "ncurses_ungetch(${1:keycode})$0" },
        { "trigger": "ncurses_ungetmouse()", "contents": "ncurses_ungetmouse(${1:mevent})$0" },
        { "trigger": "ncurses_update_panels()", "contents": "ncurses_update_panels()" },
        { "trigger": "ncurses_use_default_colors()", "contents": "ncurses_use_default_colors()" },
        { "trigger": "ncurses_use_env()", "contents": "ncurses_use_env(${1:flag})$0" },
        { "trigger": "ncurses_use_extended_names()", "contents": "ncurses_use_extended_names(${1:flag})$0" },
        { "trigger": "ncurses_vidattr()", "contents": "ncurses_vidattr(${1:intarg})$0" },
        { "trigger": "ncurses_vline()", "contents": "ncurses_vline(${1:charattr}, ${2:n})$0" },
        { "trigger": "ncurses_waddch()", "contents": "ncurses_waddch(${1:window}, ${2:ch})$0" },
        { "trigger": "ncurses_waddstr()", "contents": "ncurses_waddstr(${1:window}, ${2:str})$0" },
        { "trigger": "ncurses_wattroff()", "contents": "ncurses_wattroff(${1:window}, ${2:attrs})$0" },
        { "trigger": "ncurses_wattron()", "contents": "ncurses_wattron(${1:window}, ${2:attrs})$0" },
        { "trigger": "ncurses_wattrset()", "contents": "ncurses_wattrset(${1:window}, ${2:attrs})$0" },
        { "trigger": "ncurses_wborder()", "contents": "ncurses_wborder(${1:window}, ${2:left}, ${3:right}, ${4:top}, ${5:bottom}, ${6:tl_corner}, ${7:tr_corner}, ${8:bl_corner}, ${9:br_corner})$0" },
        { "trigger": "ncurses_wclear()", "contents": "ncurses_wclear(${1:window})$0" },
        { "trigger": "ncurses_wcolor_set()", "contents": "ncurses_wcolor_set(${1:window}, ${2:color_pair})$0" },
        { "trigger": "ncurses_werase()", "contents": "ncurses_werase(${1:window})$0" },
        { "trigger": "ncurses_wgetch()", "contents": "ncurses_wgetch(${1:window})$0" },
        { "trigger": "ncurses_whline()", "contents": "ncurses_whline(${1:window}, ${2:charattr}, ${3:n})$0" },
        { "trigger": "ncurses_wmouse_trafo()", "contents": "ncurses_wmouse_trafo(${1:window}, ${2:y}, ${3:x}, ${4:toscreen})$0" },
        { "trigger": "ncurses_wmove()", "contents": "ncurses_wmove(${1:window}, ${2:y}, ${3:x})$0" },
        { "trigger": "ncurses_wnoutrefresh()", "contents": "ncurses_wnoutrefresh(${1:window})$0" },
        { "trigger": "ncurses_wrefresh()", "contents": "ncurses_wrefresh(${1:window})$0" },
        { "trigger": "ncurses_wstandend()", "contents": "ncurses_wstandend(${1:window})$0" },
        { "trigger": "ncurses_wstandout()", "contents": "ncurses_wstandout(${1:window})$0" },
        { "trigger": "ncurses_wvline()", "contents": "ncurses_wvline(${1:window}, ${2:charattr}, ${3:n})$0" },
        */
        { "trigger": "newInstance()", "contents": "newInstance(${1:args})$0" },
        { "trigger": "newInstanceArgs()", "contents": "newInstanceArgs(${1:[args]})$0" },
        { "trigger": "newInstanceWithoutConstructor()", "contents": "newInstanceWithoutConstructor()" },
        /* RedHat Newt library - not available for Windows and not bundled with PHP
        { "trigger": "newt_bell()", "contents": "newt_bell()" },
        { "trigger": "newt_button()", "contents": "newt_button(${1:left}, ${2:top}, ${3:text})$0" },
        { "trigger": "newt_button_bar()", "contents": "newt_button_bar(${1:buttons})$0" },
        { "trigger": "newt_centered_window()", "contents": "newt_centered_window(${1:width}, ${2:height})$0" },
        { "trigger": "newt_checkbox()", "contents": "newt_checkbox(${1:left}, ${2:top}, ${3:text}, ${4:def_value})$0" },
        { "trigger": "newt_checkbox_get_value()", "contents": "newt_checkbox_get_value(${1:checkbox})$0" },
        { "trigger": "newt_checkbox_set_flags()", "contents": "newt_checkbox_set_flags(${1:checkbox}, ${2:flags}, ${3:sense})$0" },
        { "trigger": "newt_checkbox_set_value()", "contents": "newt_checkbox_set_value(${1:checkbox}, ${2:value})$0" },
        { "trigger": "newt_checkbox_tree()", "contents": "newt_checkbox_tree(${1:left}, ${2:top}, ${3:height})$0" },
        { "trigger": "newt_checkbox_tree_add_item()", "contents": "newt_checkbox_tree_add_item(${1:checkboxtree}, ${2:text}, ${3:data}, ${4:flags}, ${5:index})$0" },
        { "trigger": "newt_checkbox_tree_find_item()", "contents": "newt_checkbox_tree_find_item(${1:checkboxtree}, ${2:data})$0" },
        { "trigger": "newt_checkbox_tree_get_current()", "contents": "newt_checkbox_tree_get_current(${1:checkboxtree})$0" },
        { "trigger": "newt_checkbox_tree_get_entry_value()", "contents": "newt_checkbox_tree_get_entry_value(${1:checkboxtree}, ${2:data})$0" },
        { "trigger": "newt_checkbox_tree_get_multi_selection()", "contents": "newt_checkbox_tree_get_multi_selection(${1:checkboxtree}, ${2:seqnum})$0" },
        { "trigger": "newt_checkbox_tree_get_selection()", "contents": "newt_checkbox_tree_get_selection(${1:checkboxtree})$0" },
        { "trigger": "newt_checkbox_tree_multi()", "contents": "newt_checkbox_tree_multi(${1:left}, ${2:top}, ${3:height}, ${4:seq})$0" },
        { "trigger": "newt_checkbox_tree_set_current()", "contents": "newt_checkbox_tree_set_current(${1:checkboxtree}, ${2:data})$0" },
        { "trigger": "newt_checkbox_tree_set_entry()", "contents": "newt_checkbox_tree_set_entry(${1:checkboxtree}, ${2:data}, ${3:text})$0" },
        { "trigger": "newt_checkbox_tree_set_entry_value()", "contents": "newt_checkbox_tree_set_entry_value(${1:checkboxtree}, ${2:data}, ${3:value})$0" },
        { "trigger": "newt_checkbox_tree_set_width()", "contents": "newt_checkbox_tree_set_width(${1:checkbox_tree}, ${2:width})$0" },
        { "trigger": "newt_clear_key_buffer()", "contents": "newt_clear_key_buffer()" },
        { "trigger": "newt_cls()", "contents": "newt_cls()" },
        { "trigger": "newt_compact_button()", "contents": "newt_compact_button(${1:left}, ${2:top}, ${3:text})$0" },
        { "trigger": "newt_component_add_callback()", "contents": "newt_component_add_callback(${1:component}, ${2:func_name}, ${3:data})$0" },
        { "trigger": "newt_component_takes_focus()", "contents": "newt_component_takes_focus(${1:component}, ${2:takes_focus})$0" },
        { "trigger": "newt_create_grid()", "contents": "newt_create_grid(${1:cols}, ${2:rows})$0" },
        { "trigger": "newt_cursor_off()", "contents": "newt_cursor_off()" },
        { "trigger": "newt_cursor_on()", "contents": "newt_cursor_on()" },
        { "trigger": "newt_delay()", "contents": "newt_delay(${1:microseconds})$0" },
        { "trigger": "newt_draw_form()", "contents": "newt_draw_form(${1:form})$0" },
        { "trigger": "newt_draw_root_text()", "contents": "newt_draw_root_text(${1:left}, ${2:top}, ${3:text})$0" },
        { "trigger": "newt_entry()", "contents": "newt_entry(${1:left}, ${2:top}, ${3:width})$0" },
        { "trigger": "newt_entry_get_value()", "contents": "newt_entry_get_value(${1:entry})$0" },
        { "trigger": "newt_entry_set()", "contents": "newt_entry_set(${1:entry}, ${2:value})$0" },
        { "trigger": "newt_entry_set_filter()", "contents": "newt_entry_set_filter(${1:entry}, ${2:filter}, ${3:data})$0" },
        { "trigger": "newt_entry_set_flags()", "contents": "newt_entry_set_flags(${1:entry}, ${2:flags}, ${3:sense})$0" },
        { "trigger": "newt_finished()", "contents": "newt_finished()" },
        { "trigger": "newt_form()", "contents": "newt_form(${1:[vert_var]}${2:[, help]}${3:[, flags]})$0" },
        { "trigger": "newt_form_add_component()", "contents": "newt_form_add_component(${1:form}, ${2:component})$0" },
        { "trigger": "newt_form_add_components()", "contents": "newt_form_add_components(${1:form}, ${2:components})$0" },
        { "trigger": "newt_form_add_hot_key()", "contents": "newt_form_add_hot_key(${1:form}, ${2:key})$0" },
        { "trigger": "newt_form_destroy()", "contents": "newt_form_destroy(${1:form})$0" },
        { "trigger": "newt_form_get_current()", "contents": "newt_form_get_current(${1:form})$0" },
        { "trigger": "newt_form_run()", "contents": "newt_form_run(${1:form}, ${2:exit_struct})$0" },
        { "trigger": "newt_form_set_background()", "contents": "newt_form_set_background(${1:from}, ${2:background})$0" },
        { "trigger": "newt_form_set_height()", "contents": "newt_form_set_height(${1:form}, ${2:height})$0" },
        { "trigger": "newt_form_set_size()", "contents": "newt_form_set_size(${1:form})$0" },
        { "trigger": "newt_form_set_timer()", "contents": "newt_form_set_timer(${1:form}, ${2:milliseconds})$0" },
        { "trigger": "newt_form_set_width()", "contents": "newt_form_set_width(${1:form}, ${2:width})$0" },
        { "trigger": "newt_form_watch_fd()", "contents": "newt_form_watch_fd(${1:form}, ${2:stream})$0" },
        { "trigger": "newt_get_screen_size()", "contents": "newt_get_screen_size(${1:cols}, ${2:rows})$0" },
        { "trigger": "newt_grid_add_components_to_form()", "contents": "newt_grid_add_components_to_form(${1:grid}, ${2:form}, ${3:recurse})$0" },
        { "trigger": "newt_grid_basic_window()", "contents": "newt_grid_basic_window(${1:text}, ${2:middle}, ${3:buttons})$0" },
        { "trigger": "newt_grid_free()", "contents": "newt_grid_free(${1:grid}, ${2:recurse})$0" },
        { "trigger": "newt_grid_get_size()", "contents": "newt_grid_get_size(${1:grid}, ${2:width}, ${3:height})$0" },
        { "trigger": "newt_grid_h_close_stacked()", "contents": "newt_grid_h_close_stacked(${1:element1_type}, ${2:element1})$0" },
        { "trigger": "newt_grid_h_stacked()", "contents": "newt_grid_h_stacked(${1:element1_type}, ${2:element1})$0" },
        { "trigger": "newt_grid_place()", "contents": "newt_grid_place(${1:grid}, ${2:left}, ${3:top})$0" },
        { "trigger": "newt_grid_set_field()", "contents": "newt_grid_set_field(${1:grid}, ${2:col}, ${3:row}, ${4:type}, ${5:val}, ${6:pad_left}, ${7:pad_top}, ${8:pad_right}, ${9:pad_bottom}, ${10:anchor})$0" },
        { "trigger": "newt_grid_simple_window()", "contents": "newt_grid_simple_window(${1:text}, ${2:middle}, ${3:buttons})$0" },
        { "trigger": "newt_grid_v_close_stacked()", "contents": "newt_grid_v_close_stacked(${1:element1_type}, ${2:element1})$0" },
        { "trigger": "newt_grid_v_stacked()", "contents": "newt_grid_v_stacked(${1:element1_type}, ${2:element1})$0" },
        { "trigger": "newt_grid_wrapped_window()", "contents": "newt_grid_wrapped_window(${1:grid}, ${2:title})$0" },
        { "trigger": "newt_grid_wrapped_window_at()", "contents": "newt_grid_wrapped_window_at(${1:grid}, ${2:title}, ${3:left}, ${4:top})$0" },
        { "trigger": "newt_init()", "contents": "newt_init()" },
        { "trigger": "newt_label()", "contents": "newt_label(${1:left}, ${2:top}, ${3:text})$0" },
        { "trigger": "newt_label_set_text()", "contents": "newt_label_set_text(${1:label}, ${2:text})$0" },
        { "trigger": "newt_listbox()", "contents": "newt_listbox(${1:left}, ${2:top}, ${3:height})$0" },
        { "trigger": "newt_listbox_append_entry()", "contents": "newt_listbox_append_entry(${1:listbox}, ${2:text}, ${3:data})$0" },
        { "trigger": "newt_listbox_clear()", "contents": "newt_listbox_clear(${1:listobx})$0" },
        { "trigger": "newt_listbox_clear_selection()", "contents": "newt_listbox_clear_selection(${1:listbox})$0" },
        { "trigger": "newt_listbox_delete_entry()", "contents": "newt_listbox_delete_entry(${1:listbox}, ${2:key})$0" },
        { "trigger": "newt_listbox_get_current()", "contents": "newt_listbox_get_current(${1:listbox})$0" },
        { "trigger": "newt_listbox_get_selection()", "contents": "newt_listbox_get_selection(${1:listbox})$0" },
        { "trigger": "newt_listbox_insert_entry()", "contents": "newt_listbox_insert_entry(${1:listbox}, ${2:text}, ${3:data}, ${4:key})$0" },
        { "trigger": "newt_listbox_item_count()", "contents": "newt_listbox_item_count(${1:listbox})$0" },
        { "trigger": "newt_listbox_select_item()", "contents": "newt_listbox_select_item(${1:listbox}, ${2:key}, ${3:sense})$0" },
        { "trigger": "newt_listbox_set_current()", "contents": "newt_listbox_set_current(${1:listbox}, ${2:num})$0" },
        { "trigger": "newt_listbox_set_current_by_key()", "contents": "newt_listbox_set_current_by_key(${1:listbox}, ${2:key})$0" },
        { "trigger": "newt_listbox_set_data()", "contents": "newt_listbox_set_data(${1:listbox}, ${2:num}, ${3:data})$0" },
        { "trigger": "newt_listbox_set_entry()", "contents": "newt_listbox_set_entry(${1:listbox}, ${2:num}, ${3:text})$0" },
        { "trigger": "newt_listbox_set_width()", "contents": "newt_listbox_set_width(${1:listbox}, ${2:width})$0" },
        { "trigger": "newt_listitem()", "contents": "newt_listitem(${1:left}, ${2:top}, ${3:text}, ${4:is_default}, ${5:prev_item}, ${6:data})$0" },
        { "trigger": "newt_listitem_get_data()", "contents": "newt_listitem_get_data(${1:item})$0" },
        { "trigger": "newt_listitem_set()", "contents": "newt_listitem_set(${1:item}, ${2:text})$0" },
        { "trigger": "newt_open_window()", "contents": "newt_open_window(${1:left}, ${2:top}, ${3:width}, ${4:height})$0" },
        { "trigger": "newt_pop_help_line()", "contents": "newt_pop_help_line()" },
        { "trigger": "newt_pop_window()", "contents": "newt_pop_window()" },
        { "trigger": "newt_push_help_line()", "contents": "newt_push_help_line(${1:[text]})$0" },
        { "trigger": "newt_radio_get_current()", "contents": "newt_radio_get_current(${1:set_member})$0" },
        { "trigger": "newt_radiobutton()", "contents": "newt_radiobutton(${1:left}, ${2:top}, ${3:text}, ${4:is_default})$0" },
        { "trigger": "newt_redraw_help_line()", "contents": "newt_redraw_help_line()" },
        { "trigger": "newt_reflow_text()", "contents": "newt_reflow_text(${1:text}, ${2:width}, ${3:flex_down}, ${4:flex_up}, ${5:actual_width}, ${6:actual_height})$0" },
        { "trigger": "newt_refresh()", "contents": "newt_refresh()" },
        { "trigger": "newt_resize_screen()", "contents": "newt_resize_screen(${1:[redraw]})$0" },
        { "trigger": "newt_resume()", "contents": "newt_resume()" },
        { "trigger": "newt_run_form()", "contents": "newt_run_form(${1:form})$0" },
        { "trigger": "newt_scale()", "contents": "newt_scale(${1:left}, ${2:top}, ${3:width}, ${4:full_value})$0" },
        { "trigger": "newt_scale_set()", "contents": "newt_scale_set(${1:scale}, ${2:amount})$0" },
        { "trigger": "newt_scrollbar_set()", "contents": "newt_scrollbar_set(${1:scrollbar}, ${2:where}, ${3:total})$0" },
        { "trigger": "newt_set_help_callback()", "contents": "newt_set_help_callback(${1:function})$0" },
        { "trigger": "newt_set_suspend_callback()", "contents": "newt_set_suspend_callback(${1:function}, ${2:data})$0" },
        { "trigger": "newt_suspend()", "contents": "newt_suspend()" },
        { "trigger": "newt_textbox()", "contents": "newt_textbox(${1:left}, ${2:top}, ${3:width}, ${4:height})$0" },
        { "trigger": "newt_textbox_get_num_lines()", "contents": "newt_textbox_get_num_lines(${1:textbox})$0" },
        { "trigger": "newt_textbox_reflowed()", "contents": "newt_textbox_reflowed(${1:left}, ${2:top}, ${3:*text}, ${4:width}, ${5:flex_down}, ${6:flex_up})$0" },
        { "trigger": "newt_textbox_set_height()", "contents": "newt_textbox_set_height(${1:textbox}, ${2:height})$0" },
        { "trigger": "newt_textbox_set_text()", "contents": "newt_textbox_set_text(${1:textbox}, ${2:text})$0" },
        { "trigger": "newt_vertical_scrollbar()", "contents": "newt_vertical_scrollbar(${1:left}, ${2:top}, ${3:height})$0" },
        { "trigger": "newt_wait_for_key()", "contents": "newt_wait_for_key()" },
        { "trigger": "newt_win_choice()", "contents": "newt_win_choice(${1:title}, ${2:button1_text}, ${3:button2_text}, ${4:format})$0" },
        { "trigger": "newt_win_entries()", "contents": "newt_win_entries(${1:title}, ${2:text}, ${3:suggested_width}, ${4:flex_down}, ${5:flex_up}, ${6:data_width}, ${7:items}, ${8:button1})$0" },
        { "trigger": "newt_win_menu()", "contents": "newt_win_menu(${1:title}, ${2:text}, ${3:suggestedWidth}, ${4:flexDown}, ${5:flexUp}, ${6:maxListHeight}, ${7:items}, ${8:listItem})$0" },
        { "trigger": "newt_win_message()", "contents": "newt_win_message(${1:title}, ${2:button_text}, ${3:format})$0" },
        { "trigger": "newt_win_messagev()", "contents": "newt_win_messagev(${1:title}, ${2:button_text}, ${3:format}, ${4:args})$0" },
        { "trigger": "newt_win_ternary()", "contents": "newt_win_ternary(${1:title}, ${2:button1_text}, ${3:button2_text}, ${4:button3_text}, ${5:format})$0" },
        */
        { "trigger": "next()", "contents": "next(${1:array})$0" },
        { "trigger": "ngettext()", "contents": "ngettext(${1:msgid1}, ${2:msgid2}, ${3:n})$0" },
        { "trigger": "nl2br()", "contents": "nl2br(${1:string}${2:[, is_xhtml]})$0" },
        { "trigger": "nl_langinfo()", "contents": "nl_langinfo(${1:item})$0" },
        "NoRewindIterator",
        { "trigger": "NoRewindIterator()\tctor", "contents": "NoRewindIterator(${1:iterator})$0" },
        "Normalizer",
        /* Lotus Notes (experimental)
        { "trigger": "notes_body()", "contents": "notes_body(${1:server}, ${2:mailbox}, ${3:msg_number})$0" },
        { "trigger": "notes_copy_db()", "contents": "notes_copy_db(${1:from_database_name}, ${2:to_database_name})$0" },
        { "trigger": "notes_create_db()", "contents": "notes_create_db(${1:database_name})$0" },
        { "trigger": "notes_create_note()", "contents": "notes_create_note(${1:database_name}, ${2:form_name})$0" },
        { "trigger": "notes_drop_db()", "contents": "notes_drop_db(${1:database_name})$0" },
        { "trigger": "notes_find_note()", "contents": "notes_find_note(${1:database_name}, ${2:name})$0" },
        { "trigger": "notes_header_info()", "contents": "notes_header_info(${1:server}, ${2:mailbox}, ${3:msg_number})$0" },
        { "trigger": "notes_list_msgs()", "contents": "notes_list_msgs(${1:db})$0" },
        { "trigger": "notes_mark_read()", "contents": "notes_mark_read(${1:database_name}, ${2:user_name}, ${3:note_id})$0" },
        { "trigger": "notes_mark_unread()", "contents": "notes_mark_unread(${1:database_name}, ${2:user_name}, ${3:note_id})$0" },
        { "trigger": "notes_nav_create()", "contents": "notes_nav_create(${1:database_name}, ${2:name})$0" },
        { "trigger": "notes_search()", "contents": "notes_search(${1:database_name}, ${2:keywords})$0" },
        { "trigger": "notes_unread()", "contents": "notes_unread(${1:database_name}, ${2:user_name})$0" },
        { "trigger": "notes_version()", "contents": "notes_version(${1:database_name})$0" },
        */
        /* Only available when running PHP as a NSAPI module in Netscape/iPlanet/Sun webservers
        { "trigger": "nsapi_request_headers()", "contents": "nsapi_request_headers()" },
        { "trigger": "nsapi_response_headers()", "contents": "nsapi_response_headers()" },
        { "trigger": "nsapi_virtual()", "contents": "nsapi_virtual(${1:uri})$0" },
        */
        { "trigger": "nthmac()", "contents": "nthmac(${1:clent}, ${2:data})$0" },
        { "trigger": "number_format()", "contents": "number_format(${1:number})$0" },
        { "trigger": "number_format(full)", "contents": "number_format(${1:number}${2:[, decimals]}${3:[, dec_point]}${4:[, thousands_sep]})$0" },
        { "trigger": "NumberFormatter()", "contents": "NumberFormatter(${1:locale}, ${2:style}${3:[, pattern]})$0" },
        "OAuth",
        { "trigger": "OAuth()", "contents": "OAuth(${1:consumer_key}, ${2:consumer_secret}${3:[, signature_method]}${4:[, auth_type]})$0" },
        { "trigger": "oauth_get_sbs()", "contents": "oauth_get_sbs(${1:http_method}, ${2:uri})$0" },
        { "trigger": "oauth_urlencode()", "contents": "oauth_urlencode(${1:uri})$0" },
        "OAuthException",
        "OAuthProvider",
        { "trigger": "OAuthProvider()\tctor", "contents": "OAuthProvider(${1:[params_array]})$0" },
        // Output Buffering Control
        { "trigger": "ob_clean()", "contents": "ob_clean()" },
        { "trigger": "ob_deflatehandler()", "contents": "ob_deflatehandler(${1:data}, ${2:mode})$0" },
        { "trigger": "ob_end_clean()", "contents": "ob_end_clean()" },
        { "trigger": "ob_end_flush()", "contents": "ob_end_flush()" },
        { "trigger": "ob_etaghandler()", "contents": "ob_etaghandler(${1:data}, ${2:mode})$0" },
        { "trigger": "ob_flush()", "contents": "ob_flush()" },
        { "trigger": "ob_get_clean()", "contents": "ob_get_clean()" },
        { "trigger": "ob_get_contents()", "contents": "ob_get_contents()" },
        { "trigger": "ob_get_flush()", "contents": "ob_get_flush()" },
        { "trigger": "ob_get_length()", "contents": "ob_get_length()" },
        { "trigger": "ob_get_level()", "contents": "ob_get_level()" },
        { "trigger": "ob_get_status()", "contents": "ob_get_status(${1:[full_status]})$0" },
        { "trigger": "ob_gzhandler()", "contents": "ob_gzhandler(${1:buffer}, ${2:mode})$0" },
        { "trigger": "ob_iconv_handler()", "contents": "ob_iconv_handler(${1:contents}, ${2:status})$0" },
        { "trigger": "ob_implicit_flush()", "contents": "ob_implicit_flush(${1:[flag]})$0" },
        { "trigger": "ob_inflatehandler()", "contents": "ob_inflatehandler(${1:data}, ${2:mode})$0" },
        { "trigger": "ob_list_handlers()", "contents": "ob_list_handlers()" },
        { "trigger": "ob_start()", "contents": "ob_start(${1:[output_callback, ]}${2:[, chunk_size]}${3:[, erase]})$0" },
        { "trigger": "ob_tidyhandler()", "contents": "ob_tidyhandler(${1:input})$0" },
        /* Oracle Database
        { "trigger": "oci_bind_array_by_name()", "contents": "oci_bind_array_by_name(${1:statement}, ${2:name}, ${3:var_array}, ${4:max_table_length})$0" },
        { "trigger": "oci_bind_by_name()", "contents": "oci_bind_by_name(${1:statement}, ${2:bv_name}, ${3:variable})$0" },
        { "trigger": "oci_cancel()", "contents": "oci_cancel(${1:statement})$0" },
        { "trigger": "oci_client_version()", "contents": "oci_client_version()" },
        { "trigger": "oci_close()", "contents": "oci_close(${1:connection})$0" },
        { "trigger": "oci_commit()", "contents": "oci_commit(${1:connection})$0" },
        { "trigger": "oci_connect()", "contents": "oci_connect(${1:username}, ${2:password})$0" },
        { "trigger": "oci_define_by_name()", "contents": "oci_define_by_name(${1:statement}, ${2:column_name}, ${3:variable})$0" },
        { "trigger": "oci_error()", "contents": "oci_error(${1:[source]})$0" },
        { "trigger": "oci_execute()", "contents": "oci_execute(${1:statement})$0" },
        { "trigger": "oci_fetch()", "contents": "oci_fetch(${1:statement})$0" },
        { "trigger": "oci_fetch_all()", "contents": "oci_fetch_all(${1:statement}, ${2:output})$0" },
        { "trigger": "oci_fetch_array()", "contents": "oci_fetch_array(${1:statement})$0" },
        { "trigger": "oci_fetch_assoc()", "contents": "oci_fetch_assoc(${1:statement})$0" },
        { "trigger": "oci_fetch_object()", "contents": "oci_fetch_object(${1:statement})$0" },
        { "trigger": "oci_fetch_row()", "contents": "oci_fetch_row(${1:statement})$0" },
        { "trigger": "oci_field_is_null()", "contents": "oci_field_is_null(${1:statement}, ${2:field})$0" },
        { "trigger": "oci_field_name()", "contents": "oci_field_name(${1:statement}, ${2:field})$0" },
        { "trigger": "oci_field_precision()", "contents": "oci_field_precision(${1:statement}, ${2:field})$0" },
        { "trigger": "oci_field_scale()", "contents": "oci_field_scale(${1:statement}, ${2:field})$0" },
        { "trigger": "oci_field_size()", "contents": "oci_field_size(${1:statement}, ${2:field})$0" },
        { "trigger": "oci_field_type()", "contents": "oci_field_type(${1:statement}, ${2:field})$0" },
        { "trigger": "oci_field_type_raw()", "contents": "oci_field_type_raw(${1:statement}, ${2:field})$0" },
        { "trigger": "oci_free_statement()", "contents": "oci_free_statement(${1:statement})$0" },
        { "trigger": "oci_internal_debug()", "contents": "oci_internal_debug(${1:onoff})$0" },
        { "trigger": "oci_lob_copy()", "contents": "oci_lob_copy(${1:lob_to}, ${2:lob_from})$0" },
        { "trigger": "oci_lob_is_equal()", "contents": "oci_lob_is_equal(${1:lob1}, ${2:lob2})$0" },
        { "trigger": "oci_new_collection()", "contents": "oci_new_collection(${1:connection}, ${2:tdo})$0" },
        { "trigger": "oci_new_connect()", "contents": "oci_new_connect(${1:username}, ${2:password})$0" },
        { "trigger": "oci_new_cursor()", "contents": "oci_new_cursor(${1:connection})$0" },
        { "trigger": "oci_new_descriptor()", "contents": "oci_new_descriptor(${1:connection})$0" },
        { "trigger": "oci_num_fields()", "contents": "oci_num_fields(${1:statement})$0" },
        { "trigger": "oci_num_rows()", "contents": "oci_num_rows(${1:statement})$0" },
        { "trigger": "oci_parse()", "contents": "oci_parse(${1:connection}, ${2:sql_text})$0" },
        { "trigger": "oci_password_change()", "contents": "oci_password_change(${1:connection}, ${2:username}, ${3:old_password}, ${4:new_password})$0" },
        { "trigger": "oci_pconnect()", "contents": "oci_pconnect(${1:username}, ${2:password})$0" },
        { "trigger": "oci_result()", "contents": "oci_result(${1:statement}, ${2:field})$0" },
        { "trigger": "oci_rollback()", "contents": "oci_rollback(${1:connection})$0" },
        { "trigger": "oci_server_version()", "contents": "oci_server_version(${1:connection})$0" },
        { "trigger": "oci_set_action()", "contents": "oci_set_action(${1:connection}, ${2:action_name})$0" },
        { "trigger": "oci_set_client_identifier()", "contents": "oci_set_client_identifier(${1:connection}, ${2:client_identifier})$0" },
        { "trigger": "oci_set_client_info()", "contents": "oci_set_client_info(${1:connection}, ${2:client_info})$0" },
        { "trigger": "oci_set_edition()", "contents": "oci_set_edition(${1:edition})$0" },
        { "trigger": "oci_set_module_name()", "contents": "oci_set_module_name(${1:connection}, ${2:module_name})$0" },
        { "trigger": "oci_set_prefetch()", "contents": "oci_set_prefetch(${1:statement}, ${2:rows})$0" },
        { "trigger": "oci_statement_type()", "contents": "oci_statement_type(${1:statement})$0" },
        { "trigger": "ocibindbyname()\tdeprecated ", "contents": "ocibindbyname($1)$0" },
        { "trigger": "ocicancel()\tdeprecated ", "contents": "ocicancel($1)$0" },
        { "trigger": "ocicloselob()\tdeprecated ", "contents": "ocicloselob($1)$0" },
        { "trigger": "ocicollappend()\tdeprecated ", "contents": "ocicollappend($1)$0" },
        { "trigger": "ocicollassign()\tdeprecated ", "contents": "ocicollassign($1)$0" },
        { "trigger": "ocicollassignelem()\tdeprecated ", "contents": "ocicollassignelem($1)$0" },
        { "trigger": "ocicollgetelem()\tdeprecated ", "contents": "ocicollgetelem($1)$0" },
        { "trigger": "ocicollmax()\tdeprecated ", "contents": "ocicollmax($1)$0" },
        { "trigger": "ocicollsize()\tdeprecated ", "contents": "ocicollsize($1)$0" },
        { "trigger": "ocicolltrim()\tdeprecated ", "contents": "ocicolltrim($1)$0" },
        { "trigger": "ocicolumnisnull()\tdeprecated ", "contents": "ocicolumnisnull($1)$0" },
        { "trigger": "ocicolumnname()\tdeprecated ", "contents": "ocicolumnname($1)$0" },
        { "trigger": "ocicolumnprecision()\tdeprecated ", "contents": "ocicolumnprecision($1)$0" },
        { "trigger": "ocicolumnscale()\tdeprecated ", "contents": "ocicolumnscale($1)$0" },
        { "trigger": "ocicolumnsize()\tdeprecated ", "contents": "ocicolumnsize($1)$0" },
        { "trigger": "ocicolumntype()\tdeprecated ", "contents": "ocicolumntype($1)$0" },
        { "trigger": "ocicolumntyperaw()\tdeprecated ", "contents": "ocicolumntyperaw($1)$0" },
        { "trigger": "ocicommit()\tdeprecated ", "contents": "ocicommit($1)$0" },
        { "trigger": "ocidefinebyname()\tdeprecated ", "contents": "ocidefinebyname($1)$0" },
        { "trigger": "ocierror()\tdeprecated ", "contents": "ocierror($1)$0" },
        { "trigger": "ociexecute()\tdeprecated ", "contents": "ociexecute($1)$0" },
        { "trigger": "ocifetch()\tdeprecated ", "contents": "ocifetch($1)$0" },
        { "trigger": "ocifetchinto()\tdeprecated ", "contents": "ocifetchinto(${1:statement}, ${2:result})$0" },
        { "trigger": "ocifetchstatement()\tdeprecated ", "contents": "ocifetchstatement($1)$0" },
        { "trigger": "ocifreecollection()\tdeprecated ", "contents": "ocifreecollection($1)$0" },
        { "trigger": "ocifreecursor()\tdeprecated ", "contents": "ocifreecursor($1)$0" },
        { "trigger": "ocifreedesc()\tdeprecated ", "contents": "ocifreedesc($1)$0" },
        { "trigger": "ocifreestatement()\tdeprecated ", "contents": "ocifreestatement($1)$0" },
        { "trigger": "ociinternaldebug()\tdeprecated ", "contents": "ociinternaldebug($1)$0" },
        { "trigger": "ociloadlob()\tdeprecated ", "contents": "ociloadlob($1)$0" },
        { "trigger": "ocilogoff()\tdeprecated ", "contents": "ocilogoff($1)$0" },
        { "trigger": "ocilogon()\tdeprecated ", "contents": "ocilogon($1)$0" },
        { "trigger": "ocinewcollection()\tdeprecated ", "contents": "ocinewcollection($1)$0" },
        { "trigger": "ocinewcursor()\tdeprecated ", "contents": "ocinewcursor($1)$0" },
        { "trigger": "ocinewdescriptor()\tdeprecated ", "contents": "ocinewdescriptor($1)$0" },
        { "trigger": "ocinlogon()\tdeprecated ", "contents": "ocinlogon($1)$0" },
        { "trigger": "ocinumcols()\tdeprecated ", "contents": "ocinumcols($1)$0" },
        { "trigger": "ociparse()\tdeprecated ", "contents": "ociparse($1)$0" },
        { "trigger": "ociplogon()\tdeprecated ", "contents": "ociplogon($1)$0" },
        { "trigger": "ociresult()\tdeprecated ", "contents": "ociresult($1)$0" },
        { "trigger": "ocirollback()\tdeprecated ", "contents": "ocirollback($1)$0" },
        { "trigger": "ocirowcount()\tdeprecated ", "contents": "ocirowcount($1)$0" },
        { "trigger": "ocisavelob()\tdeprecated ", "contents": "ocisavelob($1)$0" },
        { "trigger": "ocisavelobfile()\tdeprecated ", "contents": "ocisavelobfile($1)$0" },
        { "trigger": "ociserverversion()\tdeprecated ", "contents": "ociserverversion($1)$0" },
        { "trigger": "ocisetprefetch()\tdeprecated ", "contents": "ocisetprefetch($1)$0" },
        { "trigger": "ocistatementtype()\tdeprecated ", "contents": "ocistatementtype($1)$0" },
        { "trigger": "ociwritelobtofile()\tdeprecated ", "contents": "ociwritelobtofile($1)$0" },
        { "trigger": "ociwritetemporarylob()\tdeprecated ", "contents": "ociwritetemporarylob($1)$0" },
        */
        { "trigger": "octdec()", "contents": "octdec(${1:octal_string})$0" },

        { "trigger": "odbc_autocommit()", "contents": "odbc_autocommit(${1:connection_id})$0" },
        { "trigger": "odbc_binmode()", "contents": "odbc_binmode(${1:result_id}, ${2:mode})$0" },
        { "trigger": "odbc_close()", "contents": "odbc_close(${1:connection_id})$0" },
        { "trigger": "odbc_close_all()", "contents": "odbc_close_all()" },
        { "trigger": "odbc_columnprivileges()", "contents": "odbc_columnprivileges(${1:connection_id}, ${2:qualifier}, ${3:owner}, ${4:table_name}, ${5:column_name})$0" },
        { "trigger": "odbc_columns()", "contents": "odbc_columns(${1:connection_id})$0" },
        { "trigger": "odbc_commit()", "contents": "odbc_commit(${1:connection_id})$0" },
        { "trigger": "odbc_connect()", "contents": "odbc_connect(${1:dsn}, ${2:user}, ${3:password})$0" },
        { "trigger": "odbc_cursor()", "contents": "odbc_cursor(${1:result_id})$0" },
        { "trigger": "odbc_data_source()", "contents": "odbc_data_source(${1:connection_id}, ${2:fetch_type})$0" },
        { "trigger": "odbc_do()", "contents": "odbc_do(${1:connection_id}, ${2:query_string}${3:[, flags]})$0" },
        { "trigger": "odbc_error()", "contents": "odbc_error(${1:[connection_id]})$0" },
        { "trigger": "odbc_errormsg()", "contents": "odbc_errormsg(${1:[connection_id]})$0" },
        { "trigger": "odbc_exec()", "contents": "odbc_exec(${1:connection_id}, ${2:query_string})$0" },
        { "trigger": "odbc_execute()", "contents": "odbc_execute(${1:result_id})$0" },
        { "trigger": "odbc_fetch_array()", "contents": "odbc_fetch_array(${1:result})$0" },
        { "trigger": "odbc_fetch_into()", "contents": "odbc_fetch_into(${1:result_id}, ${2:result_array})$0" },
        { "trigger": "odbc_fetch_object()", "contents": "odbc_fetch_object(${1:result})$0" },
        { "trigger": "odbc_fetch_row()", "contents": "odbc_fetch_row(${1:result_id})$0" },
        { "trigger": "odbc_field_len()", "contents": "odbc_field_len(${1:result_id}, ${2:field_number})$0" },
        { "trigger": "odbc_field_name()", "contents": "odbc_field_name(${1:result_id}, ${2:field_number})$0" },
        { "trigger": "odbc_field_num()", "contents": "odbc_field_num(${1:result_id}, ${2:field_name})$0" },
        { "trigger": "odbc_field_precision()", "contents": "odbc_field_precision(${1:result_id}, ${2:field_number})$0" },
        { "trigger": "odbc_field_scale()", "contents": "odbc_field_scale(${1:result_id}, ${2:field_number})$0" },
        { "trigger": "odbc_field_type()", "contents": "odbc_field_type(${1:result_id}, ${2:field_number})$0" },
        { "trigger": "odbc_foreignkeys()", "contents": "odbc_foreignkeys(${1:connection_id}, ${2:pk_qualifier}, ${3:pk_owner}, ${4:pk_table}, ${5:fk_qualifier}, ${6:fk_owner}, ${7:fk_table})$0" },
        { "trigger": "odbc_free_result()", "contents": "odbc_free_result(${1:result_id})$0" },
        { "trigger": "odbc_gettypeinfo()", "contents": "odbc_gettypeinfo(${1:connection_id})$0" },
        { "trigger": "odbc_longreadlen()", "contents": "odbc_longreadlen(${1:result_id}, ${2:length})$0" },
        { "trigger": "odbc_next_result()", "contents": "odbc_next_result(${1:result_id})$0" },
        { "trigger": "odbc_num_fields()", "contents": "odbc_num_fields(${1:result_id})$0" },
        { "trigger": "odbc_num_rows()", "contents": "odbc_num_rows(${1:result_id})$0" },
        { "trigger": "odbc_pconnect()", "contents": "odbc_pconnect(${1:dsn}, ${2:user}, ${3:password})$0" },
        { "trigger": "odbc_prepare()", "contents": "odbc_prepare(${1:connection_id}, ${2:query_string})$0" },
        { "trigger": "odbc_primarykeys()", "contents": "odbc_primarykeys(${1:connection_id}, ${2:qualifier}, ${3:owner}, ${4:table})$0" },
        { "trigger": "odbc_procedurecolumns()", "contents": "odbc_procedurecolumns(${1:connection_id})$0" },
        { "trigger": "odbc_procedures()", "contents": "odbc_procedures(${1:connection_id})$0" },
        { "trigger": "odbc_result()", "contents": "odbc_result(${1:result_id}, ${2:field})$0" },
        { "trigger": "odbc_result_all()", "contents": "odbc_result_all(${1:result_id})$0" },
        { "trigger": "odbc_rollback()", "contents": "odbc_rollback(${1:connection_id})$0" },
        { "trigger": "odbc_setoption()", "contents": "odbc_setoption(${1:id}, ${2:function}, ${3:option}, ${4:param})$0" },
        { "trigger": "odbc_specialcolumns()", "contents": "odbc_specialcolumns(${1:connection_id}, ${2:type}, ${3:qualifier}, ${4:owner}, ${5:table}, ${6:scope}, ${7:nullable})$0" },
        { "trigger": "odbc_statistics()", "contents": "odbc_statistics(${1:connection_id}, ${2:qualifier}, ${3:owner}, ${4:table_name}, ${5:unique}, ${6:accuracy})$0" },
        { "trigger": "odbc_tableprivileges()", "contents": "odbc_tableprivileges(${1:connection_id}, ${2:qualifier}, ${3:owner}, ${4:name})$0" },
        { "trigger": "odbc_tables()", "contents": "odbc_tables(${1:connection_id})$0" },
        /* OpenAL Audio - requires the OpenAL library
        { "trigger": "openal_buffer_create()", "contents": "openal_buffer_create()" },
        { "trigger": "openal_buffer_data()", "contents": "openal_buffer_data(${1:buffer}, ${2:format}, ${3:data}, ${4:freq})$0" },
        { "trigger": "openal_buffer_destroy()", "contents": "openal_buffer_destroy(${1:buffer})$0" },
        { "trigger": "openal_buffer_get()", "contents": "openal_buffer_get(${1:buffer}, ${2:property})$0" },
        { "trigger": "openal_buffer_loadwav()", "contents": "openal_buffer_loadwav(${1:buffer}, ${2:wavfile})$0" },
        { "trigger": "openal_context_create()", "contents": "openal_context_create(${1:device})$0" },
        { "trigger": "openal_context_current()", "contents": "openal_context_current(${1:context})$0" },
        { "trigger": "openal_context_destroy()", "contents": "openal_context_destroy(${1:context})$0" },
        { "trigger": "openal_context_process()", "contents": "openal_context_process(${1:context})$0" },
        { "trigger": "openal_context_suspend()", "contents": "openal_context_suspend(${1:context})$0" },
        { "trigger": "openal_device_close()", "contents": "openal_device_close(${1:device})$0" },
        { "trigger": "openal_device_open()", "contents": "openal_device_open(${1:[device_desc]})$0" },
        { "trigger": "openal_listener_get()", "contents": "openal_listener_get(${1:property})$0" },
        { "trigger": "openal_listener_set()", "contents": "openal_listener_set(${1:property}, ${2:setting})$0" },
        { "trigger": "openal_source_create()", "contents": "openal_source_create()" },
        { "trigger": "openal_source_destroy()", "contents": "openal_source_destroy(${1:source})$0" },
        { "trigger": "openal_source_get()", "contents": "openal_source_get(${1:source}, ${2:property})$0" },
        { "trigger": "openal_source_pause()", "contents": "openal_source_pause(${1:source})$0" },
        { "trigger": "openal_source_play()", "contents": "openal_source_play(${1:source})$0" },
        { "trigger": "openal_source_rewind()", "contents": "openal_source_rewind(${1:source})$0" },
        { "trigger": "openal_source_set()", "contents": "openal_source_set(${1:source}, ${2:property}, ${3:setting})$0" },
        { "trigger": "openal_source_stop()", "contents": "openal_source_stop(${1:source})$0" },
        { "trigger": "openal_stream()", "contents": "openal_stream(${1:source}, ${2:format}, ${3:rate})$0" },
        */
        { "trigger": "opendir()", "contents": "opendir(${1:path})$0" },
        { "trigger": "openlog()", "contents": "openlog(${1:ident}, ${2:option}, ${3:facility})$0" },
        // OpenSSL
        { "trigger": "openssl_cipher_iv_length()", "contents": "openssl_cipher_iv_length(${1:method})$0" },
        { "trigger": "openssl_csr_export()", "contents": "openssl_csr_export(${1:csr}, ${2:out})$0" },
        { "trigger": "openssl_csr_export_to_file()", "contents": "openssl_csr_export_to_file(${1:csr}, ${2:outfilename})$0" },
        { "trigger": "openssl_csr_get_public_key()", "contents": "openssl_csr_get_public_key(${1:csr})$0" },
        { "trigger": "openssl_csr_get_subject()", "contents": "openssl_csr_get_subject(${1:csr})$0" },
        { "trigger": "openssl_csr_new()", "contents": "openssl_csr_new(${1:dn}, ${2:privkey})$0" },
        { "trigger": "openssl_csr_sign()", "contents": "openssl_csr_sign(${1:csr}, ${2:cacert}, ${3:priv_key}, ${4:days})$0" },
        { "trigger": "openssl_decrypt()", "contents": "openssl_decrypt(${1:data}, ${2:method}, ${3:password})$0" },
        { "trigger": "openssl_dh_compute_key()", "contents": "openssl_dh_compute_key(${1:pub_key}, ${2:dh_key})$0" },
        { "trigger": "openssl_digest()", "contents": "openssl_digest(${1:data}, ${2:method})$0" },
        { "trigger": "openssl_encrypt()", "contents": "openssl_encrypt(${1:data}, ${2:method}, ${3:password})$0" },
        { "trigger": "openssl_error_string()", "contents": "openssl_error_string()" },
        { "trigger": "openssl_free_key()", "contents": "openssl_free_key(${1:key_identifier})$0" },
        { "trigger": "openssl_get_cipher_methods()", "contents": "openssl_get_cipher_methods(${1:[aliases]})$0" },
        { "trigger": "openssl_get_md_methods()", "contents": "openssl_get_md_methods(${1:[aliases]})$0" },
        { "trigger": "openssl_get_privatekey()", "contents": "openssl_get_privatekey(${1:key}${2:[, passphrase]})$0" },
        { "trigger": "openssl_get_publickey()", "contents": "openssl_get_publickey(${1:certificate})$0" },
        { "trigger": "openssl_open()", "contents": "openssl_open(${1:sealed_data}, ${2:open_data}, ${3:env_key}, ${4:priv_key_id})$0" },
        { "trigger": "openssl_pkcs12_export()", "contents": "openssl_pkcs12_export(${1:x509}, ${2:out}, ${3:priv_key}, ${4:pass})$0" },
        { "trigger": "openssl_pkcs12_export_to_file()", "contents": "openssl_pkcs12_export_to_file(${1:x509}, ${2:filename}, ${3:priv_key}, ${4:pass})$0" },
        { "trigger": "openssl_pkcs12_read()", "contents": "openssl_pkcs12_read(${1:pkcs12}, ${2:certs}, ${3:pass})$0" },
        { "trigger": "openssl_pkcs7_decrypt()", "contents": "openssl_pkcs7_decrypt(${1:infilename}, ${2:outfilename}, ${3:recipcert})$0" },
        { "trigger": "openssl_pkcs7_encrypt()", "contents": "openssl_pkcs7_encrypt(${1:infile}, ${2:outfile}, ${3:recipcerts}, ${4:headers})$0" },
        { "trigger": "openssl_pkcs7_sign()", "contents": "openssl_pkcs7_sign(${1:infilename}, ${2:outfilename}, ${3:signcert}, ${4:privkey}, ${5:headers})$0" },
        { "trigger": "openssl_pkcs7_verify()", "contents": "openssl_pkcs7_verify(${1:filename}, ${2:flags})$0" },
        { "trigger": "openssl_pkey_export()", "contents": "openssl_pkey_export(${1:key}, ${2:out})$0" },
        { "trigger": "openssl_pkey_export_to_file()", "contents": "openssl_pkey_export_to_file(${1:key}, ${2:outfilename})$0" },
        { "trigger": "openssl_pkey_free()", "contents": "openssl_pkey_free(${1:key})$0" },
        { "trigger": "openssl_pkey_get_details()", "contents": "openssl_pkey_get_details(${1:key})$0" },
        { "trigger": "openssl_pkey_get_private()", "contents": "openssl_pkey_get_private(${1:key})$0" },
        { "trigger": "openssl_pkey_get_public()", "contents": "openssl_pkey_get_public(${1:certificate})$0" },
        { "trigger": "openssl_pkey_new()", "contents": "openssl_pkey_new(${1:[configargs]})$0" },
        { "trigger": "openssl_private_decrypt()", "contents": "openssl_private_decrypt(${1:data}, ${2:decrypted}, ${3:key})$0" },
        { "trigger": "openssl_private_encrypt()", "contents": "openssl_private_encrypt(${1:data}, ${2:crypted}, ${3:key})$0" },
        { "trigger": "openssl_public_decrypt()", "contents": "openssl_public_decrypt(${1:data}, ${2:decrypted}, ${3:key})$0" },
        { "trigger": "openssl_public_encrypt()", "contents": "openssl_public_encrypt(${1:data}, ${2:crypted}, ${3:key})$0" },
        { "trigger": "openssl_random_pseudo_bytes()", "contents": "openssl_random_pseudo_bytes(${1:length})$0" },
        { "trigger": "openssl_seal()", "contents": "openssl_seal(${1:data}, ${2:sealed_data}, ${3:env_keys}, ${4:pub_key_ids})$0" },
        { "trigger": "openssl_sign()", "contents": "openssl_sign(${1:data}, ${2:signature}, ${3:priv_key_id})$0" },
        { "trigger": "openssl_verify()", "contents": "openssl_verify(${1:data}, ${2:signature}, ${3:pub_key_id})$0" },
        { "trigger": "openssl_x509_check_private_key()", "contents": "openssl_x509_check_private_key(${1:cert}, ${2:key})$0" },
        { "trigger": "openssl_x509_checkpurpose()", "contents": "openssl_x509_checkpurpose(${1:x509cert}, ${2:purpose})$0" },
        { "trigger": "openssl_x509_export()", "contents": "openssl_x509_export(${1:x509}, ${2:output})$0" },
        { "trigger": "openssl_x509_export_to_file()", "contents": "openssl_x509_export_to_file(${1:x509}, ${2:outfilename})$0" },
        { "trigger": "openssl_x509_free()", "contents": "openssl_x509_free(${1:x509cert})$0" },
        { "trigger": "openssl_x509_parse()", "contents": "openssl_x509_parse(${1:x509cert})$0" },
        { "trigger": "openssl_x509_read()", "contents": "openssl_x509_read(${1:x509certdata})$0" },

        { "trigger": "ord()", "contents": "ord(${1:string})$0" },
        "OuterIterator",
        "OutOfBoundsException",
        "OutOfRangeException",
        { "trigger": "output_add_rewrite_var()", "contents": "output_add_rewrite_var(${1:name}, ${2:value})$0" },
        { "trigger": "output_reset_rewrite_vars()", "contents": "output_reset_rewrite_vars()" },
        "OverflowException",
        { "trigger": "overload()", "contents": "overload(${1:class_name})$0" },
        { "trigger": "override_function()", "contents": "override_function(${1:function_name}, ${2:function_args}, ${3:function_code})$0" },
        /* Ovrimos SQL Server - not available on Windows - moved to PECL
        { "trigger": "ovrimos_close()", "contents": "ovrimos_close(${1:connection})$0" },
        { "trigger": "ovrimos_commit()", "contents": "ovrimos_commit(${1:connection_id})$0" },
        { "trigger": "ovrimos_connect()", "contents": "ovrimos_connect(${1:host}, ${2:dborport}, ${3:user}, ${4:password})$0" },
        { "trigger": "ovrimos_cursor()", "contents": "ovrimos_cursor(${1:result_id})$0" },
        { "trigger": "ovrimos_exec()", "contents": "ovrimos_exec(${1:connection_id}, ${2:query})$0" },
        { "trigger": "ovrimos_execute()", "contents": "ovrimos_execute(${1:result_id})$0" },
        { "trigger": "ovrimos_fetch_into()", "contents": "ovrimos_fetch_into(${1:result_id}, ${2:result_array})$0" },
        { "trigger": "ovrimos_fetch_row()", "contents": "ovrimos_fetch_row(${1:result_id})$0" },
        { "trigger": "ovrimos_field_len()", "contents": "ovrimos_field_len(${1:result_id}, ${2:field_number})$0" },
        { "trigger": "ovrimos_field_name()", "contents": "ovrimos_field_name(${1:result_id}, ${2:field_number})$0" },
        { "trigger": "ovrimos_field_num()", "contents": "ovrimos_field_num(${1:result_id}, ${2:field_name})$0" },
        { "trigger": "ovrimos_field_type()", "contents": "ovrimos_field_type(${1:result_id}, ${2:field_number})$0" },
        { "trigger": "ovrimos_free_result()", "contents": "ovrimos_free_result(${1:result_id})$0" },
        { "trigger": "ovrimos_longreadlen()", "contents": "ovrimos_longreadlen(${1:result_id}, ${2:length})$0" },
        { "trigger": "ovrimos_num_fields()", "contents": "ovrimos_num_fields(${1:result_id})$0" },
        { "trigger": "ovrimos_num_rows()", "contents": "ovrimos_num_rows(${1:result_id})$0" },
        { "trigger": "ovrimos_prepare()", "contents": "ovrimos_prepare(${1:connection_id}, ${2:query})$0" },
        { "trigger": "ovrimos_result()", "contents": "ovrimos_result(${1:result_id}, ${2:field})$0" },
        { "trigger": "ovrimos_result_all()", "contents": "ovrimos_result_all(${1:result_id})$0" },
        { "trigger": "ovrimos_rollback()", "contents": "ovrimos_rollback(${1:connection_id})$0" },
        */
        { "trigger": "pack()", "contents": "pack(${1:format}${2:[, args]})$0" },
        "ParentIterator",
        { "trigger": "ParentIterator()\tctor", "contents": "ParentIterator(${1:iterator})$0" },
        { "trigger": "parse_ini_file()", "contents": "parse_ini_file(${1:filename}${2:[, process_sections]}${3:[, scanner_mode]})$0" },
        { "trigger": "parse_ini_string()", "contents": "parse_ini_string(${1:ini}${2:[, process_sections]}${3:[, scanner_mode]})$0" },
        { "trigger": "parse_str()", "contents": "parse_str(${1:str}${2:[, arr]})$0" },
        { "trigger": "parse_url()", "contents": "parse_url(${1:url}${2:[, component]})$0" },
        /* Parsekit - PECL extension not bundled with PHP
        { "trigger": "parsekit_compile_file()", "contents": "parsekit_compile_file(${1:filename}${2:[, errors]}${3:[, options]})$0" },
        { "trigger": "parsekit_compile_string()", "contents": "parsekit_compile_string(${1:phpcode}${2:[, errors]}${3:[, options]})$0" },
        { "trigger": "parsekit_func_arginfo()", "contents": "parsekit_func_arginfo(${1:function})$0" },
        */
        { "trigger": "passthru()", "contents": "passthru(${1:command}${2:[, return_var]})$0" },
        { "trigger": "pathinfo()", "contents": "pathinfo(${1:path}${2:[, options]})$0" },
        { "trigger": "pclose()", "contents": "pclose(${1:handle})$0" },
        // PCNTL Process Control - not available on Windows platforms
        { "trigger": "pcntl_alarm()", "contents": "pcntl_alarm(${1:seconds})$0" },
        { "trigger": "pcntl_exec()", "contents": "pcntl_exec(${1:path})$0" },
        { "trigger": "pcntl_fork()", "contents": "pcntl_fork()" },
        { "trigger": "pcntl_getpriority()", "contents": "pcntl_getpriority(${1:[pid]}${2:[, process_identifier]})$0" },
        { "trigger": "pcntl_setpriority()", "contents": "pcntl_setpriority(${1:priority})$0" },
        { "trigger": "pcntl_signal()", "contents": "pcntl_signal(${1:signo}, ${2:handler})$0" },
        { "trigger": "pcntl_signal_dispatch()", "contents": "pcntl_signal_dispatch()" },
        { "trigger": "pcntl_sigprocmask()", "contents": "pcntl_sigprocmask(${1:how}, ${2:set})$0" },
        { "trigger": "pcntl_sigtimedwait()", "contents": "pcntl_sigtimedwait(${1:set})$0" },
        { "trigger": "pcntl_sigwaitinfo()", "contents": "pcntl_sigwaitinfo(${1:set})$0" },
        { "trigger": "pcntl_wait()", "contents": "pcntl_wait(${1:status})$0" },
        { "trigger": "pcntl_waitpid()", "contents": "pcntl_waitpid(${1:pid}, ${2:status})$0" },
        { "trigger": "pcntl_wexitstatus()", "contents": "pcntl_wexitstatus(${1:status})$0" },
        { "trigger": "pcntl_wifexited()", "contents": "pcntl_wifexited(${1:status})$0" },
        { "trigger": "pcntl_wifsignaled()", "contents": "pcntl_wifsignaled(${1:status})$0" },
        { "trigger": "pcntl_wifstopped()", "contents": "pcntl_wifstopped(${1:status})$0" },
        { "trigger": "pcntl_wstopsig()", "contents": "pcntl_wstopsig(${1:status})$0" },
        { "trigger": "pcntl_wtermsig()", "contents": "pcntl_wtermsig(${1:status})$0" },

        /*
        { "trigger": "PDF_activate_item()", "contents": "PDF_activate_item(${1:pdfdoc}, ${2:id})$0" },
        { "trigger": "PDF_add_annotation()\tdeprecated ", "contents": "PDF_add_annotation($1)$0" },
        { "trigger": "PDF_add_bookmark()\tdeprecated ", "contents": "PDF_add_bookmark($1)$0" },
        { "trigger": "PDF_add_launchlink()", "contents": "PDF_add_launchlink(${1:pdfdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:filename})$0" },
        { "trigger": "PDF_add_locallink()", "contents": "PDF_add_locallink(${1:pdfdoc}, ${2:lowerleftx}, ${3:lowerlefty}, ${4:upperrightx}, ${5:upperrighty}, ${6:page}, ${7:dest})$0" },
        { "trigger": "PDF_add_nameddest()", "contents": "PDF_add_nameddest(${1:pdfdoc}, ${2:name}, ${3:optlist})$0" },
        { "trigger": "PDF_add_note()", "contents": "PDF_add_note(${1:pdfdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:contents}, ${7:title}, ${8:icon}, ${9:open})$0" },
        { "trigger": "PDF_add_outline()\tdeprecated ", "contents": "PDF_add_outline($1)$0" },
        { "trigger": "PDF_add_pdflink()", "contents": "PDF_add_pdflink(${1:pdfdoc}, ${2:bottom_left_x}, ${3:bottom_left_y}, ${4:up_right_x}, ${5:up_right_y}, ${6:filename}, ${7:page}, ${8:dest})$0" },
        { "trigger": "PDF_add_table_cell()", "contents": "PDF_add_table_cell(${1:pdfdoc}, ${2:table}, ${3:column}, ${4:row}, ${5:text}, ${6:optlist})$0" },
        { "trigger": "PDF_add_textflow()", "contents": "PDF_add_textflow(${1:pdfdoc}, ${2:textflow}, ${3:text}, ${4:optlist})$0" },
        { "trigger": "PDF_add_thumbnail()", "contents": "PDF_add_thumbnail(${1:pdfdoc}, ${2:image})$0" },
        { "trigger": "PDF_add_weblink()", "contents": "PDF_add_weblink(${1:pdfdoc}, ${2:lowerleftx}, ${3:lowerlefty}, ${4:upperrightx}, ${5:upperrighty}, ${6:url})$0" },
        { "trigger": "PDF_arc()", "contents": "PDF_arc(${1:p}, ${2:x}, ${3:y}, ${4:r}, ${5:alpha}, ${6:beta})$0" },
        { "trigger": "PDF_arcn()", "contents": "PDF_arcn(${1:p}, ${2:x}, ${3:y}, ${4:r}, ${5:alpha}, ${6:beta})$0" },
        { "trigger": "PDF_attach_file()", "contents": "PDF_attach_file(${1:pdfdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:filename}, ${7:description}, ${8:author}, ${9:mimetype}, ${10:icon})$0" },
        { "trigger": "PDF_begin_document()", "contents": "PDF_begin_document(${1:pdfdoc}, ${2:filename}, ${3:optlist})$0" },
        { "trigger": "PDF_begin_font()", "contents": "PDF_begin_font(${1:pdfdoc}, ${2:filename}, ${3:a}, ${4:b}, ${5:c}, ${6:d}, ${7:e}, ${8:f}, ${9:optlist})$0" },
        { "trigger": "PDF_begin_glyph()", "contents": "PDF_begin_glyph(${1:pdfdoc}, ${2:glyphname}, ${3:wx}, ${4:llx}, ${5:lly}, ${6:urx}, ${7:ury})$0" },
        { "trigger": "PDF_begin_item()", "contents": "PDF_begin_item(${1:pdfdoc}, ${2:tag}, ${3:optlist})$0" },
        { "trigger": "PDF_begin_layer()", "contents": "PDF_begin_layer(${1:pdfdoc}, ${2:layer})$0" },
        { "trigger": "PDF_begin_page()", "contents": "PDF_begin_page(${1:pdfdoc}, ${2:width}, ${3:height})$0" },
        { "trigger": "PDF_begin_page_ext()", "contents": "PDF_begin_page_ext(${1:pdfdoc}, ${2:width}, ${3:height}, ${4:optlist})$0" },
        { "trigger": "PDF_begin_pattern()", "contents": "PDF_begin_pattern(${1:pdfdoc}, ${2:width}, ${3:height}, ${4:xstep}, ${5:ystep}, ${6:painttype})$0" },
        { "trigger": "PDF_begin_template()", "contents": "PDF_begin_template(${1:pdfdoc}, ${2:width}, ${3:height})$0" },
        { "trigger": "PDF_begin_template_ext()", "contents": "PDF_begin_template_ext(${1:pdfdoc}, ${2:width}, ${3:height}, ${4:optlist})$0" },
        { "trigger": "PDF_circle()", "contents": "PDF_circle(${1:pdfdoc}, ${2:x}, ${3:y}, ${4:r})$0" },
        { "trigger": "PDF_clip()", "contents": "PDF_clip(${1:p})$0" },
        { "trigger": "PDF_close()", "contents": "PDF_close(${1:p})$0" },
        { "trigger": "PDF_close_image()", "contents": "PDF_close_image(${1:p}, ${2:image})$0" },
        { "trigger": "PDF_close_pdi()", "contents": "PDF_close_pdi(${1:p}, ${2:doc})$0" },
        { "trigger": "PDF_close_pdi_page()", "contents": "PDF_close_pdi_page(${1:p}, ${2:page})$0" },
        { "trigger": "PDF_closepath()", "contents": "PDF_closepath(${1:p})$0" },
        { "trigger": "PDF_closepath_fill_stroke()", "contents": "PDF_closepath_fill_stroke(${1:p})$0" },
        { "trigger": "PDF_closepath_stroke()", "contents": "PDF_closepath_stroke(${1:p})$0" },
        { "trigger": "PDF_concat()", "contents": "PDF_concat(${1:p}, ${2:a}, ${3:b}, ${4:c}, ${5:d}, ${6:e}, ${7:f})$0" },
        { "trigger": "PDF_continue_text()", "contents": "PDF_continue_text(${1:p}, ${2:text})$0" },
        { "trigger": "PDF_create_3dview()", "contents": "PDF_create_3dview(${1:pdfdoc}, ${2:username}, ${3:optlist})$0" },
        { "trigger": "PDF_create_action()", "contents": "PDF_create_action(${1:pdfdoc}, ${2:type}, ${3:optlist})$0" },
        { "trigger": "PDF_create_annotation()", "contents": "PDF_create_annotation(${1:pdfdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:type}, ${7:optlist})$0" },
        { "trigger": "PDF_create_bookmark()", "contents": "PDF_create_bookmark(${1:pdfdoc}, ${2:text}, ${3:optlist})$0" },
        { "trigger": "PDF_create_field()", "contents": "PDF_create_field(${1:pdfdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:name}, ${7:type}, ${8:optlist})$0" },
        { "trigger": "PDF_create_fieldgroup()", "contents": "PDF_create_fieldgroup(${1:pdfdoc}, ${2:name}, ${3:optlist})$0" },
        { "trigger": "PDF_create_gstate()", "contents": "PDF_create_gstate(${1:pdfdoc}, ${2:optlist})$0" },
        { "trigger": "PDF_create_pvf()", "contents": "PDF_create_pvf(${1:pdfdoc}, ${2:filename}, ${3:data}, ${4:optlist})$0" },
        { "trigger": "PDF_create_textflow()", "contents": "PDF_create_textflow(${1:pdfdoc}, ${2:text}, ${3:optlist})$0" },
        { "trigger": "PDF_curveto()", "contents": "PDF_curveto(${1:p}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:x3}, ${7:y3})$0" },
        { "trigger": "PDF_define_layer()", "contents": "PDF_define_layer(${1:pdfdoc}, ${2:name}, ${3:optlist})$0" },
        { "trigger": "PDF_delete()", "contents": "PDF_delete(${1:pdfdoc})$0" },
        { "trigger": "PDF_delete_pvf()", "contents": "PDF_delete_pvf(${1:pdfdoc}, ${2:filename})$0" },
        { "trigger": "PDF_delete_table()", "contents": "PDF_delete_table(${1:pdfdoc}, ${2:table}, ${3:optlist})$0" },
        { "trigger": "PDF_delete_textflow()", "contents": "PDF_delete_textflow(${1:pdfdoc}, ${2:textflow})$0" },
        { "trigger": "PDF_encoding_set_char()", "contents": "PDF_encoding_set_char(${1:pdfdoc}, ${2:encoding}, ${3:slot}, ${4:glyphname}, ${5:uv})$0" },
        { "trigger": "PDF_end_document()", "contents": "PDF_end_document(${1:pdfdoc}, ${2:optlist})$0" },
        { "trigger": "PDF_end_font()", "contents": "PDF_end_font(${1:pdfdoc})$0" },
        { "trigger": "PDF_end_glyph()", "contents": "PDF_end_glyph(${1:pdfdoc})$0" },
        { "trigger": "PDF_end_item()", "contents": "PDF_end_item(${1:pdfdoc}, ${2:id})$0" },
        { "trigger": "PDF_end_layer()", "contents": "PDF_end_layer(${1:pdfdoc})$0" },
        { "trigger": "PDF_end_page()", "contents": "PDF_end_page(${1:p})$0" },
        { "trigger": "PDF_end_page_ext()", "contents": "PDF_end_page_ext(${1:pdfdoc}, ${2:optlist})$0" },
        { "trigger": "PDF_end_pattern()", "contents": "PDF_end_pattern(${1:p})$0" },
        { "trigger": "PDF_end_template()", "contents": "PDF_end_template(${1:p})$0" },
        { "trigger": "PDF_endpath()", "contents": "PDF_endpath(${1:p})$0" },
        { "trigger": "PDF_fill()", "contents": "PDF_fill(${1:p})$0" },
        { "trigger": "PDF_fill_imageblock()", "contents": "PDF_fill_imageblock(${1:pdfdoc}, ${2:page}, ${3:blockname}, ${4:image}, ${5:optlist})$0" },
        { "trigger": "PDF_fill_pdfblock()", "contents": "PDF_fill_pdfblock(${1:pdfdoc}, ${2:page}, ${3:blockname}, ${4:contents}, ${5:optlist})$0" },
        { "trigger": "PDF_fill_stroke()", "contents": "PDF_fill_stroke(${1:p})$0" },
        { "trigger": "PDF_fill_textblock()", "contents": "PDF_fill_textblock(${1:pdfdoc}, ${2:page}, ${3:blockname}, ${4:text}, ${5:optlist})$0" },
        { "trigger": "PDF_findfont()", "contents": "PDF_findfont(${1:p}, ${2:fontname}, ${3:encoding}, ${4:embed})$0" },
        { "trigger": "PDF_fit_image()", "contents": "PDF_fit_image(${1:pdfdoc}, ${2:image}, ${3:x}, ${4:y}, ${5:optlist})$0" },
        { "trigger": "PDF_fit_pdi_page()", "contents": "PDF_fit_pdi_page(${1:pdfdoc}, ${2:page}, ${3:x}, ${4:y}, ${5:optlist})$0" },
        { "trigger": "PDF_fit_table()", "contents": "PDF_fit_table(${1:pdfdoc}, ${2:table}, ${3:llx}, ${4:lly}, ${5:urx}, ${6:ury}, ${7:optlist})$0" },
        { "trigger": "PDF_fit_textflow()", "contents": "PDF_fit_textflow(${1:pdfdoc}, ${2:textflow}, ${3:llx}, ${4:lly}, ${5:urx}, ${6:ury}, ${7:optlist})$0" },
        { "trigger": "PDF_fit_textline()", "contents": "PDF_fit_textline(${1:pdfdoc}, ${2:text}, ${3:x}, ${4:y}, ${5:optlist})$0" },
        { "trigger": "PDF_get_apiname()", "contents": "PDF_get_apiname(${1:pdfdoc})$0" },
        { "trigger": "PDF_get_buffer()", "contents": "PDF_get_buffer(${1:p})$0" },
        { "trigger": "PDF_get_errmsg()", "contents": "PDF_get_errmsg(${1:pdfdoc})$0" },
        { "trigger": "PDF_get_errnum()", "contents": "PDF_get_errnum(${1:pdfdoc})$0" },
        { "trigger": "PDF_get_font()\tdeprecated ", "contents": "PDF_get_font($1)$0" },
        { "trigger": "PDF_get_fontname()\tdeprecated ", "contents": "PDF_get_fontname($1)$0" },
        { "trigger": "PDF_get_fontsize()\tdeprecated ", "contents": "PDF_get_fontsize($1)$0" },
        { "trigger": "PDF_get_image_height()\tdeprecated ", "contents": "PDF_get_image_height($1)$0" },
        { "trigger": "PDF_get_image_width()\tdeprecated ", "contents": "PDF_get_image_width($1)$0" },
        { "trigger": "PDF_get_majorversion()", "contents": "PDF_get_majorversion()" },
        { "trigger": "PDF_get_minorversion()", "contents": "PDF_get_minorversion()" },
        { "trigger": "PDF_get_parameter()", "contents": "PDF_get_parameter(${1:p}, ${2:key}, ${3:modifier})$0" },
        { "trigger": "PDF_get_pdi_parameter()", "contents": "PDF_get_pdi_parameter(${1:p}, ${2:key}, ${3:doc}, ${4:page}, ${5:reserved})$0" },
        { "trigger": "PDF_get_pdi_value()", "contents": "PDF_get_pdi_value(${1:p}, ${2:key}, ${3:doc}, ${4:page}, ${5:reserved})$0" },
        { "trigger": "PDF_get_value()", "contents": "PDF_get_value(${1:p}, ${2:key}, ${3:modifier})$0" },
        { "trigger": "PDF_info_font()", "contents": "PDF_info_font(${1:pdfdoc}, ${2:font}, ${3:keyword}, ${4:optlist})$0" },
        { "trigger": "PDF_info_matchbox()", "contents": "PDF_info_matchbox(${1:pdfdoc}, ${2:boxname}, ${3:num}, ${4:keyword})$0" },
        { "trigger": "PDF_info_table()", "contents": "PDF_info_table(${1:pdfdoc}, ${2:table}, ${3:keyword})$0" },
        { "trigger": "PDF_info_textflow()", "contents": "PDF_info_textflow(${1:pdfdoc}, ${2:textflow}, ${3:keyword})$0" },
        { "trigger": "PDF_info_textline()", "contents": "PDF_info_textline(${1:pdfdoc}, ${2:text}, ${3:keyword}, ${4:optlist})$0" },
        { "trigger": "PDF_initgraphics()", "contents": "PDF_initgraphics(${1:p})$0" },
        { "trigger": "PDF_lineto()", "contents": "PDF_lineto(${1:p}, ${2:x}, ${3:y})$0" },
        { "trigger": "PDF_load_3ddata()", "contents": "PDF_load_3ddata(${1:pdfdoc}, ${2:filename}, ${3:optlist})$0" },
        { "trigger": "PDF_load_font()", "contents": "PDF_load_font(${1:pdfdoc}, ${2:fontname}, ${3:encoding}, ${4:optlist})$0" },
        { "trigger": "PDF_load_iccprofile()", "contents": "PDF_load_iccprofile(${1:pdfdoc}, ${2:profilename}, ${3:optlist})$0" },
        { "trigger": "PDF_load_image()", "contents": "PDF_load_image(${1:pdfdoc}, ${2:imagetype}, ${3:filename}, ${4:optlist})$0" },
        { "trigger": "PDF_makespotcolor()", "contents": "PDF_makespotcolor(${1:p}, ${2:spotname})$0" },
        { "trigger": "PDF_moveto()", "contents": "PDF_moveto(${1:p}, ${2:x}, ${3:y})$0" },
        { "trigger": "PDF_new()", "contents": "PDF_new()" },
        { "trigger": "PDF_open_ccitt()", "contents": "PDF_open_ccitt(${1:pdfdoc}, ${2:filename}, ${3:width}, ${4:height}, ${5:BitReverse}, ${6:k}, ${7:Blackls1})$0" },
        { "trigger": "PDF_open_file()", "contents": "PDF_open_file(${1:p}, ${2:filename})$0" },
        { "trigger": "PDF_open_gif()\tdeprecated ", "contents": "PDF_open_gif($1)$0" },
        { "trigger": "PDF_open_image()", "contents": "PDF_open_image(${1:p}, ${2:imagetype}, ${3:source}, ${4:data}, ${5:length}, ${6:width}, ${7:height}, ${8:components}, ${9:bpc}, ${10:params})$0" },
        { "trigger": "PDF_open_image_file()", "contents": "PDF_open_image_file(${1:p}, ${2:imagetype}, ${3:filename}, ${4:stringparam}, ${5:intparam})$0" },
        { "trigger": "PDF_open_jpeg()\tdeprecated ", "contents": "PDF_open_jpeg($1)$0" },
        { "trigger": "PDF_open_memory_image()", "contents": "PDF_open_memory_image(${1:p}, ${2:image})$0" },
        { "trigger": "PDF_open_pdi()", "contents": "PDF_open_pdi(${1:pdfdoc}, ${2:filename}, ${3:optlist}, ${4:len})$0" },
        { "trigger": "PDF_open_pdi_document()", "contents": "PDF_open_pdi_document(${1:p}, ${2:filename}, ${3:optlist})$0" },
        { "trigger": "PDF_open_pdi_page()", "contents": "PDF_open_pdi_page(${1:p}, ${2:doc}, ${3:pagenumber}, ${4:optlist})$0" },
        { "trigger": "PDF_open_tiff()\tdeprecated ", "contents": "PDF_open_tiff($1)$0" },
        { "trigger": "PDF_pcos_get_number()", "contents": "PDF_pcos_get_number(${1:p}, ${2:doc}, ${3:path})$0" },
        { "trigger": "PDF_pcos_get_stream()", "contents": "PDF_pcos_get_stream(${1:p}, ${2:doc}, ${3:optlist}, ${4:path})$0" },
        { "trigger": "PDF_pcos_get_string()", "contents": "PDF_pcos_get_string(${1:p}, ${2:doc}, ${3:path})$0" },
        { "trigger": "PDF_place_image()", "contents": "PDF_place_image(${1:pdfdoc}, ${2:image}, ${3:x}, ${4:y}, ${5:scale})$0" },
        { "trigger": "PDF_place_pdi_page()", "contents": "PDF_place_pdi_page(${1:pdfdoc}, ${2:page}, ${3:x}, ${4:y}, ${5:sx}, ${6:sy})$0" },
        { "trigger": "PDF_process_pdi()", "contents": "PDF_process_pdi(${1:pdfdoc}, ${2:doc}, ${3:page}, ${4:optlist})$0" },
        { "trigger": "PDF_rect()", "contents": "PDF_rect(${1:p}, ${2:x}, ${3:y}, ${4:width}, ${5:height})$0" },
        { "trigger": "PDF_restore()", "contents": "PDF_restore(${1:p})$0" },
        { "trigger": "PDF_resume_page()", "contents": "PDF_resume_page(${1:pdfdoc}, ${2:optlist})$0" },
        { "trigger": "PDF_rotate()", "contents": "PDF_rotate(${1:p}, ${2:phi})$0" },
        { "trigger": "PDF_save()", "contents": "PDF_save(${1:p})$0" },
        { "trigger": "PDF_scale()", "contents": "PDF_scale(${1:p}, ${2:sx}, ${3:sy})$0" },
        { "trigger": "PDF_set_border_color()", "contents": "PDF_set_border_color(${1:p}, ${2:red}, ${3:green}, ${4:blue})$0" },
        { "trigger": "PDF_set_border_dash()", "contents": "PDF_set_border_dash(${1:pdfdoc}, ${2:black}, ${3:white})$0" },
        { "trigger": "PDF_set_border_style()", "contents": "PDF_set_border_style(${1:pdfdoc}, ${2:style}, ${3:width})$0" },
        { "trigger": "PDF_set_char_spacing()\tdeprecated ", "contents": "PDF_set_char_spacing($1)$0" },
        { "trigger": "PDF_set_duration()\tdeprecated ", "contents": "PDF_set_duration($1)$0" },
        { "trigger": "PDF_set_gstate()", "contents": "PDF_set_gstate(${1:pdfdoc}, ${2:gstate})$0" },
        { "trigger": "PDF_set_horiz_scaling()\tdeprecated ", "contents": "PDF_set_horiz_scaling($1)$0" },
        { "trigger": "PDF_set_info()", "contents": "PDF_set_info(${1:p}, ${2:key}, ${3:value})$0" },
        { "trigger": "PDF_set_info_author()\tdeprecated ", "contents": "PDF_set_info_author($1)$0" },
        { "trigger": "PDF_set_info_creator()\tdeprecated ", "contents": "PDF_set_info_creator($1)$0" },
        { "trigger": "PDF_set_info_keywords()\tdeprecated ", "contents": "PDF_set_info_keywords($1)$0" },
        { "trigger": "PDF_set_info_subject()\tdeprecated ", "contents": "PDF_set_info_subject($1)$0" },
        { "trigger": "PDF_set_info_title()\tdeprecated ", "contents": "PDF_set_info_title($1)$0" },
        { "trigger": "PDF_set_layer_dependency()", "contents": "PDF_set_layer_dependency(${1:pdfdoc}, ${2:type}, ${3:optlist})$0" },
        { "trigger": "PDF_set_leading()\tdeprecated ", "contents": "PDF_set_leading($1)$0" },
        { "trigger": "PDF_set_parameter()", "contents": "PDF_set_parameter(${1:p}, ${2:key}, ${3:value})$0" },
        { "trigger": "PDF_set_text_matrix()\tdeprecated ", "contents": "PDF_set_text_matrix($1)$0" },
        { "trigger": "PDF_set_text_pos()", "contents": "PDF_set_text_pos(${1:p}, ${2:x}, ${3:y})$0" },
        { "trigger": "PDF_set_text_rendering()\tdeprecated ", "contents": "PDF_set_text_rendering($1)$0" },
        { "trigger": "PDF_set_text_rise()\tdeprecated ", "contents": "PDF_set_text_rise($1)$0" },
        { "trigger": "PDF_set_value()", "contents": "PDF_set_value(${1:p}, ${2:key}, ${3:value})$0" },
        { "trigger": "PDF_set_word_spacing()\tdeprecated ", "contents": "PDF_set_word_spacing($1)$0" },
        { "trigger": "PDF_setcolor()", "contents": "PDF_setcolor(${1:p}, ${2:fstype}, ${3:colorspace}, ${4:c1}, ${5:c2}, ${6:c3}, ${7:c4})$0" },
        { "trigger": "PDF_setdash()", "contents": "PDF_setdash(${1:pdfdoc}, ${2:b}, ${3:w})$0" },
        { "trigger": "PDF_setdashpattern()", "contents": "PDF_setdashpattern(${1:pdfdoc}, ${2:optlist})$0" },
        { "trigger": "PDF_setflat()", "contents": "PDF_setflat(${1:pdfdoc}, ${2:flatness})$0" },
        { "trigger": "PDF_setfont()", "contents": "PDF_setfont(${1:pdfdoc}, ${2:font}, ${3:fontsize})$0" },
        { "trigger": "PDF_setgray()", "contents": "PDF_setgray(${1:p}, ${2:g})$0" },
        { "trigger": "PDF_setgray_fill()", "contents": "PDF_setgray_fill(${1:p}, ${2:g})$0" },
        { "trigger": "PDF_setgray_stroke()", "contents": "PDF_setgray_stroke(${1:p}, ${2:g})$0" },
        { "trigger": "PDF_setlinecap()", "contents": "PDF_setlinecap(${1:p}, ${2:linecap})$0" },
        { "trigger": "PDF_setlinejoin()", "contents": "PDF_setlinejoin(${1:p}, ${2:value})$0" },
        { "trigger": "PDF_setlinewidth()", "contents": "PDF_setlinewidth(${1:p}, ${2:width})$0" },
        { "trigger": "PDF_setmatrix()", "contents": "PDF_setmatrix(${1:p}, ${2:a}, ${3:b}, ${4:c}, ${5:d}, ${6:e}, ${7:f})$0" },
        { "trigger": "PDF_setmiterlimit()", "contents": "PDF_setmiterlimit(${1:pdfdoc}, ${2:miter})$0" },
        { "trigger": "PDF_setpolydash()\tdeprecated ", "contents": "PDF_setpolydash($1)$0" },
        { "trigger": "PDF_setrgbcolor()", "contents": "PDF_setrgbcolor(${1:p}, ${2:red}, ${3:green}, ${4:blue})$0" },
        { "trigger": "PDF_setrgbcolor_fill()", "contents": "PDF_setrgbcolor_fill(${1:p}, ${2:red}, ${3:green}, ${4:blue})$0" },
        { "trigger": "PDF_setrgbcolor_stroke()", "contents": "PDF_setrgbcolor_stroke(${1:p}, ${2:red}, ${3:green}, ${4:blue})$0" },
        { "trigger": "PDF_shading()", "contents": "PDF_shading(${1:pdfdoc}, ${2:shtype}, ${3:x0}, ${4:y0}, ${5:x1}, ${6:y1}, ${7:c1}, ${8:c2}, ${9:c3}, ${10:c4}, ${11:optlist})$0" },
        { "trigger": "PDF_shading_pattern()", "contents": "PDF_shading_pattern(${1:pdfdoc}, ${2:shading}, ${3:optlist})$0" },
        { "trigger": "PDF_shfill()", "contents": "PDF_shfill(${1:pdfdoc}, ${2:shading})$0" },
        { "trigger": "PDF_show()", "contents": "PDF_show(${1:pdfdoc}, ${2:text})$0" },
        { "trigger": "PDF_show_boxed()", "contents": "PDF_show_boxed(${1:p}, ${2:text}, ${3:left}, ${4:top}, ${5:width}, ${6:height}, ${7:mode}, ${8:feature})$0" },
        { "trigger": "PDF_show_xy()", "contents": "PDF_show_xy(${1:p}, ${2:text}, ${3:x}, ${4:y})$0" },
        { "trigger": "PDF_skew()", "contents": "PDF_skew(${1:p}, ${2:alpha}, ${3:beta})$0" },
        { "trigger": "PDF_stringwidth()", "contents": "PDF_stringwidth(${1:p}, ${2:text}, ${3:font}, ${4:fontsize})$0" },
        { "trigger": "PDF_stroke()", "contents": "PDF_stroke(${1:p})$0" },
        { "trigger": "PDF_suspend_page()", "contents": "PDF_suspend_page(${1:pdfdoc}, ${2:optlist})$0" },
        { "trigger": "PDF_translate()", "contents": "PDF_translate(${1:p}, ${2:tx}, ${3:ty})$0" },
        { "trigger": "PDF_utf16_to_utf8()", "contents": "PDF_utf16_to_utf8(${1:pdfdoc}, ${2:utf16string})$0" },
        { "trigger": "PDF_utf32_to_utf16()", "contents": "PDF_utf32_to_utf16(${1:pdfdoc}, ${2:utf32string}, ${3:ordering})$0" },
        { "trigger": "PDF_utf8_to_utf16()", "contents": "PDF_utf8_to_utf16(${1:pdfdoc}, ${2:utf8string}, ${3:ordering})$0" },
        */
        // PHP Data Objects
        "PDO",
        { "trigger": "PDO()\tctor", "contents": "PDO(${1:dsn}${2:[, username]}${3:[, password]}${4:[, driver_options]})$0" },
        { "trigger": "beginTransaction()\tPDO", "contents": "beginTransaction()" },
        { "trigger": "commmit()\tPDO", "contents": "commmit()" },
        { "trigger": "errorCode()\tPDO", "contents": "errorCode()" },
        { "trigger": "errorInfo()\tPDO", "contents": "errorInfo()" },
        { "trigger": "exec()\tPDO", "contents": "exec(${1:statement})$0" },
        { "trigger": "getAttribute()\tPDO", "contents": "getAttribute(${1:attribute})$0" },
        { "trigger": "getAvailableDrivers()\tPDO", "contents": "getAvailableDrivers()" },
        { "trigger": "inTransaction()\tPDO", "contents": "inTransaction()" },
        { "trigger": "lastInsertId()\tPDO", "contents": "lastInsertId(${1:[name]})$0" },
        { "trigger": "prepare()\tPDO", "contents": "prepare(${1:statement}${2:[, driver_options]})$0" },
        { "trigger": "query()\tPDO", "contents": "query(${1:statement})$0" },
        { "trigger": "quote()\tPDO", "contents": "quote(${1:string}${2:[, parameter_type]})$0" },
        { "trigger": "rollBack()\tPDO", "contents": "rollBack()" },
        { "trigger": "setAttribute()\tPDO", "contents": "setAttribute(${1:attribute}, ${2:value})$0" },
        "PDOException",
        "PDOStatement",
        { "trigger": "bindColumn()\tPDOStatement", "contents": "bindColumn(${1:column}, ${2:param}${3:[, type]}${4:[, maxlen]}${5:[, driverdata]})$0" },
        { "trigger": "bindParam()\tPDOStatement", "contents": "bindParam(${1:parameter}, ${2:variable}${3:[, data_type]}${4:[, length]}${5:[, driver_options]})$0" },
        { "trigger": "bindValue()\tPDOStatement", "contents": "bindValue(${1:parameter}, ${2:value}${3:[, data_type]})$0" },
        { "trigger": "closeCursor()\tPDOStatement", "contents": "closeCursor()" },
        { "trigger": "columnCount()\tPDOStatement", "contents": "columnCount()" },
        { "trigger": "debugDumpParams()\tPDOStatement", "contents": "debugDumpParams()" },
        { "trigger": "errorCode()\tPDOStatement", "contents": "errorCode()" },
        { "trigger": "errorInfo()\tPDOStatement", "contents": "errorInfo()" },
        { "trigger": "execute()\tPDOStatement", "contents": "execute(${1:[input_parameters]})$0" },
        { "trigger": "fetch()\tPDOStatement", "contents": "fetch(${1:[fetch_style]}${2:[, cursor_orientation]}${3:[, cursor_offset]})$0" },
        { "trigger": "fetchAll()\tPDOStatement", "contents": "fetchAll(${1:[fetch_style]}${2:[, fetch_argument]}${3:[, ctor_args]})$0" },
        { "trigger": "fetchColumn()\tPDOStatement", "contents": "fetchColumn(${1:[column_number]})$0" },
        { "trigger": "fetchObject()\tPDOStatement", "contents": "fetchObject(${1:[class_name]}${2:[, ctor_args]})$0" },
        { "trigger": "getAttribute()\tPDOStatement", "contents": "getAttribute(${1:attribute})$0" },
        { "trigger": "getColumnMeta()\tPDOStatement", "contents": "getColumnMeta(${1:column})$0" },
        { "trigger": "nextRowset()\tPDOStatement", "contents": "nextRowset()" },
        { "trigger": "rowCount()\tPDOStatement", "contents": "rowCount()" },
        { "trigger": "setAttribute()\tPDOStatement", "contents": "setAttribute(${1:attribute}, ${2:value})$0" },
        { "trigger": "setFetchMode()\tPDOStatement", "contents": "setFetchMode(${1:mode})$0" },

        { "trigger": "pfsockopen()", "contents": "pfsockopen(${1:hostname})$0" },
        { "trigger": "pfsockopen(full)", "contents": "pfsockopen(${1:hostname}${2:[, port]}${3:[, errno]}${4:[, errstr]}${5:[, timeout]})$0" },
        /* PostgreSQL database
        { "trigger": "pg_affected_rows()", "contents": "pg_affected_rows(${1:result})$0" },
        { "trigger": "pg_cancel_query()", "contents": "pg_cancel_query(${1:connection})$0" },
        { "trigger": "pg_client_encoding()", "contents": "pg_client_encoding(${1:[connection]})$0" },
        { "trigger": "pg_close()", "contents": "pg_close(${1:[connection]})$0" },
        { "trigger": "pg_connect()", "contents": "pg_connect(${1:connection_string})$0" },
        { "trigger": "pg_connection_busy()", "contents": "pg_connection_busy(${1:connection})$0" },
        { "trigger": "pg_connection_reset()", "contents": "pg_connection_reset(${1:connection})$0" },
        { "trigger": "pg_connection_status()", "contents": "pg_connection_status(${1:connection})$0" },
        { "trigger": "pg_convert()", "contents": "pg_convert(${1:connection}, ${2:table_name}, ${3:assoc_array})$0" },
        { "trigger": "pg_copy_from()", "contents": "pg_copy_from(${1:connection}, ${2:table_name}, ${3:rows})$0" },
        { "trigger": "pg_copy_to()", "contents": "pg_copy_to(${1:connection}, ${2:table_name})$0" },
        { "trigger": "pg_dbname()", "contents": "pg_dbname(${1:[connection]})$0" },
        { "trigger": "pg_delete()", "contents": "pg_delete(${1:connection}, ${2:table_name}, ${3:assoc_array})$0" },
        { "trigger": "pg_end_copy()", "contents": "pg_end_copy(${1:[connection]})$0" },
        { "trigger": "pg_escape_bytea()", "contents": "pg_escape_bytea(${1:[connection, ]}${2:data})$0" },
        { "trigger": "pg_escape_identifier()", "contents": "pg_escape_identifier(${1:[connection, ]}${2:data})$0" },
        { "trigger": "pg_escape_literal()", "contents": "pg_escape_literal(${1:[connection, ]}${2:data})$0" },
        { "trigger": "pg_escape_string()", "contents": "pg_escape_string(${1:[connection, ]}${2:data})$0" },
        { "trigger": "pg_execute()", "contents": "pg_execute(${1:[connection, ]}${2:stmtname}, ${3:params})$0" },
        { "trigger": "pg_fetch_all()", "contents": "pg_fetch_all(${1:result})$0" },
        { "trigger": "pg_fetch_all_columns()", "contents": "pg_fetch_all_columns(${1:result})$0" },
        { "trigger": "pg_fetch_array()", "contents": "pg_fetch_array(${1:result})$0" },
        { "trigger": "pg_fetch_assoc()", "contents": "pg_fetch_assoc(${1:result})$0" },
        { "trigger": "pg_fetch_object()", "contents": "pg_fetch_object(${1:result})$0" },
        { "trigger": "pg_fetch_result()", "contents": "pg_fetch_result(${1:result}, ${2:row}, ${3:field})$0" },
        { "trigger": "pg_fetch_row()", "contents": "pg_fetch_row(${1:result})$0" },
        { "trigger": "pg_field_is_null()", "contents": "pg_field_is_null(${1:result}, ${2:row}, ${3:field})$0" },
        { "trigger": "pg_field_name()", "contents": "pg_field_name(${1:result}, ${2:field_number})$0" },
        { "trigger": "pg_field_num()", "contents": "pg_field_num(${1:result}, ${2:field_name})$0" },
        { "trigger": "pg_field_prtlen()", "contents": "pg_field_prtlen(${1:result}, ${2:row_number}, ${3:field_name_or_number})$0" },
        { "trigger": "pg_field_size()", "contents": "pg_field_size(${1:result}, ${2:field_number})$0" },
        { "trigger": "pg_field_table()", "contents": "pg_field_table(${1:result}, ${2:field_number})$0" },
        { "trigger": "pg_field_type()", "contents": "pg_field_type(${1:result}, ${2:field_number})$0" },
        { "trigger": "pg_field_type_oid()", "contents": "pg_field_type_oid(${1:result}, ${2:field_number})$0" },
        { "trigger": "pg_free_result()", "contents": "pg_free_result(${1:result})$0" },
        { "trigger": "pg_get_notify()", "contents": "pg_get_notify(${1:connection})$0" },
        { "trigger": "pg_get_pid()", "contents": "pg_get_pid(${1:connection})$0" },
        { "trigger": "pg_get_result()", "contents": "pg_get_result(${1:[connection]})$0" },
        { "trigger": "pg_host()", "contents": "pg_host(${1:[connection]})$0" },
        { "trigger": "pg_insert()", "contents": "pg_insert(${1:connection}, ${2:table_name}, ${3:assoc_array})$0" },
        { "trigger": "pg_last_error()", "contents": "pg_last_error(${1:connection})$0" },
        { "trigger": "pg_last_notice()", "contents": "pg_last_notice(${1:connection})$0" },
        { "trigger": "pg_last_oid()", "contents": "pg_last_oid(${1:result})$0" },
        { "trigger": "pg_lo_close()", "contents": "pg_lo_close(${1:large_object})$0" },
        { "trigger": "pg_lo_create()", "contents": "pg_lo_create(${1:[connection, ]}${2:[object_id]})$0" },
        { "trigger": "pg_lo_export()", "contents": "pg_lo_export(${1:[connection, ]}${2:oid}, ${3:pathname})$0" },
        { "trigger": "pg_lo_import()", "contents": "pg_lo_import(${1:[connection, ]}${2:pathname}${3:[, object_id]})$0" },
        { "trigger": "pg_lo_open()", "contents": "pg_lo_open(${1:connection}, ${2:oid}, ${3:mode})$0" },
        { "trigger": "pg_lo_read()", "contents": "pg_lo_read(${1:large_object})$0" },
        { "trigger": "pg_lo_read_all()", "contents": "pg_lo_read_all(${1:large_object})$0" },
        { "trigger": "pg_lo_seek()", "contents": "pg_lo_seek(${1:large_object}, ${2:offset})$0" },
        { "trigger": "pg_lo_tell()", "contents": "pg_lo_tell(${1:large_object})$0" },
        { "trigger": "pg_lo_unlink()", "contents": "pg_lo_unlink(${1:connection}, ${2:oid})$0" },
        { "trigger": "pg_lo_write()", "contents": "pg_lo_write(${1:large_object}, ${2:data})$0" },
        { "trigger": "pg_meta_data()", "contents": "pg_meta_data(${1:connection}, ${2:table_name})$0" },
        { "trigger": "pg_num_fields()", "contents": "pg_num_fields(${1:result})$0" },
        { "trigger": "pg_num_rows()", "contents": "pg_num_rows(${1:result})$0" },
        { "trigger": "pg_options()", "contents": "pg_options(${1:[connection]})$0" },
        { "trigger": "pg_parameter_status()", "contents": "pg_parameter_status(${1:[connection], }${2:param_name})$0" },
        { "trigger": "pg_pconnect()", "contents": "pg_pconnect(${1:connection_string})$0" },
        { "trigger": "pg_ping()", "contents": "pg_ping(${1:[connection]})$0" },
        { "trigger": "pg_port()", "contents": "pg_port(${1:connection})$0" },
        { "trigger": "pg_prepare()", "contents": "pg_prepare(${1:[connection, ]}${2:stmtname}, ${3:query})$0" },
        { "trigger": "pg_put_line()", "contents": "pg_put_line(${1:[connection, ]}${2:data})$0" },
        { "trigger": "pg_query()", "contents": "pg_query(${1:[connection, ]}${2:query})$0" },
        { "trigger": "pg_query_params()", "contents": "pg_query_params(${1:[connection, ]}${2:query}, ${3:params})$0" },
        { "trigger": "pg_result_error()", "contents": "pg_result_error(${1:result})$0" },
        { "trigger": "pg_result_error_field()", "contents": "pg_result_error_field(${1:result}, ${2:fieldcode})$0" },
        { "trigger": "pg_result_seek()", "contents": "pg_result_seek(${1:result}, ${2:offset})$0" },
        { "trigger": "pg_result_status()", "contents": "pg_result_status(${1:result})$0" },
        { "trigger": "pg_select()", "contents": "pg_select(${1:connection}, ${2:table_name}, ${3:assoc_array})$0" },
        { "trigger": "pg_send_execute()", "contents": "pg_send_execute(${1:connection}, ${2:stmtname}, ${3:params})$0" },
        { "trigger": "pg_send_prepare()", "contents": "pg_send_prepare(${1:connection}, ${2:stmtname}, ${3:query})$0" },
        { "trigger": "pg_send_query()", "contents": "pg_send_query(${1:connection}, ${2:query})$0" },
        { "trigger": "pg_send_query_params()", "contents": "pg_send_query_params(${1:connection}, ${2:query}, ${3:params})$0" },
        { "trigger": "pg_set_client_encoding()", "contents": "pg_set_client_encoding(${1:[connection, ]}${2:encoding})$0" },
        { "trigger": "pg_set_error_verbosity()", "contents": "pg_set_error_verbosity(${1:[connection, ]}${2:verbosity})$0" },
        { "trigger": "pg_trace()", "contents": "pg_trace(${1:pathname})$0" },
        { "trigger": "pg_transaction_status()", "contents": "pg_transaction_status(${1:connection})$0" },
        { "trigger": "pg_tty()", "contents": "pg_tty(${1:[connection]})$0" },
        { "trigger": "pg_unescape_bytea()", "contents": "pg_unescape_bytea(${1:data})$0" },
        { "trigger": "pg_untrace()", "contents": "pg_untrace(${1:[connection]})$0" },
        { "trigger": "pg_update()", "contents": "pg_update(${1:connection}, ${2:table_name}, ${3:data}, ${4:condition})$0" },
        { "trigger": "pg_version()", "contents": "pg_version(${1:[connection]})$0" },
        */
        "Phar",
        { "trigger": "Phar()\tctor", "contents": "Phar(${1:fname}${2:[, flags]}${3:[, alias]})$0" },
        "PharData",
        { "trigger": "PharData()\tctor", "contents": "PharData(${1:fname}${2:[, flags]}${3:[, alias]}${4:[, format]})$0" },
        "PharException",
        "PharFileInfo",
        { "trigger": "PharFileInfo()\tctor", "contents": "PharFileInfo(${1:entry})$0" },
        { "trigger": "php_check_syntax()", "contents": "php_check_syntax(${1:filename}${2:[, error_message]})$0" },
        { "trigger": "php_ini_loaded_file()", "contents": "php_ini_loaded_file()" },
        { "trigger": "php_ini_scanned_files()", "contents": "php_ini_scanned_files()" },
        { "trigger": "php_logo_guid()", "contents": "php_logo_guid()" },
        { "trigger": "php_sapi_name()", "contents": "php_sapi_name()" },
        { "trigger": "php_strip_whitespace()", "contents": "php_strip_whitespace(${1:filename})$0" },
        { "trigger": "php_uname()", "contents": "php_uname(${1:[mode]})$0" },
        "php_user_filter",
        { "trigger": "phpcredits()", "contents": "phpcredits(${[flag=CREDITS_ALL]})$0" },
        { "trigger": "phpinfo()", "contents": "phpinfo(${1:[what=INFO_ALL]})$0" },
        { "trigger": "phpversion()", "contents": "phpversion(${1:[extension]})$0" },
        { "trigger": "pi()", "contents": "pi()" },
        { "trigger": "png2wbmp()", "contents": "png2wbmp(${1:pngname}, ${2:wbmpname}, ${3:dest_height}, ${4:dest_width}, ${5:threshold})$0" },
        { "trigger": "popen()", "contents": "popen(${1:command}, ${2:mode})$0" },
        { "trigger": "pos()", "contents": "pos(${1:array})$0" },
        /* POSIX - not available on Windows platforms
        { "trigger": "posix_access()", "contents": "posix_access(${1:file})$0" },
        { "trigger": "posix_ctermid()", "contents": "posix_ctermid()" },
        { "trigger": "posix_errno()", "contents": "posix_errno()" },
        { "trigger": "posix_get_last_error()", "contents": "posix_get_last_error()" },
        { "trigger": "posix_getcwd()", "contents": "posix_getcwd()" },
        { "trigger": "posix_getegid()", "contents": "posix_getegid()" },
        { "trigger": "posix_geteuid()", "contents": "posix_geteuid()" },
        { "trigger": "posix_getgid()", "contents": "posix_getgid()" },
        { "trigger": "posix_getgrgid()", "contents": "posix_getgrgid(${1:gid})$0" },
        { "trigger": "posix_getgrnam()", "contents": "posix_getgrnam(${1:name})$0" },
        { "trigger": "posix_getgroups()", "contents": "posix_getgroups()" },
        { "trigger": "posix_getlogin()", "contents": "posix_getlogin()" },
        { "trigger": "posix_getpgid()", "contents": "posix_getpgid(${1:pid})$0" },
        { "trigger": "posix_getpgrp()", "contents": "posix_getpgrp()" },
        { "trigger": "posix_getpid()", "contents": "posix_getpid()" },
        { "trigger": "posix_getppid()", "contents": "posix_getppid()" },
        { "trigger": "posix_getpwnam()", "contents": "posix_getpwnam(${1:username})$0" },
        { "trigger": "posix_getpwuid()", "contents": "posix_getpwuid(${1:uid})$0" },
        { "trigger": "posix_getrlimit()", "contents": "posix_getrlimit()" },
        { "trigger": "posix_getsid()", "contents": "posix_getsid(${1:pid})$0" },
        { "trigger": "posix_getuid()", "contents": "posix_getuid()" },
        { "trigger": "posix_initgroups()", "contents": "posix_initgroups(${1:name}, ${2:base_group_id})$0" },
        { "trigger": "posix_isatty()", "contents": "posix_isatty(${1:fd})$0" },
        { "trigger": "posix_kill()", "contents": "posix_kill(${1:pid}, ${2:sig})$0" },
        { "trigger": "posix_mkfifo()", "contents": "posix_mkfifo(${1:pathname}, ${2:mode})$0" },
        { "trigger": "posix_mknod()", "contents": "posix_mknod(${1:pathname}, ${2:mode})$0" },
        { "trigger": "posix_setegid()", "contents": "posix_setegid(${1:gid})$0" },
        { "trigger": "posix_seteuid()", "contents": "posix_seteuid(${1:uid})$0" },
        { "trigger": "posix_setgid()", "contents": "posix_setgid(${1:gid})$0" },
        { "trigger": "posix_setpgid()", "contents": "posix_setpgid(${1:pid}, ${2:pgid})$0" },
        { "trigger": "posix_setsid()", "contents": "posix_setsid()" },
        { "trigger": "posix_setuid()", "contents": "posix_setuid(${1:uid})$0" },
        { "trigger": "posix_strerror()", "contents": "posix_strerror(${1:errno})$0" },
        { "trigger": "posix_times()", "contents": "posix_times()" },
        { "trigger": "posix_ttyname()", "contents": "posix_ttyname(${1:fd})$0" },
        { "trigger": "posix_uname()", "contents": "posix_uname()" },
        */
        { "trigger": "pow()", "contents": "pow(${1:base}, ${2:exp})$0" },
        // PCRE functions
        { "trigger": "preg_filter()", "contents": "preg_filter(${1:pattern}, ${2:replacement}, ${3:subject}${4:[, limit]}${5:[, count]})$0" },
        { "trigger": "preg_grep()", "contents": "preg_grep(${1:pattern}, ${2:input}${3:[, flags]})$0" },
        { "trigger": "preg_last_error()", "contents": "preg_last_error()" },
        { "trigger": "preg_match()", "contents": "preg_match(${1:pattern}, ${2:subject}${3:[, matches]}${4:[, flags]}${5:[, offset]})$0" },
        { "trigger": "preg_match_all()", "contents": "preg_match_all(${1:pattern}, ${2:subject}${3:[, matches]}${4:[, flags]}${5:[, offset]})$0" },
        { "trigger": "preg_quote()", "contents": "preg_quote(${1:str}${2:[, delimiter]})$0" },
        { "trigger": "preg_replace()", "contents": "preg_replace(${1:pattern}, ${2:replacement}, ${3:subject}${4:[, limit]}${5:[, count]})$0" },
        { "trigger": "preg_replace_callback()", "contents": "preg_replace_callback(${1:pattern}, ${2:callback}, ${3:subject}${4:[, limit]}${5:[, count]})$0" },
        { "trigger": "preg_split()", "contents": "preg_split(${1:pattern}, ${2:subject}${3:[, limit]}${4:[, flags]})$0" },

        { "trigger": "prev()", "contents": "prev(${1:array})$0" },
        { "trigger": "print_r()", "contents": "print_r(${1:expression}${2:[, return]})$0" },
        // Printer - Windows only
        { "trigger": "printer_abort()", "contents": "printer_abort(${1:printer_handle})$0" },
        { "trigger": "printer_close()", "contents": "printer_close(${1:printer_handle})$0" },
        { "trigger": "printer_create_brush()", "contents": "printer_create_brush(${1:style}, ${2:color})$0" },
        { "trigger": "printer_create_dc()", "contents": "printer_create_dc(${1:printer_handle})$0" },
        { "trigger": "printer_create_font()", "contents": "printer_create_font(${1:face}, ${2:height}, ${3:width}, ${4:font_weight}, ${5:italic}, ${6:underline}, ${7:strikeout}, ${8:orientation})$0" },
        { "trigger": "printer_create_pen()", "contents": "printer_create_pen(${1:style}, ${2:width}, ${3:color})$0" },
        { "trigger": "printer_delete_brush()", "contents": "printer_delete_brush(${1:brush_handle})$0" },
        { "trigger": "printer_delete_dc()", "contents": "printer_delete_dc(${1:printer_handle})$0" },
        { "trigger": "printer_delete_font()", "contents": "printer_delete_font(${1:font_handle})$0" },
        { "trigger": "printer_delete_pen()", "contents": "printer_delete_pen(${1:pen_handle})$0" },
        { "trigger": "printer_draw_bmp()", "contents": "printer_draw_bmp(${1:printer_handle}, ${2:filename}, ${3:x}, ${4:y})$0" },
        { "trigger": "printer_draw_chord()", "contents": "printer_draw_chord(${1:printer_handle}, ${2:rec_x}, ${3:rec_y}, ${4:rec_x1}, ${5:rec_y1}, ${6:rad_x}, ${7:rad_y}, ${8:rad_x1}, ${9:rad_y1})$0" },
        { "trigger": "printer_draw_elipse()", "contents": "printer_draw_elipse(${1:printer_handle}, ${2:ul_x}, ${3:ul_y}, ${4:lr_x}, ${5:lr_y})$0" },
        { "trigger": "printer_draw_line()", "contents": "printer_draw_line(${1:printer_handle}, ${2:from_x}, ${3:from_y}, ${4:to_x}, ${5:to_y})$0" },
        { "trigger": "printer_draw_pie()", "contents": "printer_draw_pie(${1:printer_handle}, ${2:rec_x}, ${3:rec_y}, ${4:rec_x1}, ${5:rec_y1}, ${6:rad1_x}, ${7:rad1_y}, ${8:rad2_x}, ${9:rad2_y})$0" },
        { "trigger": "printer_draw_rectangle()", "contents": "printer_draw_rectangle(${1:printer_handle}, ${2:ul_x}, ${3:ul_y}, ${4:lr_x}, ${5:lr_y})$0" },
        { "trigger": "printer_draw_roundrect()", "contents": "printer_draw_roundrect(${1:printer_handle}, ${2:ul_x}, ${3:ul_y}, ${4:lr_x}, ${5:lr_y}, ${6:width}, ${7:height})$0" },
        { "trigger": "printer_draw_text()", "contents": "printer_draw_text(${1:printer_handle}, ${2:text}, ${3:x}, ${4:y})$0" },
        { "trigger": "printer_end_doc()", "contents": "printer_end_doc(${1:printer_handle})$0" },
        { "trigger": "printer_end_page()", "contents": "printer_end_page(${1:printer_handle})$0" },
        { "trigger": "printer_get_option()", "contents": "printer_get_option(${1:printer_handle}, ${2:option})$0" },
        { "trigger": "printer_list()", "contents": "printer_list(${1:enumtype})$0" },
        { "trigger": "printer_logical_fontheight()", "contents": "printer_logical_fontheight(${1:printer_handle}, ${2:height})$0" },
        { "trigger": "printer_open()", "contents": "printer_open(${1:[printername]})$0" },
        { "trigger": "printer_select_brush()", "contents": "printer_select_brush(${1:printer_handle}, ${2:brush_handle})$0" },
        { "trigger": "printer_select_font()", "contents": "printer_select_font(${1:printer_handle}, ${2:font_handle})$0" },
        { "trigger": "printer_select_pen()", "contents": "printer_select_pen(${1:printer_handle}, ${2:pen_handle})$0" },
        { "trigger": "printer_set_option()", "contents": "printer_set_option(${1:printer_handle}, ${2:option}, ${3:value})$0" },
        { "trigger": "printer_start_doc()", "contents": "printer_start_doc(${1:printer_handle})$0" },
        { "trigger": "printer_start_page()", "contents": "printer_start_page(${1:printer_handle})$0" },
        { "trigger": "printer_write()", "contents": "printer_write(${1:printer_handle}, ${2:content})$0" },

        { "trigger": "printf()", "contents": "printf(${1:format}${2:[, args]})$0" },

        { "trigger": "proc_close()", "contents": "proc_close(${1:process})$0" },
        { "trigger": "proc_get_status()", "contents": "proc_get_status(${1:process})$0" },
        { "trigger": "proc_nice()", "contents": "proc_nice(${1:increment})$0" },
        { "trigger": "proc_open()", "contents": "proc_open(${1:cmd}, ${2:descriptorspec}, ${3:pipes})$0" },
        { "trigger": "proc_terminate()", "contents": "proc_terminate(${1:process})$0" },

        { "trigger": "property_exists()", "contents": "property_exists(${1:class}, ${2:property})$0" },
        /* PostScript
        { "trigger": "ps_add_bookmark()", "contents": "ps_add_bookmark(${1:psdoc}, ${2:text})$0" },
        { "trigger": "ps_add_launchlink()", "contents": "ps_add_launchlink(${1:psdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:filename})$0" },
        { "trigger": "ps_add_locallink()", "contents": "ps_add_locallink(${1:psdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:page}, ${7:dest})$0" },
        { "trigger": "ps_add_note()", "contents": "ps_add_note(${1:psdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:contents}, ${7:title}, ${8:icon}, ${9:open})$0" },
        { "trigger": "ps_add_pdflink()", "contents": "ps_add_pdflink(${1:psdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:filename}, ${7:page}, ${8:dest})$0" },
        { "trigger": "ps_add_weblink()", "contents": "ps_add_weblink(${1:psdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:url})$0" },
        { "trigger": "ps_arc()", "contents": "ps_arc(${1:psdoc}, ${2:x}, ${3:y}, ${4:radius}, ${5:alpha}, ${6:beta})$0" },
        { "trigger": "ps_arcn()", "contents": "ps_arcn(${1:psdoc}, ${2:x}, ${3:y}, ${4:radius}, ${5:alpha}, ${6:beta})$0" },
        { "trigger": "ps_begin_page()", "contents": "ps_begin_page(${1:psdoc}, ${2:width}, ${3:height})$0" },
        { "trigger": "ps_begin_pattern()", "contents": "ps_begin_pattern(${1:psdoc}, ${2:width}, ${3:height}, ${4:xstep}, ${5:ystep}, ${6:painttype})$0" },
        { "trigger": "ps_begin_template()", "contents": "ps_begin_template(${1:psdoc}, ${2:width}, ${3:height})$0" },
        { "trigger": "ps_circle()", "contents": "ps_circle(${1:psdoc}, ${2:x}, ${3:y}, ${4:radius})$0" },
        { "trigger": "ps_clip()", "contents": "ps_clip(${1:psdoc})$0" },
        { "trigger": "ps_close()", "contents": "ps_close(${1:psdoc})$0" },
        { "trigger": "ps_close_image()", "contents": "ps_close_image(${1:psdoc}, ${2:imageid})$0" },
        { "trigger": "ps_closepath()", "contents": "ps_closepath(${1:psdoc})$0" },
        { "trigger": "ps_closepath_stroke()", "contents": "ps_closepath_stroke(${1:psdoc})$0" },
        { "trigger": "ps_continue_text()", "contents": "ps_continue_text(${1:psdoc}, ${2:text})$0" },
        { "trigger": "ps_curveto()", "contents": "ps_curveto(${1:psdoc}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:x3}, ${7:y3})$0" },
        { "trigger": "ps_delete()", "contents": "ps_delete(${1:psdoc})$0" },
        { "trigger": "ps_end_page()", "contents": "ps_end_page(${1:psdoc})$0" },
        { "trigger": "ps_end_pattern()", "contents": "ps_end_pattern(${1:psdoc})$0" },
        { "trigger": "ps_end_template()", "contents": "ps_end_template(${1:psdoc})$0" },
        { "trigger": "ps_fill()", "contents": "ps_fill(${1:psdoc})$0" },
        { "trigger": "ps_fill_stroke()", "contents": "ps_fill_stroke(${1:psdoc})$0" },
        { "trigger": "ps_findfont()", "contents": "ps_findfont(${1:psdoc}, ${2:fontname}, ${3:encoding})$0" },
        { "trigger": "ps_get_buffer()", "contents": "ps_get_buffer(${1:psdoc})$0" },
        { "trigger": "ps_get_parameter()", "contents": "ps_get_parameter(${1:psdoc}, ${2:name})$0" },
        { "trigger": "ps_get_value()", "contents": "ps_get_value(${1:psdoc}, ${2:name})$0" },
        { "trigger": "ps_hyphenate()", "contents": "ps_hyphenate(${1:psdoc}, ${2:text})$0" },
        { "trigger": "ps_include_file()", "contents": "ps_include_file(${1:psdoc}, ${2:file})$0" },
        { "trigger": "ps_lineto()", "contents": "ps_lineto(${1:psdoc}, ${2:x}, ${3:y})$0" },
        { "trigger": "ps_makespotcolor()", "contents": "ps_makespotcolor(${1:psdoc}, ${2:name})$0" },
        { "trigger": "ps_moveto()", "contents": "ps_moveto(${1:psdoc}, ${2:x}, ${3:y})$0" },
        { "trigger": "ps_new()", "contents": "ps_new()" },
        { "trigger": "ps_open_file()", "contents": "ps_open_file(${1:psdoc})$0" },
        { "trigger": "ps_open_image()", "contents": "ps_open_image(${1:psdoc}, ${2:type}, ${3:source}, ${4:data}, ${5:lenght}, ${6:width}, ${7:height}, ${8:components}, ${9:bpc}, ${10:params})$0" },
        { "trigger": "ps_open_image_file()", "contents": "ps_open_image_file(${1:psdoc}, ${2:type}, ${3:filename})$0" },
        { "trigger": "ps_open_memory_image()", "contents": "ps_open_memory_image(${1:psdoc}, ${2:gd})$0" },
        { "trigger": "ps_place_image()", "contents": "ps_place_image(${1:psdoc}, ${2:imageid}, ${3:x}, ${4:y}, ${5:scale})$0" },
        { "trigger": "ps_rect()", "contents": "ps_rect(${1:psdoc}, ${2:x}, ${3:y}, ${4:width}, ${5:height})$0" },
        { "trigger": "ps_restore()", "contents": "ps_restore(${1:psdoc})$0" },
        { "trigger": "ps_rotate()", "contents": "ps_rotate(${1:psdoc}, ${2:rot})$0" },
        { "trigger": "ps_save()", "contents": "ps_save(${1:psdoc})$0" },
        { "trigger": "ps_scale()", "contents": "ps_scale(${1:psdoc}, ${2:x}, ${3:y})$0" },
        { "trigger": "ps_set_border_color()", "contents": "ps_set_border_color(${1:psdoc}, ${2:red}, ${3:green}, ${4:blue})$0" },
        { "trigger": "ps_set_border_dash()", "contents": "ps_set_border_dash(${1:psdoc}, ${2:black}, ${3:white})$0" },
        { "trigger": "ps_set_border_style()", "contents": "ps_set_border_style(${1:psdoc}, ${2:style}, ${3:width})$0" },
        { "trigger": "ps_set_info()", "contents": "ps_set_info(${1:p}, ${2:key}, ${3:val})$0" },
        { "trigger": "ps_set_parameter()", "contents": "ps_set_parameter(${1:psdoc}, ${2:name}, ${3:value})$0" },
        { "trigger": "ps_set_text_pos()", "contents": "ps_set_text_pos(${1:psdoc}, ${2:x}, ${3:y})$0" },
        { "trigger": "ps_set_value()", "contents": "ps_set_value(${1:psdoc}, ${2:name}, ${3:value})$0" },
        { "trigger": "ps_setcolor()", "contents": "ps_setcolor(${1:psdoc}, ${2:type}, ${3:colorspace}, ${4:c1}, ${5:c2}, ${6:c3}, ${7:c4})$0" },
        { "trigger": "ps_setdash()", "contents": "ps_setdash(${1:psdoc}, ${2:on}, ${3:off})$0" },
        { "trigger": "ps_setflat()", "contents": "ps_setflat(${1:psdoc}, ${2:value})$0" },
        { "trigger": "ps_setfont()", "contents": "ps_setfont(${1:psdoc}, ${2:fontid}, ${3:size})$0" },
        { "trigger": "ps_setgray()", "contents": "ps_setgray(${1:psdoc}, ${2:gray})$0" },
        { "trigger": "ps_setlinecap()", "contents": "ps_setlinecap(${1:psdoc}, ${2:type})$0" },
        { "trigger": "ps_setlinejoin()", "contents": "ps_setlinejoin(${1:psdoc}, ${2:type})$0" },
        { "trigger": "ps_setlinewidth()", "contents": "ps_setlinewidth(${1:psdoc}, ${2:width})$0" },
        { "trigger": "ps_setmiterlimit()", "contents": "ps_setmiterlimit(${1:psdoc}, ${2:value})$0" },
        { "trigger": "ps_setoverprintmode()", "contents": "ps_setoverprintmode(${1:psdoc}, ${2:mode})$0" },
        { "trigger": "ps_setpolydash()", "contents": "ps_setpolydash(${1:psdoc}, ${2:arr})$0" },
        { "trigger": "ps_shading()", "contents": "ps_shading(${1:psdoc}, ${2:type}, ${3:x0}, ${4:y0}, ${5:x1}, ${6:y1}, ${7:c1}, ${8:c2}, ${9:c3}, ${10:c4}, ${11:optlist})$0" },
        { "trigger": "ps_shading_pattern()", "contents": "ps_shading_pattern(${1:psdoc}, ${2:shadingid}, ${3:optlist})$0" },
        { "trigger": "ps_shfill()", "contents": "ps_shfill(${1:psdoc}, ${2:shadingid})$0" },
        { "trigger": "ps_show()", "contents": "ps_show(${1:psdoc}, ${2:text})$0" },
        { "trigger": "ps_show2()", "contents": "ps_show2(${1:psdoc}, ${2:text}, ${3:len})$0" },
        { "trigger": "ps_show_boxed()", "contents": "ps_show_boxed(${1:psdoc}, ${2:text}, ${3:left}, ${4:bottom}, ${5:width}, ${6:height}, ${7:hmode})$0" },
        { "trigger": "ps_show_xy()", "contents": "ps_show_xy(${1:psdoc}, ${2:text}, ${3:x}, ${4:y})$0" },
        { "trigger": "ps_show_xy2()", "contents": "ps_show_xy2(${1:psdoc}, ${2:text}, ${3:len}, ${4:xcoor}, ${5:ycoor})$0" },
        { "trigger": "ps_string_geometry()", "contents": "ps_string_geometry(${1:psdoc}, ${2:text})$0" },
        { "trigger": "ps_stringwidth()", "contents": "ps_stringwidth(${1:psdoc}, ${2:text})$0" },
        { "trigger": "ps_stroke()", "contents": "ps_stroke(${1:psdoc})$0" },
        { "trigger": "ps_symbol()", "contents": "ps_symbol(${1:psdoc}, ${2:ord})$0" },
        { "trigger": "ps_symbol_name()", "contents": "ps_symbol_name(${1:psdoc}, ${2:ord})$0" },
        { "trigger": "ps_symbol_width()", "contents": "ps_symbol_width(${1:psdoc}, ${2:ord})$0" },
        { "trigger": "ps_translate()", "contents": "ps_translate(${1:psdoc}, ${2:x}, ${3:y})$0" },
        */
        { "trigger": "pspell_add_to_personal()", "contents": "pspell_add_to_personal(${1:dictionary_link}, ${2:word})$0" },
        { "trigger": "pspell_add_to_session()", "contents": "pspell_add_to_session(${1:dictionary_link}, ${2:word})$0" },
        { "trigger": "pspell_check()", "contents": "pspell_check(${1:dictionary_link}, ${2:word})$0" },
        { "trigger": "pspell_clear_session()", "contents": "pspell_clear_session(${1:dictionary_link})$0" },
        { "trigger": "pspell_config_create()", "contents": "pspell_config_create(${1:language})$0" },
        { "trigger": "pspell_config_data_dir()", "contents": "pspell_config_data_dir(${1:conf}, ${2:directory})$0" },
        { "trigger": "pspell_config_dict_dir()", "contents": "pspell_config_dict_dir(${1:conf}, ${2:directory})$0" },
        { "trigger": "pspell_config_ignore()", "contents": "pspell_config_ignore(${1:dictionary_link}, ${2:n})$0" },
        { "trigger": "pspell_config_mode()", "contents": "pspell_config_mode(${1:dictionary_link}, ${2:mode})$0" },
        { "trigger": "pspell_config_personal()", "contents": "pspell_config_personal(${1:dictionary_link}, ${2:file})$0" },
        { "trigger": "pspell_config_repl()", "contents": "pspell_config_repl(${1:dictionary_link}, ${2:file})$0" },
        { "trigger": "pspell_config_runtogether()", "contents": "pspell_config_runtogether(${1:dictionary_link}, ${2:flag})$0" },
        { "trigger": "pspell_config_save_repl()", "contents": "pspell_config_save_repl(${1:dictionary_link}, ${2:flag})$0" },
        { "trigger": "pspell_new()", "contents": "pspell_new(${1:language})$0" },
        { "trigger": "pspell_new_config()", "contents": "pspell_new_config(${1:config})$0" },
        { "trigger": "pspell_new_personal()", "contents": "pspell_new_personal(${1:personal}, ${2:language})$0" },
        { "trigger": "pspell_save_wordlist()", "contents": "pspell_save_wordlist(${1:dictionary_link})$0" },
        { "trigger": "pspell_store_replacement()", "contents": "pspell_store_replacement(${1:dictionary_link}, ${2:misspelled}, ${3:correct})$0" },
        { "trigger": "pspell_suggest()", "contents": "pspell_suggest(${1:dictionary_link}, ${2:word})$0" },

        { "trigger": "putenv()", "contents": "putenv(${1:setting})$0" },
        /* Paradox databases
        { "trigger": "px_close()", "contents": "px_close(${1:pxdoc})$0" },
        { "trigger": "px_create_fp()", "contents": "px_create_fp(${1:pxdoc}, ${2:file}, ${3:fielddesc})$0" },
        { "trigger": "px_date2string()", "contents": "px_date2string(${1:pxdoc}, ${2:value}, ${3:format})$0" },
        { "trigger": "px_delete()", "contents": "px_delete(${1:pxdoc})$0" },
        { "trigger": "px_delete_record()", "contents": "px_delete_record(${1:pxdoc}, ${2:num})$0" },
        { "trigger": "px_get_field()", "contents": "px_get_field(${1:pxdoc}, ${2:fieldno})$0" },
        { "trigger": "px_get_info()", "contents": "px_get_info(${1:pxdoc})$0" },
        { "trigger": "px_get_parameter()", "contents": "px_get_parameter(${1:pxdoc}, ${2:name})$0" },
        { "trigger": "px_get_record()", "contents": "px_get_record(${1:pxdoc}, ${2:num})$0" },
        { "trigger": "px_get_schema()", "contents": "px_get_schema(${1:pxdoc})$0" },
        { "trigger": "px_get_value()", "contents": "px_get_value(${1:pxdoc}, ${2:name})$0" },
        { "trigger": "px_insert_record()", "contents": "px_insert_record(${1:pxdoc}, ${2:data})$0" },
        { "trigger": "px_new()", "contents": "px_new()" },
        { "trigger": "px_numfields()", "contents": "px_numfields(${1:pxdoc})$0" },
        { "trigger": "px_numrecords()", "contents": "px_numrecords(${1:pxdoc})$0" },
        { "trigger": "px_open_fp()", "contents": "px_open_fp(${1:pxdoc}, ${2:file})$0" },
        { "trigger": "px_put_record()", "contents": "px_put_record(${1:pxdoc}, ${2:record})$0" },
        { "trigger": "px_retrieve_record()", "contents": "px_retrieve_record(${1:pxdoc}, ${2:num})$0" },
        { "trigger": "px_set_blob_file()", "contents": "px_set_blob_file(${1:pxdoc}, ${2:filename})$0" },
        { "trigger": "px_set_parameter()", "contents": "px_set_parameter(${1:pxdoc}, ${2:name}, ${3:value})$0" },
        { "trigger": "px_set_tablename()", "contents": "px_set_tablename(${1:pxdoc}, ${2:name})$0" },
        { "trigger": "px_set_targetencoding()", "contents": "px_set_targetencoding(${1:pxdoc}, ${2:encoding})$0" },
        { "trigger": "px_set_value()", "contents": "px_set_value(${1:pxdoc}, ${2:name}, ${3:value})$0" },
        { "trigger": "px_timestamp2string()", "contents": "px_timestamp2string(${1:pxdoc}, ${2:value}, ${3:format})$0" },
        { "trigger": "px_update_record()", "contents": "px_update_record(${1:pxdoc}, ${2:data}, ${3:num})$0" },
        */
        /* qtdom - not available on Windows - moved to PECL
        { "trigger": "qdom_error()", "contents": "qdom_error()" },
        { "trigger": "qdom_tree()", "contents": "qdom_tree(${1:doc})$0" },
        */
        { "trigger": "QuickHashIntHash()\tctor", "contents": "QuickHashIntHash(${1:size}${2:[, options]})$0" },
        { "trigger": "QuickHashIntSet()\tctor", "contents": "QuickHashIntSet(${1:size}${2:[, options]})$0" },
        { "trigger": "QuickHashIntStringHash()\tctor", "contents": "QuickHashIntStringHash(${1:size}${2:[, options]})$0" },
        { "trigger": "QuickHashStringIntHash()\tctor", "contents": "QuickHashStringIntHash(${1:size}${2:[, options]})$0" },
        { "trigger": "quoted_printable_decode()", "contents": "quoted_printable_decode(${1:str})$0" },
        { "trigger": "quoted_printable_encode()", "contents": "quoted_printable_encode(${1:str})$0" },
        { "trigger": "quotemeta()", "contents": "quotemeta(${1:str})$0" },
        { "trigger": "rad2deg()", "contents": "rad2deg(${1:number})$0" },
        /* Radius Authentication and Accounting - PECL extension
        { "trigger": "radius_acct_open()", "contents": "radius_acct_open()" },
        { "trigger": "radius_add_server()", "contents": "radius_add_server(${1:radius_handle}, ${2:hostname}, ${3:port}, ${4:secret}, ${5:timeout}, ${6:max_tries})$0" },
        { "trigger": "radius_auth_open()", "contents": "radius_auth_open()" },
        { "trigger": "radius_close()", "contents": "radius_close(${1:radius_handle})$0" },
        { "trigger": "radius_config()", "contents": "radius_config(${1:radius_handle}, ${2:file})$0" },
        { "trigger": "radius_create_request()", "contents": "radius_create_request(${1:radius_handle}, ${2:type})$0" },
        { "trigger": "radius_cvt_addr()", "contents": "radius_cvt_addr(${1:data})$0" },
        { "trigger": "radius_cvt_int()", "contents": "radius_cvt_int(${1:data})$0" },
        { "trigger": "radius_cvt_string()", "contents": "radius_cvt_string(${1:data})$0" },
        { "trigger": "radius_demangle()", "contents": "radius_demangle(${1:radius_handle}, ${2:mangled})$0" },
        { "trigger": "radius_demangle_mppe_key()", "contents": "radius_demangle_mppe_key(${1:radius_handle}, ${2:mangled})$0" },
        { "trigger": "radius_get_attr()", "contents": "radius_get_attr(${1:radius_handle})$0" },
        { "trigger": "radius_get_vendor_attr()", "contents": "radius_get_vendor_attr(${1:data})$0" },
        { "trigger": "radius_put_addr()", "contents": "radius_put_addr(${1:radius_handle}, ${2:type}, ${3:addr})$0" },
        { "trigger": "radius_put_attr()", "contents": "radius_put_attr(${1:radius_handle}, ${2:type}, ${3:value})$0" },
        { "trigger": "radius_put_int()", "contents": "radius_put_int(${1:radius_handle}, ${2:type}, ${3:value})$0" },
        { "trigger": "radius_put_string()", "contents": "radius_put_string(${1:radius_handle}, ${2:type}, ${3:value})$0" },
        { "trigger": "radius_put_vendor_addr()", "contents": "radius_put_vendor_addr(${1:radius_handle}, ${2:vendor}, ${3:type}, ${4:addr})$0" },
        { "trigger": "radius_put_vendor_attr()", "contents": "radius_put_vendor_attr(${1:radius_handle}, ${2:vendor}, ${3:type}, ${4:value})$0" },
        { "trigger": "radius_put_vendor_int()", "contents": "radius_put_vendor_int(${1:radius_handle}, ${2:vendor}, ${3:type}, ${4:value})$0" },
        { "trigger": "radius_put_vendor_string()", "contents": "radius_put_vendor_string(${1:radius_handle}, ${2:vendor}, ${3:type}, ${4:value})$0" },
        { "trigger": "radius_request_authenticator()", "contents": "radius_request_authenticator(${1:radius_handle})$0" },
        { "trigger": "radius_send_request()", "contents": "radius_send_request(${1:radius_handle})$0" },
        { "trigger": "radius_server_secret()", "contents": "radius_server_secret(${1:radius_handle})$0" },
        { "trigger": "radius_strerror()", "contents": "radius_strerror(${1:radius_handle})$0" },
        */
        { "trigger": "rand()", "contents": "rand(${1:[min, max]})$0" },
        { "trigger": "range()", "contents": "range(${1:low}, ${2:high})$0" },
        "RangeException",
        { "trigger": "rar_wrapper_cache_stats()", "contents": "rar_wrapper_cache_stats()" },
        "RarArchive",
        "RarEntry",
        "RarException",
        { "trigger": "rawurldecode()", "contents": "rawurldecode(${1:str})$0" },
        { "trigger": "rawurlencode()", "contents": "rawurlencode(${1:str})$0" },
        { "trigger": "read_exif_data()", "contents": "read_exif_data(${1:filename}${2:[, sections]}${3:[, arrays]}${4:[, thumbnail]})$0" },
        { "trigger": "readdir()", "contents": "readdir(${1:[dir_handle]})$0" },
        { "trigger": "readfile()", "contents": "readfile(${1:filename}${2:[, use_include_path]}${3:[, context]})$0" },
        { "trigger": "readgzfile()", "contents": "readgzfile(${1:filename}${2:[, use_include_path]})$0" },
        /* GNU Readline library - not available on Windows platforms
        { "trigger": "readline()", "contents": "readline(${1:[prompt]})$0" },
        { "trigger": "readline_add_history()", "contents": "readline_add_history(${1:line})$0" },
        { "trigger": "readline_callback_handler_install()", "contents": "readline_callback_handler_install(${1:prompt}, ${2:callback})$0" },
        { "trigger": "readline_callback_handler_remove()", "contents": "readline_callback_handler_remove()" },
        { "trigger": "readline_callback_read_char()", "contents": "readline_callback_read_char()" },
        { "trigger": "readline_clear_history()", "contents": "readline_clear_history()" },
        { "trigger": "readline_completion_function()", "contents": "readline_completion_function(${1:function})$0" },
        { "trigger": "readline_info()", "contents": "readline_info(${1:[varname]}${2:[, newvalue]})$0" },
        { "trigger": "readline_list_history()", "contents": "readline_list_history()" },
        { "trigger": "readline_on_new_line()", "contents": "readline_on_new_line()" },
        { "trigger": "readline_read_history()", "contents": "readline_read_history(${1:[filename]})$0" },
        { "trigger": "readline_redisplay()", "contents": "readline_redisplay()" },
        { "trigger": "readline_write_history()", "contents": "readline_write_history(${1:[filename]})$0" },
        */
        { "trigger": "readlink()", "contents": "readlink(${1:path})$0" },

        { "trigger": "realpath()", "contents": "realpath(${1:path})$0" },
        { "trigger": "realpath_cache_get()", "contents": "realpath_cache_get()" },
        { "trigger": "realpath_cache_size()", "contents": "realpath_cache_size()" },

        { "trigger": "recode()", "contents": "recode(${1:request}, ${2:string})$0" },
        { "trigger": "recode_file()", "contents": "recode_file(${1:request}, ${2:input}, ${3:output})$0" },
        { "trigger": "recode_string()", "contents": "recode_string(${1:request}, ${2:string})$0" },

        "RecursiveArrayIterator",
        { "trigger": "RecursiveCachingIterator()\tctor", "contents": "RecursiveCachingIterator(${1:iterator}${2:[, flags]})$0" },
        { "trigger": "RecursiveCallbackFilterIterator()\tctor", "contents": "RecursiveCallbackFilterIterator(${1:iterator}, ${2:callback})$0" },
        { "trigger": "RecursiveDirectoryIterator()\tctor", "contents": "RecursiveDirectoryIterator(${1:path}${2:[, flags]})$0" },
        { "trigger": "RecursiveFilterIterator()\tctor", "contents": "RecursiveFilterIterator(${1:iterator})$0" },
        "RecursiveIterator",
        { "trigger": "RecursiveIteratorIterator()\tctor", "contents": "RecursiveIteratorIterator(${1:iterator}${2:[, mode]}${3:[, flags]})$0" },
        { "trigger": "RecursiveRegexIterator()\tctor", "contents": "RecursiveRegexIterator(${1:iterator}, ${2:regex}${3:[, mode]}${4:[, flags]}${5:[, preg_flags]})$0" },
        { "trigger": "RecursiveTreeIterator()\tctor", "contents": "RecursiveTreeIterator(${1:it}${2:[, flags]}${3:[, cit_flags]}${4:[, mode]})$0" },

        "Reflection",
        { "trigger": "ReflectionClass()\tctor", "contents": "ReflectionClass(${1:argument})$0" },
        "ReflectionException",
        { "trigger": "ReflectionExtension()\tctor", "contents": "ReflectionExtension(${1:name})$0" },
        { "trigger": "ReflectionFunction()\tctor", "contents": "ReflectionFunction(${1:name})$0" },
        "ReflectionFunctionAbstract",
        { "trigger": "ReflectionMethod()\tctor", "contents": "ReflectionMethod(${1:class}, ${2:name})$0" },
        { "trigger": "ReflectionObject()\tctor", "contents": "ReflectionObject(${1:argument})$0" },
        { "trigger": "ReflectionParameter()\tctor", "contents": "ReflectionParameter(${1:function}, ${2:parameter})$0" },
        { "trigger": "ReflectionProperty()\tctor", "contents": "ReflectionProperty(${1:class}, ${2:name})$0" },
        { "trigger": "ReflectionZendExtension()\tctor", "contents": "ReflectionZendExtension(${1:name})$0" },

        "Reflector",
        "RegexIterator",
        { "trigger": "RegexIterator()\tctor", "contents": "RegexIterator(${1:iterator}, ${2:regex}${3:[, mode]}${4:[, flags]}${5:[, preg_flags]})$0" },
        { "trigger": "register_shutdown_function()", "contents": "register_shutdown_function(${1:function})$0" },
        { "trigger": "register_tick_function()", "contents": "register_tick_function(${1:function})$0" },
        { "trigger": "rename()", "contents": "rename(${1:oldname}, ${2:newname}${3:[, context]})$0" },
        { "trigger": "rename_function()", "contents": "rename_function(${1:original_name}, ${2:new_name})$0" },
        // { "trigger": "require()", "contents": "require($1)$0" },
        // { "trigger": "require_once()", "contents": "require_once($1)$0" },
        { "trigger": "reset()", "contents": "reset(${1:array})$0" },
        { "trigger": "resetValue()", "contents": "resetValue()" },
        { "trigger": "ResourceBundle()\tctor", "contents": "ResourceBundle(${1:locale}, ${2:bundlename}${3:[, fallback]})$0" },
        { "trigger": "restore_error_handler()", "contents": "restore_error_handler()" },
        { "trigger": "restore_exception_handler()", "contents": "restore_exception_handler()" },
        { "trigger": "restore_include_path()", "contents": "restore_include_path()" },
        { "trigger": "rewind()", "contents": "rewind(${1:handle}${2:[, context]})$0" },
        { "trigger": "rewinddir()", "contents": "rewinddir(${1:[dir_handle]})$0" },
        { "trigger": "rmdir()", "contents": "rmdir(${1:dirname}${2:[, context]})$0" },
        { "trigger": "round()", "contents": "round(${1:val}${2:[, precision]}${3:[, mode]})$0" },
        // RedHat Package Manager
        { "trigger": "rpm_close()", "contents": "rpm_close(${1:rpmr})$0" },
        { "trigger": "rpm_get_tag()", "contents": "rpm_get_tag(${1:rpmr}, ${2:tagnum})$0" },
        { "trigger": "rpm_is_valid()", "contents": "rpm_is_valid(${1:filename})$0" },
        { "trigger": "rpm_open()", "contents": "rpm_open(${1:filename})$0" },
        { "trigger": "rpm_version()", "contents": "rpm_version()" },
        // RRDtool
        { "trigger": "rrd_create()", "contents": "rrd_create(${1:filename}, ${2:options})$0" },
        { "trigger": "rrd_error()", "contents": "rrd_error()" },
        { "trigger": "rrd_fetch()", "contents": "rrd_fetch(${1:filename}, ${2:options})$0" },
        { "trigger": "rrd_first()", "contents": "rrd_first(${1:file}${2:[, raaindex]})$0" },
        { "trigger": "rrd_graph()", "contents": "rrd_graph(${1:filename}, ${2:options})$0" },
        { "trigger": "rrd_info()", "contents": "rrd_info(${1:filename})$0" },
        { "trigger": "rrd_last()", "contents": "rrd_last(${1:filename})$0" },
        { "trigger": "rrd_lastupdate()", "contents": "rrd_lastupdate(${1:filename})$0" },
        { "trigger": "rrd_restore()", "contents": "rrd_restore(${1:xml_file}, ${2:rrd_file}${3:[, options]})$0" },
        { "trigger": "rrd_tune()", "contents": "rrd_tune(${1:filename}, ${2:options})$0" },
        { "trigger": "rrd_update()", "contents": "rrd_update(${1:filename}, ${2:options})$0" },
        { "trigger": "rrd_version()", "contents": "rrd_version()" },
        { "trigger": "rrd_xport()", "contents": "rrd_xport(${1:options})$0" },
        { "trigger": "RRDCreator()\tctor", "contents": "RRDCreator(${1:path}${2:[, startTime]}${3:[, step]})$0" },
        { "trigger": "RRDGraph()\tctor", "contents": "RRDGraph(${1:path})$0" },
        { "trigger": "RRDUpdater()\tctor", "contents": "RRDUpdater(${1:path})$0" },

        { "trigger": "rsort()", "contents": "rsort(${1:array}${2:[, sort_flags]})$0" },
        { "trigger": "rtrim()", "contents": "rtrim(${1:str}${2:[, charlist]})$0" },
        /* runkit - could be un-commented (no special requirements/installation)
        { "trigger": "runkit_class_adopt()", "contents": "runkit_class_adopt(${1:classname}, ${2:parentname})$0" },
        { "trigger": "runkit_class_emancipate()", "contents": "runkit_class_emancipate(${1:classname})$0" },
        { "trigger": "runkit_constant_add()", "contents": "runkit_constant_add(${1:constname}, ${2:value})$0" },
        { "trigger": "runkit_constant_redefine()", "contents": "runkit_constant_redefine(${1:constname}, ${2:newvalue})$0" },
        { "trigger": "runkit_constant_remove()", "contents": "runkit_constant_remove(${1:constname})$0" },
        { "trigger": "runkit_function_add()", "contents": "runkit_function_add(${1:funcname}, ${2:arglist}, ${3:code})$0" },
        { "trigger": "runkit_function_copy()", "contents": "runkit_function_copy(${1:funcname}, ${2:targetname})$0" },
        { "trigger": "runkit_function_redefine()", "contents": "runkit_function_redefine(${1:funcname}, ${2:arglist}, ${3:code})$0" },
        { "trigger": "runkit_function_remove()", "contents": "runkit_function_remove(${1:funcname})$0" },
        { "trigger": "runkit_function_rename()", "contents": "runkit_function_rename(${1:funcname}, ${2:newname})$0" },
        { "trigger": "runkit_import()", "contents": "runkit_import(${1:filename})$0" },
        { "trigger": "runkit_lint()", "contents": "runkit_lint(${1:code})$0" },
        { "trigger": "runkit_lint_file()", "contents": "runkit_lint_file(${1:filename})$0" },
        { "trigger": "runkit_method_add()", "contents": "runkit_method_add(${1:classname}, ${2:methodname}, ${3:args}, ${4:code})$0" },
        { "trigger": "runkit_method_copy()", "contents": "runkit_method_copy(${1:dClass}, ${2:dMethod}, ${3:sClass})$0" },
        { "trigger": "runkit_method_redefine()", "contents": "runkit_method_redefine(${1:classname}, ${2:methodname}, ${3:args}, ${4:code})$0" },
        { "trigger": "runkit_method_remove()", "contents": "runkit_method_remove(${1:classname}, ${2:methodname})$0" },
        { "trigger": "runkit_method_rename()", "contents": "runkit_method_rename(${1:classname}, ${2:methodname}, ${3:newname})$0" },
        { "trigger": "runkit_return_value_used()", "contents": "runkit_return_value_used()" },
        { "trigger": "runkit_sandbox_output_handler()", "contents": "runkit_sandbox_output_handler(${1:sandbox})$0" },
        { "trigger": "runkit_superglobals()", "contents": "runkit_superglobals()" },
        */
        "RuntimeException",
        { "trigger": "scandir()", "contents": "scandir(${1:directory}${2:[, sorting_order]}${3:[, context]})$0" },
        "SeekableIterator",
        // Semaphore - not available on Windows platforms
        { "trigger": "sem_acquire()", "contents": "sem_acquire(${1:sem_identifier})$0" },
        { "trigger": "sem_get()", "contents": "sem_get(${1:key})$0" },
        { "trigger": "sem_release()", "contents": "sem_release(${1:sem_identifier})$0" },
        { "trigger": "sem_remove()", "contents": "sem_remove(${1:sem_identifier})$0" },

        "Serializable",
        { "trigger": "serialize()", "contents": "serialize(${1:value})$0" },

        { "trigger": "session_cache_expire()", "contents": "session_cache_expire(${1:[new_cache_expire]})$0" },
        { "trigger": "session_cache_limiter()", "contents": "session_cache_limiter(${1:[cache_limiter]})$0" },
        { "trigger": "session_commit()", "contents": "session_commit()" },
        { "trigger": "session_decode()", "contents": "session_decode(${1:data})$0" },
        { "trigger": "session_destroy()", "contents": "session_destroy()" },
        { "trigger": "session_encode()", "contents": "session_encode()" },
        { "trigger": "session_get_cookie_params()", "contents": "session_get_cookie_params()" },
        { "trigger": "session_id()", "contents": "session_id(${1:[id]})$0" },
        { "trigger": "session_is_registered()\tdeprecated 5.3.x", "contents": "session_is_registered(${1:name})$0" },
        { "trigger": "session_module_name()", "contents": "session_module_name(${1:[module]})$0" },
        { "trigger": "session_name()", "contents": "session_name(${1:[name]})$0" },
        /* PostgreSQL - not available on Windows platforms
        { "trigger": "session_pgsql_add_error()", "contents": "session_pgsql_add_error(${1:error_level})$0" },
        { "trigger": "session_pgsql_get_error()", "contents": "session_pgsql_get_error(${1:[with_error_message]})$0" },
        { "trigger": "session_pgsql_get_field()", "contents": "session_pgsql_get_field()" },
        { "trigger": "session_pgsql_reset()", "contents": "session_pgsql_reset()" },
        { "trigger": "session_pgsql_set_field()", "contents": "session_pgsql_set_field(${1:value})$0" },
        { "trigger": "session_pgsql_status()", "contents": "session_pgsql_status()" },
        */
        { "trigger": "session_regenerate_id()", "contents": "session_regenerate_id(${1:[delete_old_session]})$0" },
        { "trigger": "session_register()\tdeprecated 5.3.x", "contents": "session_register(${1:name})$0" },
        { "trigger": "session_register_shutdown()", "contents": "session_register_shutdown()" },
        { "trigger": "session_save_path()", "contents": "session_save_path(${1:[path]})$0" },
        { "trigger": "session_set_cookie_params()", "contents": "session_set_cookie_params(${1:lifetime})$0" },
        { "trigger": "session_set_save_handler()", "contents": "session_set_save_handler(${1:open}, ${2:close}, ${3:read}, ${4:write}, ${5:destroy}, ${6:gc})$0" },
        { "trigger": "session_start()", "contents": "session_start()" },
        { "trigger": "session_status()", "contents": "session_status()" },
        { "trigger": "session_unregister()\tdeprecated 5.3.x", "contents": "session_unregister(${1:name})$0" },
        { "trigger": "session_unset()", "contents": "session_unset()" },
        { "trigger": "session_write_close()", "contents": "session_write_close()" },

        "SessionHandler",
        "SessionHandlerInterface",

        { "trigger": "set_error_handler()", "contents": "set_error_handler(${1:error_handler})$0" },
        { "trigger": "set_exception_handler()", "contents": "set_exception_handler(${1:exception_handler})$0" },
        { "trigger": "set_file_buffer()", "contents": "set_file_buffer(${1:stream}, ${2:buffer})$0" },
        { "trigger": "set_include_path()", "contents": "set_include_path(${1:new_include_path})$0" },
        { "trigger": "set_magic_quotes_runtime()\tdeprecated 5.3.x", "contents": "set_magic_quotes_runtime(${1:new_setting})$0" },
        { "trigger": "set_socket_blocking()\tdeprecated ", "contents": "set_socket_blocking(${1:stream}, ${2:mode})$0" },
        { "trigger": "set_time_limit()", "contents": "set_time_limit(${1:seconds})$0" },
        { "trigger": "setcookie()", "contents": "setcookie(${1:name}${2:[, value]})$0" },
        { "trigger": "setcookie(full)", "contents": "setcookie(${1:name}${2:[, value]}${3:[, expire]}${4:[, path]}${5:[, domain]}${6:[, secure]}${7:[, httponly]})$0" },
        { "trigger": "setCounterClass()", "contents": "setCounterClass(${1:name})$0" },
        { "trigger": "setlocale()", "contents": "setlocale(${1:category}, ${2:locale})$0" },
        { "trigger": "setproctitle()", "contents": "setproctitle(${1:title})$0" },
        { "trigger": "setrawcookie()", "contents": "setrawcookie(${1:name}${2:[, value]})$0" },
        { "trigger": "setrawcookie(full)", "contents": "setcookie(${1:name}${2:[, value]}${3:[, expire]}${4:[, path]}${5:[, domain]}${6:[, secure]}${7:[, httponly]})$0" },
        { "trigger": "setStaticPropertyValue()", "contents": "setStaticPropertyValue(${1:name}, ${2:value})$0" },
        { "trigger": "setthreadtitle()", "contents": "setthreadtitle(${1:title})$0" },
        { "trigger": "settype()", "contents": "settype(${1:var}, ${2:type})$0" },
        { "trigger": "sha1()", "contents": "sha1(${1:str}${2:[, raw_output]})$0" },
        { "trigger": "sha1_file()", "contents": "sha1_file(${1:filename}${2:[, raw_output]})$0" },
        { "trigger": "shell_exec()", "contents": "shell_exec(${1:cmd})$0" },
        /* Semaphore functions - not available on Windows platforms
        { "trigger": "shm_attach()", "contents": "shm_attach(${1:key})$0" },
        { "trigger": "shm_detach()", "contents": "shm_detach(${1:shm_identifier})$0" },
        { "trigger": "shm_get_var()", "contents": "shm_get_var(${1:shm_identifier}, ${2:variable_key})$0" },
        { "trigger": "shm_has_var()", "contents": "shm_has_var(${1:shm_identifier}, ${2:variable_key})$0" },
        { "trigger": "shm_put_var()", "contents": "shm_put_var(${1:shm_identifier}, ${2:variable_key}, ${3:variable})$0" },
        { "trigger": "shm_remove()", "contents": "shm_remove(${1:shm_identifier})$0" },
        { "trigger": "shm_remove_var()", "contents": "shm_remove_var(${1:shm_identifier}, ${2:variable_key})$0" },
        */
        // Shared Memory functions
        { "trigger": "shmop_close()", "contents": "shmop_close(${1:shmid})$0" },
        { "trigger": "shmop_delete()", "contents": "shmop_delete(${1:shmid})$0" },
        { "trigger": "shmop_open()", "contents": "shmop_open(${1:key}, ${2:flags}, ${3:mode}, ${4:size})$0" },
        { "trigger": "shmop_read()", "contents": "shmop_read(${1:shmid}, ${2:start}, ${3:count})$0" },
        { "trigger": "shmop_size()", "contents": "shmop_size(${1:shmid})$0" },
        { "trigger": "shmop_write()", "contents": "shmop_write(${1:shmid}, ${2:data}, ${3:offset})$0" },

        { "trigger": "show_source()", "contents": "show_source(${1:filename}${2:[, return]})$0" },
        { "trigger": "shuffle()", "contents": "shuffle(${1:array})$0" },
        { "trigger": "signeurlpaiement()", "contents": "signeurlpaiement(${1:clent}, ${2:data})$0" },
        { "trigger": "similar_text()", "contents": "similar_text(${1:first}, ${2:second}${3:[, percent]})$0" },

        "SimpleXMLElement",
        { "trigger": "SimpleXMLElement()\tctor", "contents": "SimpleXMLElement(${1:data}${2:[, options]}${3:[, data_is_url]}${4:[, ns]}${5:[, is_prefix]})$0" },
        "SimpleXMLIterator",
        { "trigger": "SimpleXMLIterator()\tctor", "contents": "SimpleXMLIterator(${1:data}${2:[, options]}${3:[, data_is_url]}${4:[, ns]}${5:[, is_prefix]})$0" },
        { "trigger": "simplexml_import_dom()", "contents": "simplexml_import_dom(${1:node}${2:[, class_name]})$0" },
        { "trigger": "simplexml_load_file()", "contents": "simplexml_load_file(${1:filename})$0" },
        { "trigger": "simplexml_load_file(full)", "contents": "simplexml_load_file(${1:filename}${2:[, class_name]}${3:[, options]}${4:[, ns]}${5:[, is_prefix]})$0" },
        { "trigger": "simplexml_load_string()", "contents": "simplexml_load_string(${1:data})$0" },
        { "trigger": "simplexml_load_string(full)", "contents": "simplexml_load_string(${1:data}${2:[, class_name]}${3:[, options]}${4:[, ns]}${5:[, is_prefix]})$0" },

        { "trigger": "sin()", "contents": "sin(${1:arg})$0" },
        { "trigger": "sinh()", "contents": "sinh(${1:arg})$0" },
        { "trigger": "sizeof()", "contents": "sizeof(${1:var}${2:[, mode=COUNT_NORMAL]})$0" },
        { "trigger": "sleep()", "contents": "sleep(${1:seconds})$0" },
        // Simple Network Management Protocol
        "SNMP",
        { "trigger": "SNMP()\tctor", "contents": "SNMP(${1:version}, ${2:hostname}, ${3:community}${4:[, timeout]}${5:[, retries]})$0" },
        { "trigger": "snmp2_get()", "contents": "snmp2_get(${1:host}, ${2:community}, ${3:object_id})$0" },
        { "trigger": "snmp2_getnext()", "contents": "snmp2_getnext(${1:host}, ${2:community}, ${3:object_id})$0" },
        { "trigger": "snmp2_real_walk()", "contents": "snmp2_real_walk(${1:host}, ${2:community}, ${3:object_id})$0" },
        { "trigger": "snmp2_set()", "contents": "snmp2_set(${1:host}, ${2:community}, ${3:object_id}, ${4:type}, ${5:value})$0" },
        { "trigger": "snmp2_walk()", "contents": "snmp2_walk(${1:host}, ${2:community}, ${3:object_id})$0" },
        { "trigger": "snmp3_get()", "contents": "snmp3_get(${1:host}, ${2:sec_name}, ${3:sec_level}, ${4:auth_protocol}, ${5:auth_passphrase}, ${6:priv_protocol}, ${7:priv_passphrase}, ${8:object_id})$0" },
        { "trigger": "snmp3_getnext()", "contents": "snmp3_getnext(${1:host}, ${2:sec_name}, ${3:sec_level}, ${4:auth_protocol}, ${5:auth_passphrase}, ${6:priv_protocol}, ${7:priv_passphrase}, ${8:object_id})$0" },
        { "trigger": "snmp3_real_walk()", "contents": "snmp3_real_walk(${1:host}, ${2:sec_name}, ${3:sec_level}, ${4:auth_protocol}, ${5:auth_passphrase}, ${6:priv_protocol}, ${7:priv_passphrase}, ${8:object_id})$0" },
        { "trigger": "snmp3_set()", "contents": "snmp3_set(${1:host}, ${2:sec_name}, ${3:sec_level}, ${4:auth_protocol}, ${5:auth_passphrase}, ${6:priv_protocol}, ${7:priv_passphrase}, ${8:object_id}, ${9:type}, ${10:value})$0" },
        { "trigger": "snmp3_walk()", "contents": "snmp3_walk(${1:host}, ${2:sec_name}, ${3:sec_level}, ${4:auth_protocol}, ${5:auth_passphrase}, ${6:priv_protocol}, ${7:priv_passphrase}, ${8:object_id})$0" },
        { "trigger": "snmp_get_quick_print()", "contents": "snmp_get_quick_print()" },
        { "trigger": "snmp_get_valueretrieval()", "contents": "snmp_get_valueretrieval()" },
        { "trigger": "snmp_read_mib()", "contents": "snmp_read_mib(${1:filename})$0" },
        { "trigger": "snmp_set_enum_print()", "contents": "snmp_set_enum_print(${1:enum_print})$0" },
        { "trigger": "snmp_set_oid_numeric_print()", "contents": "snmp_set_oid_numeric_print(${1:oid_numeric_print})$0" },
        { "trigger": "snmp_set_oid_output_format()", "contents": "snmp_set_oid_output_format(${1:oid_format = SNMP_OID_OUTPUT_MODULE})$0" },
        { "trigger": "snmp_set_quick_print()", "contents": "snmp_set_quick_print(${1:quick_print})$0" },
        { "trigger": "snmp_set_valueretrieval()", "contents": "snmp_set_valueretrieval(${1:method})$0" },
        "SNMPException",
        { "trigger": "snmpget()", "contents": "snmpget(${1:hostname}, ${2:community}, ${3:object_id})$0" },
        { "trigger": "snmpgetnext()", "contents": "snmpgetnext(${1:host}, ${2:community}, ${3:object_id})$0" },
        { "trigger": "snmprealwalk()", "contents": "snmprealwalk(${1:host}, ${2:community}, ${3:object_id})$0" },
        { "trigger": "snmpset()", "contents": "snmpset(${1:host}, ${2:community}, ${3:object_id}, ${4:type}, ${5:value})$0" },
        { "trigger": "snmpwalk()", "contents": "snmpwalk(${1:hostname}, ${2:community}, ${3:object_id})$0" },
        { "trigger": "snmpwalkoid()", "contents": "snmpwalkoid(${1:hostname}, ${2:community}, ${3:object_id})$0" },

        "SoapClient",
        { "trigger": "SoapClient()\tctor", "contents": "SoapClient(${1:wsdl}${2:[, options]})$0" },
        "SoapFault",
        { "trigger": "SoapFault()\tctor", "contents": "SoapFault(${1:faultcode}, ${2:faultstring}${3:[, faultactor]}${4:[, detail]}${5:[, faultname]}${6:[, headerfault]})$0" },
        "SoapHeader",
        { "trigger": "SoapHeader()\tctor", "contents": "SoapHeader(${1:namespace}, ${2:name}${3:[, data]}${4:[, mustunderstand]}${5:[, actor]})$0" },
        "SoapParam",
        { "trigger": "SoapParam()\tctor", "contents": "SoapParam(${1:data}, ${2:name})$0" },
        "SoapServer",
        { "trigger": "SoapServer()\tctor", "contents": "SoapServer(${1:wsdl}${2:[, options]})$0" },
        "SoapVar",
        { "trigger": "SoapVar()\tctor", "contents": "SoapVar(${1:data}, ${2:encoding}${3:[, type_name]}${4:[, type_namespace]}${5:[, node_name]}${6:[, node_namespace]})$0" },

        { "trigger": "socket_accept()", "contents": "socket_accept(${1:socket})$0" },
        { "trigger": "socket_bind()", "contents": "socket_bind(${1:socket}, ${2:address})$0" },
        { "trigger": "socket_clear_error()", "contents": "socket_clear_error(${1:socket})$0" },
        { "trigger": "socket_close()", "contents": "socket_close(${1:socket})$0" },
        { "trigger": "socket_connect()", "contents": "socket_connect(${1:socket}, ${2:address})$0" },
        { "trigger": "socket_create()", "contents": "socket_create(${1:domain}, ${2:type}, ${3:protocol})$0" },
        { "trigger": "socket_create_listen()", "contents": "socket_create_listen(${1:port})$0" },
        { "trigger": "socket_create_pair()", "contents": "socket_create_pair(${1:domain}, ${2:type}, ${3:protocol}, ${4:fd})$0" },
        { "trigger": "socket_get_option()", "contents": "socket_get_option(${1:socket}, ${2:level}, ${3:optname})$0" },
        { "trigger": "socket_get_status()", "contents": "socket_get_status(${1:stream})$0" },
        { "trigger": "socket_getpeername()", "contents": "socket_getpeername(${1:socket}, ${2:address})$0" },
        { "trigger": "socket_getsockname()", "contents": "socket_getsockname(${1:socket}, ${2:addr})$0" },
        { "trigger": "socket_import_stream()", "contents": "socket_import_stream(${1:stream})$0" },
        { "trigger": "socket_last_error()", "contents": "socket_last_error(£{1:[socket]})$0" },
        { "trigger": "socket_listen()", "contents": "socket_listen(${1:socket})$0" },
        { "trigger": "socket_read()", "contents": "socket_read(${1:socket}, ${2:length})$0" },
        { "trigger": "socket_recv()", "contents": "socket_recv(${1:socket}, ${2:buf}, ${3:len}, ${4:flags})$0" },
        { "trigger": "socket_recvfrom()", "contents": "socket_recvfrom(${1:socket}, ${2:buf}, ${3:len}, ${4:flags}, ${5:name})$0" },
        { "trigger": "socket_select()", "contents": "socket_select(${1:read}, ${2:write}, ${3:except}, ${4:tv_sec})$0" },
        { "trigger": "socket_send()", "contents": "socket_send(${1:socket}, ${2:buf}, ${3:len}, ${4:flags})$0" },
        { "trigger": "socket_sendto()", "contents": "socket_sendto(${1:socket}, ${2:buf}, ${3:len}, ${4:flags}, ${5:addr})$0" },
        { "trigger": "socket_set_block()", "contents": "socket_set_block(${1:socket})$0" },
        { "trigger": "socket_set_blocking()", "contents": "socket_set_blocking(${1:stream}, ${2:mode})$0" },
        { "trigger": "socket_set_nonblock()", "contents": "socket_set_nonblock(${1:socket})$0" },
        { "trigger": "socket_set_option()", "contents": "socket_set_option(${1:socket}, ${2:level}, ${3:optname}, ${4:optval})$0" },
        { "trigger": "socket_set_timeout()", "contents": "socket_set_timeout(${1:stream}, ${2:seconds}${3:[, microseconds]})$0" },
        { "trigger": "socket_shutdown()", "contents": "socket_shutdown(${1:socket})$0" },
        { "trigger": "socket_strerror()", "contents": "socket_strerror(${1:errno})$0" },
        { "trigger": "socket_write()", "contents": "socket_write(${1:socket}, ${2:buffer})$0" },
        // Apache Solr server
        { "trigger": "solr_get_version()", "contents": "solr_get_version()" },
        "SolrClient",
        { "trigger": "SolrClient()\tctor", "contents": "SolrClient(${1:clientOptions})$0" },
        "SolrClientException",
        "SolrDocument",
        "SolrDocumentField",
        "SolrException",
        "SolrGenericResponse",
        "SolrIllegalArgumentException",
        "SolrIllegalOperationException",
        "SolrInputDocument",
        "SolrModifiableParams",
        "SolrObject",
        "SolrParams",
        "SolrPingResponse",
        "SolrQuery",
        { "trigger": "SolrQuery()\tctor", "contents": "SolrQuery(${1:[q]})$0" },
        "SolrQueryResponse",
        "SolrResponse",
        "SolrUpdateResponse",
        "SolrUtils",

        { "trigger": "sort()", "contents": "sort(${1:array})$0" },
        { "trigger": "soundex()", "contents": "soundex(${1:str})$0" },
        "SphinxClient",
        // Standard PHP Library (SPL)
        { "trigger": "spl_autoload()", "contents": "spl_autoload(${1:class_name}${2:[, file_extensions]})$0" },
        { "trigger": "spl_autoload_call()", "contents": "spl_autoload_call(${1:class_name})$0" },
        { "trigger": "spl_autoload_extensions()", "contents": "spl_autoload_extensions(${1:[file_extensions]})$0" },
        { "trigger": "spl_autoload_functions()", "contents": "spl_autoload_functions()" },
        { "trigger": "spl_autoload_register()", "contents": "spl_autoload_register(${1:[autoload_function]}${2:[, throw]}${3:[, prepend]})$0" },
        { "trigger": "spl_autoload_unregister()", "contents": "spl_autoload_unregister(${1:autoload_function})$0" },
        { "trigger": "spl_classes()", "contents": "spl_classes()" },
        { "trigger": "spl_object_hash()", "contents": "spl_object_hash(${1:obj})$0" },
        "SplBool",
        "SplDoublyLinkedList",
        "SplEnum",
        { "trigger": "SplEnum()\tctor", "contents": "SplEnum(${1:[initial_value]}${2:[, strict]})$0" },
        "SplFileInfo",
        { "trigger": "SplFileInfo()\tctor", "contents": "SplFileInfo(${1:file_name})$0" },
        "SplFileObject",
        { "trigger": "SplFileObject()\tctor", "contents": "SplFileObject(${1:filename}${2:[, open_mode]}${3:[, use_include_path]}${4:[, context]})$0" },
        "SplFixedArray",
        { "trigger": "SplFixedArray()\tctor", "contents": "SplFixedArray(${1:[size=0]})$0" },
        "SplFloat",
        { "trigger": "SplFloat()\tctor", "contents": "SplFloat(${1:[initial_value]}${2:[, strict]})$0" },
        "SplHeap",
        "SplInt",
        { "trigger": "SplInt()\tctor", "contents": "SplInt(${1:[initial_value]}${2:[, strict]})$0" },

        { "trigger": "split()\tdeprecated ", "contents": "split(${1:pattern}, ${2:string}${3:[, limit]})$0" },
        { "trigger": "spliti()\tdeprecated ", "contents": "spliti(${1:pattern}, ${2:string}${3:[, limit]})$0" },

        "SplMaxHeap",
        "SplMinHeap",
        "SplObjectStorage",
        "SplObserver",
        "SplPriorityQueue",
        "SplQueue",
        "SplStack",
        "SplString",
        { "trigger": "SplString()\tctor", "contents": "SplString(${1:[initial_value]}${2:[, strict]})$0" },
        "SplSubject",
        "SplTempFileObject",
        { "trigger": "SplTempFileObject()\tctor", "contents": "SplTempFileObject(${1:[max_memory]})$0" },
        "SplType",
        { "trigger": "SplType()\tctor", "contents": "SplType(${1:[initial_value]}${2:[, strict]})$0" },

        "Spoofchecker",
        { "trigger": "sprintf()", "contents": "sprintf(${1:format}${2:[, args]})$0" },
        { "trigger": "sql_regcase()\tdeprecated 5.3.x", "contents": "sql_regcase(${1:string})$0" },

        "SQLite3",
        { "trigger": "SQLite3()\tctor", "contents": "SQLite3(${1:filename}${2:[, flags]}${3:[, encryption_key]})$0" },
        "SQLite3Result",
        "SQLite3Stmt",

        { "trigger": "sqlite_array_query()", "contents": "sqlite_array_query(${1:dbhandle}, ${2:query}${3:[, result_type]}${4:[, decode_binary]})$0" },
        { "trigger": "sqlite_busy_timeout()", "contents": "sqlite_busy_timeout(${1:dbhandle}, ${2:milliseconds})$0" },
        { "trigger": "sqlite_changes()", "contents": "sqlite_changes(${1:dbhandle})$0" },
        { "trigger": "sqlite_close()", "contents": "sqlite_close(${1:dbhandle})$0" },
        { "trigger": "sqlite_column()", "contents": "sqlite_column(${1:result}, ${2:index_or_name}${3:[, decode_binary]})$0" },
        { "trigger": "sqlite_create_aggregate()", "contents": "sqlite_create_aggregate(${1:dbhandle}, ${2:function_name}, ${3:step_func}, ${4:finalize_func}${5:[, num_args]})$0" },
        { "trigger": "sqlite_create_function()", "contents": "sqlite_create_function(${1:dbhandle}, ${2:function_name}, ${3:callback}${4:[, num_args]})$0" },
        { "trigger": "sqlite_current()", "contents": "sqlite_current(${1:result}${2:[, result_type]}${3:[, decode_binary]})$0" },
        { "trigger": "sqlite_error_string()", "contents": "sqlite_error_string(${1:error_code})$0" },
        { "trigger": "sqlite_escape_string()", "contents": "sqlite_escape_string(${1:item})$0" },
        { "trigger": "sqlite_exec()", "contents": "sqlite_exec(${1:dbhandle}, ${2:query}${3:[, error_msg]})$0" },
        { "trigger": "sqlite_factory()", "contents": "sqlite_factory(${1:filename}${2:[, mode]}${3:[, error_message]})$0" },
        { "trigger": "sqlite_fetch_all()", "contents": "sqlite_fetch_all(${1:result}${2:[, result_type]}${3:[, decode_binary]})$0" },
        { "trigger": "sqlite_fetch_array()", "contents": "sqlite_fetch_array(${1:result}${2:[, result_type]}${3:[, decode_binary]})$0" },
        { "trigger": "sqlite_fetch_column_types()", "contents": "sqlite_fetch_column_types(${1:table_name}, ${2:dbhandle}${3:[, result_type]})$0" },
        { "trigger": "sqlite_fetch_object()", "contents": "sqlite_fetch_object(${1:result})$0" },
        { "trigger": "sqlite_fetch_object(full)", "contents": "sqlite_fetch_object(${1:result}${2:[, class_name]}${3:[, ctor_params]}${4:[, decode_binary]})$0" },
        { "trigger": "sqlite_fetch_single()", "contents": "sqlite_fetch_single(${1:result}${2:[, decode_binary]})$0" },
        { "trigger": "sqlite_fetch_string()", "contents": "sqlite_fetch_string(${1:result}${2:[, decode_binary]})$0" },
        { "trigger": "sqlite_field_name()", "contents": "sqlite_field_name(${1:result}, ${2:field_index})$0" },
        { "trigger": "sqlite_has_more()", "contents": "sqlite_has_more(${1:result})$0" },
        { "trigger": "sqlite_has_prev()", "contents": "sqlite_has_prev(${1:result})$0" },
        { "trigger": "sqlite_key()", "contents": "sqlite_key(${1:result})$0" },
        { "trigger": "sqlite_last_error()", "contents": "sqlite_last_error(${1:dbhandle})$0" },
        { "trigger": "sqlite_last_insert_rowid()", "contents": "sqlite_last_insert_rowid(${1:dbhandle})$0" },
        { "trigger": "sqlite_libencoding()", "contents": "sqlite_libencoding()" },
        { "trigger": "sqlite_libversion()", "contents": "sqlite_libversion()" },
        { "trigger": "sqlite_next()", "contents": "sqlite_next(${1:result})$0" },
        { "trigger": "sqlite_num_fields()", "contents": "sqlite_num_fields(${1:result})$0" },
        { "trigger": "sqlite_num_rows()", "contents": "sqlite_num_rows(${1:result})$0" },
        { "trigger": "sqlite_open()", "contents": "sqlite_open(${1:filename}${2:[, mode]}${3:[, error_message]})$0" },
        { "trigger": "sqlite_popen()", "contents": "sqlite_popen(${1:filename}${2:[, mode]}${3:[, error_message]})$0" },
        { "trigger": "sqlite_prev()", "contents": "sqlite_prev(${1:result})$0" },
        { "trigger": "sqlite_query()", "contents": "sqlite_query(${1:dbhandle}, ${2:query}${3:[, result_type]}${4:[, error_msg]})$0" },
        { "trigger": "sqlite_rewind()", "contents": "sqlite_rewind(${1:result})$0" },
        { "trigger": "sqlite_seek()", "contents": "sqlite_seek(${1:result}, ${2:rownum})$0" },
        { "trigger": "sqlite_single_query()", "contents": "sqlite_single_query(${1:db}, ${2:query}${3:[, first_row_only]}${4:[, decode_binary]})$0" },
        { "trigger": "sqlite_udf_decode_binary()", "contents": "sqlite_udf_decode_binary(${1:data})$0" },
        { "trigger": "sqlite_udf_encode_binary()", "contents": "sqlite_udf_encode_binary(${1:data})$0" },
        { "trigger": "sqlite_unbuffered_query()", "contents": "sqlite_unbuffered_query(${1:dbhandle}, ${2:query}${3:[, result_type]}${4:[, error_msg]})$0" },
        { "trigger": "sqlite_valid()", "contents": "sqlite_valid(${1:result})$0" },

        { "trigger": "sqlsrv_begin_transaction()", "contents": "sqlsrv_begin_transaction(${1:conn})$0" },
        { "trigger": "sqlsrv_cancel()", "contents": "sqlsrv_cancel(${1:stmt})$0" },
        { "trigger": "sqlsrv_client_info()", "contents": "sqlsrv_client_info(${1:conn})$0" },
        { "trigger": "sqlsrv_close()", "contents": "sqlsrv_close(${1:conn})$0" },
        { "trigger": "sqlsrv_commit()", "contents": "sqlsrv_commit(${1:conn})$0" },
        { "trigger": "sqlsrv_configure()", "contents": "sqlsrv_configure(${1:setting}, ${2:value})$0" },
        { "trigger": "sqlsrv_connect()", "contents": "sqlsrv_connect(${1:serverName}${2:[connectionInfo]})$0" },
        { "trigger": "sqlsrv_errors()", "contents": "sqlsrv_errors(${1:[errorsOrWarnings]})$0" },
        { "trigger": "sqlsrv_execute()", "contents": "sqlsrv_execute(${1:stmt})$0" },
        { "trigger": "sqlsrv_fetch()", "contents": "sqlsrv_fetch(${1:stmt}${2:[, row]}${3:[, offset]})$0" },
        { "trigger": "sqlsrv_fetch_array()", "contents": "sqlsrv_fetch_array(${1:stmt}${2:[, fetchType]}${3:[, row]}${4:[, offset]})$0" },
        { "trigger": "sqlsrv_fetch_object()", "contents": "sqlsrv_fetch_object(${1:stmt}${2:[, className]}${3:[, ctorParams]}${4:[, offset]})$0" },
        { "trigger": "sqlsrv_field_metadata()", "contents": "sqlsrv_field_metadata(${1:stmt})$0" },
        { "trigger": "sqlsrv_free_stmt()", "contents": "sqlsrv_free_stmt(${1:stmt})$0" },
        { "trigger": "sqlsrv_get_config()", "contents": "sqlsrv_get_config(${1:setting})$0" },
        { "trigger": "sqlsrv_get_field()", "contents": "sqlsrv_get_field(${1:stmt}, ${2:fieldIndex}${3:[, getAsType]})$0" },
        { "trigger": "sqlsrv_has_rows()", "contents": "sqlsrv_has_rows(${1:stmt})$0" },
        { "trigger": "sqlsrv_next_result()", "contents": "sqlsrv_next_result(${1:stmt})$0" },
        { "trigger": "sqlsrv_num_fields()", "contents": "sqlsrv_num_fields(${1:stmt})$0" },
        { "trigger": "sqlsrv_num_rows()", "contents": "sqlsrv_num_rows(${1:stmt})$0" },
        { "trigger": "sqlsrv_prepare()", "contents": "sqlsrv_prepare(${1:conn}, ${2:sql}${3:[, params]}${4:[, options]})$0" },
        { "trigger": "sqlsrv_query()", "contents": "sqlsrv_query(${1:conn}, ${2:sql}${3:[, params]}${4:[, options]})$0" },
        { "trigger": "sqlsrv_rollback()", "contents": "sqlsrv_rollback(${1:conn})$0" },
        { "trigger": "sqlsrv_rows_affected()", "contents": "sqlsrv_rows_affected(${1:stmt})$0" },
        { "trigger": "sqlsrv_send_stream_data()", "contents": "sqlsrv_send_stream_data(${1:stmt})$0" },
        { "trigger": "sqlsrv_server_info()", "contents": "sqlsrv_server_info(${1:conn})$0" },

        { "trigger": "sqrt()", "contents": "sqrt(${1:arg})$0" },
        { "trigger": "srand()", "contents": "srand(${1:[seed]})$0" },
        { "trigger": "sscanf()", "contents": "sscanf(${1:str}, ${2:format})$0" },

        { "trigger": "ssdeep_fuzzy_compare()", "contents": "ssdeep_fuzzy_compare(${1:signature1}, ${2:signature2})$0" },
        { "trigger": "ssdeep_fuzzy_hash()", "contents": "ssdeep_fuzzy_hash(${1:to_hash})$0" },
        { "trigger": "ssdeep_fuzzy_hash_filename()", "contents": "ssdeep_fuzzy_hash_filename(${1:file_name})$0" },
        // Secure Shell2
        { "trigger": "ssh2_auth_hostbased_file()", "contents": "ssh2_auth_hostbased_file(${1:session}, ${2:username}, ${3:hostname}, ${4:pubkeyfile}, ${5:privkeyfile})$0" },
        { "trigger": "ssh2_auth_none()", "contents": "ssh2_auth_none(${1:session}, ${2:username})$0" },
        { "trigger": "ssh2_auth_password()", "contents": "ssh2_auth_password(${1:session}, ${2:username}, ${3:password})$0" },
        { "trigger": "ssh2_auth_pubkey_file()", "contents": "ssh2_auth_pubkey_file(${1:session}, ${2:username}, ${3:pubkeyfile}, ${4:privkeyfile})$0" },
        { "trigger": "ssh2_connect()", "contents": "ssh2_connect(${1:host})$0" },
        { "trigger": "ssh2_exec()", "contents": "ssh2_exec(${1:session}, ${2:command})$0" },
        { "trigger": "ssh2_fetch_stream()", "contents": "ssh2_fetch_stream(${1:channel}, ${2:streamid})$0" },
        { "trigger": "ssh2_fingerprint()", "contents": "ssh2_fingerprint(${1:session})$0" },
        { "trigger": "ssh2_methods_negotiated()", "contents": "ssh2_methods_negotiated(${1:session})$0" },
        { "trigger": "ssh2_publickey_add()", "contents": "ssh2_publickey_add(${1:pkey}, ${2:algoname}, ${3:blob})$0" },
        { "trigger": "ssh2_publickey_init()", "contents": "ssh2_publickey_init(${1:session})$0" },
        { "trigger": "ssh2_publickey_list()", "contents": "ssh2_publickey_list(${1:pkey})$0" },
        { "trigger": "ssh2_publickey_remove()", "contents": "ssh2_publickey_remove(${1:pkey}, ${2:algoname}, ${3:blob})$0" },
        { "trigger": "ssh2_scp_recv()", "contents": "ssh2_scp_recv(${1:session}, ${2:remote_file}, ${3:local_file})$0" },
        { "trigger": "ssh2_scp_send()", "contents": "ssh2_scp_send(${1:session}, ${2:local_file}, ${3:remote_file})$0" },
        { "trigger": "ssh2_sftp()", "contents": "ssh2_sftp(${1:session})$0" },
        { "trigger": "ssh2_sftp_lstat()", "contents": "ssh2_sftp_lstat(${1:sftp}, ${2:path})$0" },
        { "trigger": "ssh2_sftp_mkdir()", "contents": "ssh2_sftp_mkdir(${1:sftp}, ${2:dirname})$0" },
        { "trigger": "ssh2_sftp_readlink()", "contents": "ssh2_sftp_readlink(${1:sftp}, ${2:link})$0" },
        { "trigger": "ssh2_sftp_realpath()", "contents": "ssh2_sftp_realpath(${1:sftp}, ${2:filename})$0" },
        { "trigger": "ssh2_sftp_rename()", "contents": "ssh2_sftp_rename(${1:sftp}, ${2:from}, ${3:to})$0" },
        { "trigger": "ssh2_sftp_rmdir()", "contents": "ssh2_sftp_rmdir(${1:sftp}, ${2:dirname})$0" },
        { "trigger": "ssh2_sftp_stat()", "contents": "ssh2_sftp_stat(${1:sftp}, ${2:path})$0" },
        { "trigger": "ssh2_sftp_symlink()", "contents": "ssh2_sftp_symlink(${1:sftp}, ${2:target}, ${3:link})$0" },
        { "trigger": "ssh2_sftp_unlink()", "contents": "ssh2_sftp_unlink(${1:sftp}, ${2:filename})$0" },
        { "trigger": "ssh2_shell()", "contents": "ssh2_shell(${1:session})$0" },
        { "trigger": "ssh2_tunnel()", "contents": "ssh2_tunnel(${1:session}, ${2:host}, ${3:port})$0" },

        { "trigger": "stat()", "contents": "stat(${1:filename})$0" },

        { "trigger": "stats_absolute_deviation()", "contents": "stats_absolute_deviation(${1:a})$0" },
        { "trigger": "stats_cdf_beta()", "contents": "stats_cdf_beta(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})$0" },
        { "trigger": "stats_cdf_binomial()", "contents": "stats_cdf_binomial(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})$0" },
        { "trigger": "stats_cdf_cauchy()", "contents": "stats_cdf_cauchy(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})$0" },
        { "trigger": "stats_cdf_chisquare()", "contents": "stats_cdf_chisquare(${1:par1}, ${2:par2}, ${3:which})$0" },
        { "trigger": "stats_cdf_exponential()", "contents": "stats_cdf_exponential(${1:par1}, ${2:par2}, ${3:which})$0" },
        { "trigger": "stats_cdf_f()", "contents": "stats_cdf_f(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})$0" },
        { "trigger": "stats_cdf_gamma()", "contents": "stats_cdf_gamma(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})$0" },
        { "trigger": "stats_cdf_laplace()", "contents": "stats_cdf_laplace(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})$0" },
        { "trigger": "stats_cdf_logistic()", "contents": "stats_cdf_logistic(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})$0" },
        { "trigger": "stats_cdf_negative_binomial()", "contents": "stats_cdf_negative_binomial(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})$0" },
        { "trigger": "stats_cdf_noncentral_chisquare()", "contents": "stats_cdf_noncentral_chisquare(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})$0" },
        { "trigger": "stats_cdf_noncentral_f()", "contents": "stats_cdf_noncentral_f(${1:par1}, ${2:par2}, ${3:par3}, ${4:par4}, ${5:which})$0" },
        { "trigger": "stats_cdf_poisson()", "contents": "stats_cdf_poisson(${1:par1}, ${2:par2}, ${3:which})$0" },
        { "trigger": "stats_cdf_t()", "contents": "stats_cdf_t(${1:par1}, ${2:par2}, ${3:which})$0" },
        { "trigger": "stats_cdf_uniform()", "contents": "stats_cdf_uniform(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})$0" },
        { "trigger": "stats_cdf_weibull()", "contents": "stats_cdf_weibull(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})$0" },
        { "trigger": "stats_covariance()", "contents": "stats_covariance(${1:a}, ${2:b})$0" },
        { "trigger": "stats_den_uniform()", "contents": "stats_den_uniform(${1:x}, ${2:a}, ${3:b})$0" },
        { "trigger": "stats_dens_beta()", "contents": "stats_dens_beta(${1:x}, ${2:a}, ${3:b})$0" },
        { "trigger": "stats_dens_cauchy()", "contents": "stats_dens_cauchy(${1:x}, ${2:ave}, ${3:stdev})$0" },
        { "trigger": "stats_dens_chisquare()", "contents": "stats_dens_chisquare(${1:x}, ${2:dfr})$0" },
        { "trigger": "stats_dens_exponential()", "contents": "stats_dens_exponential(${1:x}, ${2:scale})$0" },
        { "trigger": "stats_dens_f()", "contents": "stats_dens_f(${1:x}, ${2:dfr1}, ${3:dfr2})$0" },
        { "trigger": "stats_dens_gamma()", "contents": "stats_dens_gamma(${1:x}, ${2:shape}, ${3:scale})$0" },
        { "trigger": "stats_dens_laplace()", "contents": "stats_dens_laplace(${1:x}, ${2:ave}, ${3:stdev})$0" },
        { "trigger": "stats_dens_logistic()", "contents": "stats_dens_logistic(${1:x}, ${2:ave}, ${3:stdev})$0" },
        { "trigger": "stats_dens_negative_binomial()", "contents": "stats_dens_negative_binomial(${1:x}, ${2:n}, ${3:pi})$0" },
        { "trigger": "stats_dens_normal()", "contents": "stats_dens_normal(${1:x}, ${2:ave}, ${3:stdev})$0" },
        { "trigger": "stats_dens_pmf_binomial()", "contents": "stats_dens_pmf_binomial(${1:x}, ${2:n}, ${3:pi})$0" },
        { "trigger": "stats_dens_pmf_hypergeometric()", "contents": "stats_dens_pmf_hypergeometric(${1:n1}, ${2:n2}, ${3:N1}, ${4:N2})$0" },
        { "trigger": "stats_dens_pmf_poisson()", "contents": "stats_dens_pmf_poisson(${1:x}, ${2:lb})$0" },
        { "trigger": "stats_dens_t()", "contents": "stats_dens_t(${1:x}, ${2:dfr})$0" },
        { "trigger": "stats_dens_weibull()", "contents": "stats_dens_weibull(${1:x}, ${2:a}, ${3:b})$0" },
        { "trigger": "stats_harmonic_mean()", "contents": "stats_harmonic_mean(${1:a})$0" },
        { "trigger": "stats_kurtosis()", "contents": "stats_kurtosis(${1:a})$0" },
        { "trigger": "stats_rand_gen_beta()", "contents": "stats_rand_gen_beta(${1:a}, ${2:b})$0" },
        { "trigger": "stats_rand_gen_chisquare()", "contents": "stats_rand_gen_chisquare(${1:df})$0" },
        { "trigger": "stats_rand_gen_exponential()", "contents": "stats_rand_gen_exponential(${1:av})$0" },
        { "trigger": "stats_rand_gen_f()", "contents": "stats_rand_gen_f(${1:dfn}, ${2:dfd})$0" },
        { "trigger": "stats_rand_gen_funiform()", "contents": "stats_rand_gen_funiform(${1:low}, ${2:high})$0" },
        { "trigger": "stats_rand_gen_gamma()", "contents": "stats_rand_gen_gamma(${1:a}, ${2:r})$0" },
        { "trigger": "stats_rand_gen_ibinomial()", "contents": "stats_rand_gen_ibinomial(${1:n}, ${2:pp})$0" },
        { "trigger": "stats_rand_gen_ibinomial_negative()", "contents": "stats_rand_gen_ibinomial_negative(${1:n}, ${2:p})$0" },
        { "trigger": "stats_rand_gen_int()", "contents": "stats_rand_gen_int()" },
        { "trigger": "stats_rand_gen_ipoisson()", "contents": "stats_rand_gen_ipoisson(${1:mu})$0" },
        { "trigger": "stats_rand_gen_iuniform()", "contents": "stats_rand_gen_iuniform(${1:low}, ${2:high})$0" },
        { "trigger": "stats_rand_gen_noncenral_chisquare()", "contents": "stats_rand_gen_noncenral_chisquare(${1:df}, ${2:xnonc})$0" },
        { "trigger": "stats_rand_gen_noncentral_f()", "contents": "stats_rand_gen_noncentral_f(${1:dfn}, ${2:dfd}, ${3:xnonc})$0" },
        { "trigger": "stats_rand_gen_noncentral_t()", "contents": "stats_rand_gen_noncentral_t(${1:df}, ${2:xnonc})$0" },
        { "trigger": "stats_rand_gen_normal()", "contents": "stats_rand_gen_normal(${1:av}, ${2:sd})$0" },
        { "trigger": "stats_rand_gen_t()", "contents": "stats_rand_gen_t(${1:df})$0" },
        { "trigger": "stats_rand_get_seeds()", "contents": "stats_rand_get_seeds()" },
        { "trigger": "stats_rand_phrase_to_seeds()", "contents": "stats_rand_phrase_to_seeds(${1:phrase})$0" },
        { "trigger": "stats_rand_ranf()", "contents": "stats_rand_ranf()" },
        { "trigger": "stats_rand_setall()", "contents": "stats_rand_setall(${1:iseed1}, ${2:iseed2})$0" },
        { "trigger": "stats_skew()", "contents": "stats_skew(${1:a})$0" },
        { "trigger": "stats_standard_deviation()", "contents": "stats_standard_deviation(${1:a})$0" },
        { "trigger": "stats_stat_binomial_coef()", "contents": "stats_stat_binomial_coef(${1:x}, ${2:n})$0" },
        { "trigger": "stats_stat_correlation()", "contents": "stats_stat_correlation(${1:arr1}, ${2:arr2})$0" },
        { "trigger": "stats_stat_gennch()", "contents": "stats_stat_gennch(${1:n})$0" },
        { "trigger": "stats_stat_independent_t()", "contents": "stats_stat_independent_t(${1:arr1}, ${2:arr2})$0" },
        { "trigger": "stats_stat_innerproduct()", "contents": "stats_stat_innerproduct(${1:arr1}, ${2:arr2})$0" },
        { "trigger": "stats_stat_noncentral_t()", "contents": "stats_stat_noncentral_t(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})$0" },
        { "trigger": "stats_stat_paired_t()", "contents": "stats_stat_paired_t(${1:arr1}, ${2:arr2})$0" },
        { "trigger": "stats_stat_percentile()", "contents": "stats_stat_percentile(${1:df}, ${2:xnonc})$0" },
        { "trigger": "stats_stat_powersum()", "contents": "stats_stat_powersum(${1:arr}, ${2:power})$0" },
        { "trigger": "stats_variance()", "contents": "stats_variance(${1:a})$0" },

        "Stomp",
        { "trigger": "Stomp()\tctor", "contents": "Stomp(${1:[broker]}${2:[, username]}${3:[, password]}${4:[, headers]})$0" },
        { "trigger": "stomp_connect_error()", "contents": "stomp_connect_error()" },
        { "trigger": "stomp_version()", "contents": "stomp_version()" },
        "StompException",
        "StompFrame",
        { "trigger": "StompFrame()\tctor", "contents": "StompFrame(${1:[command]}${2:[, headers]}${3:[, body]})$0" },

        { "trigger": "str_getcsv()", "contents": "str_getcsv(${1:input}${2:[, delimiter]}${3:[, enclosure]}${4:[, escape]})$0" },
        { "trigger": "str_ireplace()", "contents": "str_ireplace(${1:search}, ${2:replace}, ${3:subject}${4:[, count]})$0" },
        { "trigger": "str_pad()", "contents": "str_pad(${1:input}, ${2:pad_length}${3:[, pad_string]}${4:[, pad_type]})$0" },
        { "trigger": "str_repeat()", "contents": "str_repeat(${1:input}, ${2:multiplier})$0" },
        { "trigger": "str_replace()", "contents": "str_replace(${1:search}, ${2:replace}, ${3:subject}${4:[, count]})$0" },
        { "trigger": "str_rot13()", "contents": "str_rot13(${1:str})$0" },
        { "trigger": "str_shuffle()", "contents": "str_shuffle(${1:str})$0" },
        { "trigger": "str_split()", "contents": "str_split(${1:string}${2:[, split_length]})$0" },
        { "trigger": "str_word_count()", "contents": "str_word_count(${1:string}${2:[, format]}${3:[, charlist]})$0" },
        { "trigger": "strcasecmp()", "contents": "strcasecmp(${1:str1}, ${2:str2})$0" },
        { "trigger": "strchr()", "contents": "strchr(${1:haystack}, ${2:needle}${3:[, before_needle]})$0" },
        { "trigger": "strcmp()", "contents": "strcmp(${1:str1}, ${2:str2})$0" },
        { "trigger": "strcoll()", "contents": "strcoll(${1:str1}, ${2:str2})$0" },
        { "trigger": "strcspn()", "contents": "strcspn(${1:str1}, ${2:str2}${3:[, start]}${4:[, length]})$0" },

        { "trigger": "stream_bucket_append()", "contents": "stream_bucket_append(${1:brigade}, ${2:bucket})$0" },
        { "trigger": "stream_bucket_make_writeable()", "contents": "stream_bucket_make_writeable(${1:brigade})$0" },
        { "trigger": "stream_bucket_new()", "contents": "stream_bucket_new(${1:stream}, ${2:buffer})$0" },
        { "trigger": "stream_bucket_prepend()", "contents": "stream_bucket_prepend(${1:brigade}, ${2:bucket})$0" },
        { "trigger": "stream_context_create()", "contents": "stream_context_create(${1:[options]}${2:[, params]})$0" },
        { "trigger": "stream_context_get_default()", "contents": "stream_context_get_default(${1:[options]})$0" },
        { "trigger": "stream_context_get_options()", "contents": "stream_context_get_options(${1:stream_or_context})$0" },
        { "trigger": "stream_context_get_params()", "contents": "stream_context_get_params(${1:stream_or_context})$0" },
        { "trigger": "stream_context_set_default()", "contents": "stream_context_set_default(${1:options})$0" },
        { "trigger": "stream_context_set_option()", "contents": "stream_context_set_option(${1:stream_or_context}, ${2:wrapper}, ${3:option}, ${4:value})$0" },
        { "trigger": "stream_context_set_params()", "contents": "stream_context_set_params(${1:stream_or_context}, ${2:params})$0" },
        { "trigger": "stream_copy_to_stream()", "contents": "stream_copy_to_stream(${1:source}, ${2:dest})$0" },
        { "trigger": "stream_encoding()", "contents": "stream_encoding(${1:stream})$0" },
        { "trigger": "stream_filter_append()", "contents": "stream_filter_append(${1:stream}, ${2:filtername})$0" },
        { "trigger": "stream_filter_prepend()", "contents": "stream_filter_prepend(${1:stream}, ${2:filtername})$0" },
        { "trigger": "stream_filter_register()", "contents": "stream_filter_register(${1:filtername}, ${2:classname})$0" },
        { "trigger": "stream_filter_remove()", "contents": "stream_filter_remove(${1:stream_filter})$0" },
        { "trigger": "stream_get_contents()", "contents": "stream_get_contents(${1:handle})$0" },
        { "trigger": "stream_get_filters()", "contents": "stream_get_filters()" },
        { "trigger": "stream_get_line()", "contents": "stream_get_line(${1:handle}, ${2:length})$0" },
        { "trigger": "stream_get_meta_data()", "contents": "stream_get_meta_data(${1:stream})$0" },
        { "trigger": "stream_get_transports()", "contents": "stream_get_transports()" },
        { "trigger": "stream_get_wrappers()", "contents": "stream_get_wrappers()" },
        { "trigger": "stream_is_local()", "contents": "stream_is_local(${1:stream_or_url})$0" },
        { "trigger": "stream_notification_callback()", "contents": "stream_notification_callback(${1:notification_code}, ${2:severity}, ${3:message}, ${4:message_code}, ${5:bytes_transferred}, ${6:bytes_max})$0" },
        { "trigger": "stream_register_wrapper()", "contents": "stream_register_wrapper(${1:protocol}, ${2:classname}${3:[, flags]})$0" },
        { "trigger": "stream_resolve_include_path()", "contents": "stream_resolve_include_path(${1:filename})$0" },
        { "trigger": "stream_select()", "contents": "stream_select(${1:read}, ${2:write}, ${3:except}, ${4:tv_sec})$0" },
        { "trigger": "stream_set_blocking()", "contents": "stream_set_blocking(${1:stream}, ${2:mode})$0" },
        { "trigger": "stream_set_chunk_size()", "contents": "stream_set_chunk_size(${1:fp}, ${2:chunk_size})$0" },
        { "trigger": "stream_set_read_buffer()", "contents": "stream_set_read_buffer(${1:stream}, ${2:buffer})$0" },
        { "trigger": "stream_set_timeout()", "contents": "stream_set_timeout(${1:stream}, ${2:seconds})$0" },
        { "trigger": "stream_set_write_buffer()", "contents": "stream_set_write_buffer(${1:stream}, ${2:buffer})$0" },
        { "trigger": "stream_socket_accept()", "contents": "stream_socket_accept(${1:server_socket})$0" },
        { "trigger": "stream_socket_client()", "contents": "stream_socket_client(${1:remote_socket})$0" },
        { "trigger": "stream_socket_enable_crypto()", "contents": "stream_socket_enable_crypto(${1:stream}, ${2:enable})$0" },
        { "trigger": "stream_socket_get_name()", "contents": "stream_socket_get_name(${1:handle}, ${2:want_peer})$0" },
        { "trigger": "stream_socket_pair()", "contents": "stream_socket_pair(${1:domain}, ${2:type}, ${3:protocol})$0" },
        { "trigger": "stream_socket_recvfrom()", "contents": "stream_socket_recvfrom(${1:socket}, ${2:length})$0" },
        { "trigger": "stream_socket_sendto()", "contents": "stream_socket_sendto(${1:socket}, ${2:data})$0" },
        { "trigger": "stream_socket_server()", "contents": "stream_socket_server(${1:local_socket})$0" },
        { "trigger": "stream_socket_shutdown()", "contents": "stream_socket_shutdown(${1:stream}, ${2:how})$0" },
        { "trigger": "stream_supports_lock()", "contents": "stream_supports_lock(${1:stream})$0" },
        { "trigger": "stream_wrapper_register()", "contents": "stream_wrapper_register(${1:protocol}, ${2:classname})$0" },
        { "trigger": "stream_wrapper_restore()", "contents": "stream_wrapper_restore(${1:protocol})$0" },
        { "trigger": "stream_wrapper_unregister()", "contents": "stream_wrapper_unregister(${1:protocol})$0" },
        "streamWrapper",

        { "trigger": "strftime()", "contents": "strftime(${1:format})$0" },
        { "trigger": "strip_tags()", "contents": "strip_tags(${1:str}${2:[, allowable_tags]})$0" },
        { "trigger": "stripcslashes()", "contents": "stripcslashes(${1:str})$0" },
        { "trigger": "stripos()", "contents": "stripos(${1:haystack}, ${2:needle}${3:[, offset]})$0" },
        { "trigger": "stripslashes()", "contents": "stripslashes(${1:str})$0" },
        { "trigger": "stristr()", "contents": "stristr(${1:haystack}, ${2:needle}${3:[, before_needle]})$0" },
        { "trigger": "strlen()", "contents": "strlen(${1:string})$0" },
        { "trigger": "strnatcasecmp()", "contents": "strnatcasecmp(${1:str1}, ${2:str2})$0" },
        { "trigger": "strnatcmp()", "contents": "strnatcmp(${1:str1}, ${2:str2})$0" },
        { "trigger": "strncasecmp()", "contents": "strncasecmp(${1:str1}, ${2:str2}, ${3:len})$0" },
        { "trigger": "strncmp()", "contents": "strncmp(${1:str1}, ${2:str2}, ${3:len})$0" },
        { "trigger": "strpbrk()", "contents": "strpbrk(${1:haystack}, ${2:char_list})$0" },
        { "trigger": "strpos()", "contents": "strpos(${1:haystack}, ${2:needle}${3:[, offset]})$0" },
        { "trigger": "strptime()", "contents": "strptime(${1:date}, ${2:format})$0" },
        { "trigger": "strrchr()", "contents": "strrchr(${1:haystack}, ${2:needle})$0" },
        { "trigger": "strrev()", "contents": "strrev(${1:string})$0" },
        { "trigger": "strripos()", "contents": "strripos(${1:haystack}, ${2:needle}${3:[, offset]})$0" },
        { "trigger": "strrpos()", "contents": "strrpos(${1:haystack}, ${2:needle}${3:[, offset]})$0" },
        { "trigger": "strspn()", "contents": "strspn(${1:subject}, ${2:mask}${3:[, start]}${4:[, length]})$0" },
        { "trigger": "strstr()", "contents": "strstr(${1:haystack}, ${2:needle}${3:[, before_needle]})$0" },
        { "trigger": "strtok()", "contents": "strtok(${1:[str, ]}${2:token})$0" },
        { "trigger": "strtolower()", "contents": "strtolower(${1:str})$0" },
        { "trigger": "strtotime()", "contents": "strtotime(${1:time}${2:[, now]})$0" },
        { "trigger": "strtoupper()", "contents": "strtoupper(${1:string})$0" },
        { "trigger": "strtr()", "contents": "strtr(${1:str}, ${2:from}, ${3:to})$0" },
        { "trigger": "strval()", "contents": "strval(${1:var})$0" },
        { "trigger": "substr()", "contents": "substr(${1:string}, ${2:start}${3:[, length]})$0" },
        { "trigger": "substr_compare()", "contents": "substr_compare(${1:main_str}, ${2:str}, ${3:offset}${4:[, length]}${5:[, case_insensitivity]})$0" },
        { "trigger": "substr_count()", "contents": "substr_count(${1:haystack}, ${2:needle}${3:[, offset]}${4:[, length]})$0" },
        { "trigger": "substr_replace()", "contents": "substr_replace(${1:string}, ${2:replacement}, ${3:start}${4:[, length]})$0" },
        "SVM",
        "SVMModel",
        { "trigger": "SVMModel()\tctor", "contents": "SVMModel(4{1:[filename]})$0" },
        // Subversion (SVN)
        { "trigger": "svn_add()", "contents": "svn_add(${1:path})$0" },
        { "trigger": "svn_auth_get_parameter()", "contents": "svn_auth_get_parameter(${1:key})$0" },
        { "trigger": "svn_auth_set_parameter()", "contents": "svn_auth_set_parameter(${1:key}, ${2:value})$0" },
        { "trigger": "svn_blame()", "contents": "svn_blame(${1:repository_url})$0" },
        { "trigger": "svn_cat()", "contents": "svn_cat(${1:repos_url})$0" },
        { "trigger": "svn_checkout()", "contents": "svn_checkout(${1:repos}, ${2:targetpath})$0" },
        { "trigger": "svn_cleanup()", "contents": "svn_cleanup(${1:workingdir})$0" },
        { "trigger": "svn_client_version()", "contents": "svn_client_version()" },
        { "trigger": "svn_commit()", "contents": "svn_commit(${1:log}, ${2:targets})$0" },
        { "trigger": "svn_delete()", "contents": "svn_delete(${1:path})$0" },
        { "trigger": "svn_diff()", "contents": "svn_diff(${1:path1}, ${2:rev1}, ${3:path2}, ${4:rev2})$0" },
        { "trigger": "svn_export()", "contents": "svn_export(${1:frompath}, ${2:topath})$0" },
        { "trigger": "svn_fs_abort_txn()", "contents": "svn_fs_abort_txn(${1:txn})$0" },
        { "trigger": "svn_fs_apply_text()", "contents": "svn_fs_apply_text(${1:root}, ${2:path})$0" },
        { "trigger": "svn_fs_begin_txn2()", "contents": "svn_fs_begin_txn2(${1:repos}, ${2:rev})$0" },
        { "trigger": "svn_fs_change_node_prop()", "contents": "svn_fs_change_node_prop(${1:root}, ${2:path}, ${3:name}, ${4:value})$0" },
        { "trigger": "svn_fs_check_path()", "contents": "svn_fs_check_path(${1:fsroot}, ${2:path})$0" },
        { "trigger": "svn_fs_contents_changed()", "contents": "svn_fs_contents_changed(${1:root1}, ${2:path1}, ${3:root2}, ${4:path2})$0" },
        { "trigger": "svn_fs_copy()", "contents": "svn_fs_copy(${1:from_root}, ${2:from_path}, ${3:to_root}, ${4:to_path})$0" },
        { "trigger": "svn_fs_delete()", "contents": "svn_fs_delete(${1:root}, ${2:path})$0" },
        { "trigger": "svn_fs_dir_entries()", "contents": "svn_fs_dir_entries(${1:fsroot}, ${2:path})$0" },
        { "trigger": "svn_fs_file_contents()", "contents": "svn_fs_file_contents(${1:fsroot}, ${2:path})$0" },
        { "trigger": "svn_fs_file_length()", "contents": "svn_fs_file_length(${1:fsroot}, ${2:path})$0" },
        { "trigger": "svn_fs_is_dir()", "contents": "svn_fs_is_dir(${1:root}, ${2:path})$0" },
        { "trigger": "svn_fs_is_file()", "contents": "svn_fs_is_file(${1:root}, ${2:path})$0" },
        { "trigger": "svn_fs_make_dir()", "contents": "svn_fs_make_dir(${1:root}, ${2:path})$0" },
        { "trigger": "svn_fs_make_file()", "contents": "svn_fs_make_file(${1:root}, ${2:path})$0" },
        { "trigger": "svn_fs_node_created_rev()", "contents": "svn_fs_node_created_rev(${1:fsroot}, ${2:path})$0" },
        { "trigger": "svn_fs_node_prop()", "contents": "svn_fs_node_prop(${1:fsroot}, ${2:path}, ${3:propname})$0" },
        { "trigger": "svn_fs_props_changed()", "contents": "svn_fs_props_changed(${1:root1}, ${2:path1}, ${3:root2}, ${4:path2})$0" },
        { "trigger": "svn_fs_revision_prop()", "contents": "svn_fs_revision_prop(${1:fs}, ${2:revnum}, ${3:propname})$0" },
        { "trigger": "svn_fs_revision_root()", "contents": "svn_fs_revision_root(${1:fs}, ${2:revnum})$0" },
        { "trigger": "svn_fs_txn_root()", "contents": "svn_fs_txn_root(${1:txn})$0" },
        { "trigger": "svn_fs_youngest_rev()", "contents": "svn_fs_youngest_rev(${1:fs})$0" },
        { "trigger": "svn_import()", "contents": "svn_import(${1:path}, ${2:url}, ${3:nonrecursive})$0" },
        { "trigger": "svn_log()", "contents": "svn_log(${1:repos_url})$0" },
        { "trigger": "svn_ls()", "contents": "svn_ls(${1:repos_url})$0" },
        { "trigger": "svn_mkdir()", "contents": "svn_mkdir(${1:path})$0" },
        { "trigger": "svn_repos_create()", "contents": "svn_repos_create(${1:path})$0" },
        { "trigger": "svn_repos_fs()", "contents": "svn_repos_fs(${1:repos})$0" },
        { "trigger": "svn_repos_fs_begin_txn_for_commit()", "contents": "svn_repos_fs_begin_txn_for_commit(${1:repos}, ${2:rev}, ${3:author}, ${4:log_msg})$0" },
        { "trigger": "svn_repos_fs_commit_txn()", "contents": "svn_repos_fs_commit_txn(${1:txn})$0" },
        { "trigger": "svn_repos_hotcopy()", "contents": "svn_repos_hotcopy(${1:repospath}, ${2:destpath}, ${3:cleanlogs})$0" },
        { "trigger": "svn_repos_open()", "contents": "svn_repos_open(${1:path})$0" },
        { "trigger": "svn_repos_recover()", "contents": "svn_repos_recover(${1:path})$0" },
        { "trigger": "svn_revert()", "contents": "svn_revert(${1:path})$0" },
        { "trigger": "svn_status()", "contents": "svn_status(${1:path})$0" },
        { "trigger": "svn_update()", "contents": "svn_update(${1:path})$0" },

        /* Shockwave Flash - no Windows support - moved to PECL as of PHP 5.0.0 (cf MING)
        { "trigger": "swf_actiongeturl()", "contents": "swf_actiongeturl(${1:url}, ${2:target})$0" },
        { "trigger": "swf_actiongotoframe()", "contents": "swf_actiongotoframe(${1:framenumber})$0" },
        { "trigger": "swf_actiongotolabel()", "contents": "swf_actiongotolabel(${1:label})$0" },
        { "trigger": "swf_actionnextframe()", "contents": "swf_actionnextframe()" },
        { "trigger": "swf_actionplay()", "contents": "swf_actionplay()" },
        { "trigger": "swf_actionprevframe()", "contents": "swf_actionprevframe()" },
        { "trigger": "swf_actionsettarget()", "contents": "swf_actionsettarget(${1:target})$0" },
        { "trigger": "swf_actionstop()", "contents": "swf_actionstop()" },
        { "trigger": "swf_actiontogglequality()", "contents": "swf_actiontogglequality()" },
        { "trigger": "swf_actionwaitforframe()", "contents": "swf_actionwaitforframe(${1:framenumber}, ${2:skipcount})$0" },
        { "trigger": "swf_addbuttonrecord()", "contents": "swf_addbuttonrecord(${1:states}, ${2:shapeid}, ${3:depth})$0" },
        { "trigger": "swf_addcolor()", "contents": "swf_addcolor(${1:r}, ${2:g}, ${3:b}, ${4:a})$0" },
        { "trigger": "swf_closefile()", "contents": "swf_closefile(${1:[return_file]})$0" },
        { "trigger": "swf_definebitmap()", "contents": "swf_definebitmap(${1:objid}, ${2:image_name})$0" },
        { "trigger": "swf_definefont()", "contents": "swf_definefont(${1:fontid}, ${2:fontname})$0" },
        { "trigger": "swf_defineline()", "contents": "swf_defineline(${1:objid}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:width})$0" },
        { "trigger": "swf_definepoly()", "contents": "swf_definepoly(${1:objid}, ${2:coords}, ${3:npoints}, ${4:width})$0" },
        { "trigger": "swf_definerect()", "contents": "swf_definerect(${1:objid}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:width})$0" },
        { "trigger": "swf_definetext()", "contents": "swf_definetext(${1:objid}, ${2:str}, ${3:docenter})$0" },
        { "trigger": "swf_endbutton()", "contents": "swf_endbutton()" },
        { "trigger": "swf_enddoaction()", "contents": "swf_enddoaction()" },
        { "trigger": "swf_endshape()", "contents": "swf_endshape()" },
        { "trigger": "swf_endsymbol()", "contents": "swf_endsymbol()" },
        { "trigger": "swf_fontsize()", "contents": "swf_fontsize(${1:size})$0" },
        { "trigger": "swf_fontslant()", "contents": "swf_fontslant(${1:slant})$0" },
        { "trigger": "swf_fonttracking()", "contents": "swf_fonttracking(${1:tracking})$0" },
        { "trigger": "swf_getbitmapinfo()", "contents": "swf_getbitmapinfo(${1:bitmapid})$0" },
        { "trigger": "swf_getfontinfo()", "contents": "swf_getfontinfo()" },
        { "trigger": "swf_getframe()", "contents": "swf_getframe()" },
        { "trigger": "swf_labelframe()", "contents": "swf_labelframe(${1:name})$0" },
        { "trigger": "swf_lookat()", "contents": "swf_lookat(${1:view_x}, ${2:view_y}, ${3:view_z}, ${4:reference_x}, ${5:reference_y}, ${6:reference_z}, ${7:twist})$0" },
        { "trigger": "swf_modifyobject()", "contents": "swf_modifyobject(${1:depth}, ${2:how})$0" },
        { "trigger": "swf_mulcolor()", "contents": "swf_mulcolor(${1:r}, ${2:g}, ${3:b}, ${4:a})$0" },
        { "trigger": "swf_nextid()", "contents": "swf_nextid()" },
        { "trigger": "swf_oncondition()", "contents": "swf_oncondition(${1:transition})$0" },
        { "trigger": "swf_openfile()", "contents": "swf_openfile(${1:filename}, ${2:width}, ${3:height}, ${4:framerate}, ${5:r}, ${6:g}, ${7:b})$0" },
        { "trigger": "swf_ortho()", "contents": "swf_ortho(${1:xmin}, ${2:xmax}, ${3:ymin}, ${4:ymax}, ${5:zmin}, ${6:zmax})$0" },
        { "trigger": "swf_ortho2()", "contents": "swf_ortho2(${1:xmin}, ${2:xmax}, ${3:ymin}, ${4:ymax})$0" },
        { "trigger": "swf_perspective()", "contents": "swf_perspective(${1:fovy}, ${2:aspect}, ${3:near}, ${4:far})$0" },
        { "trigger": "swf_placeobject()", "contents": "swf_placeobject(${1:objid}, ${2:depth})$0" },
        { "trigger": "swf_polarview()", "contents": "swf_polarview(${1:dist}, ${2:azimuth}, ${3:incidence}, ${4:twist})$0" },
        { "trigger": "swf_popmatrix()", "contents": "swf_popmatrix()" },
        { "trigger": "swf_posround()", "contents": "swf_posround(${1:round})$0" },
        { "trigger": "swf_pushmatrix()", "contents": "swf_pushmatrix()" },
        { "trigger": "swf_removeobject()", "contents": "swf_removeobject(${1:depth})$0" },
        { "trigger": "swf_rotate()", "contents": "swf_rotate(${1:angle}, ${2:axis})$0" },
        { "trigger": "swf_scale()", "contents": "swf_scale(${1:x}, ${2:y}, ${3:z})$0" },
        { "trigger": "swf_setfont()", "contents": "swf_setfont(${1:fontid})$0" },
        { "trigger": "swf_setframe()", "contents": "swf_setframe(${1:framenumber})$0" },
        { "trigger": "swf_shapearc()", "contents": "swf_shapearc(${1:x}, ${2:y}, ${3:r}, ${4:ang1}, ${5:ang2})$0" },
        { "trigger": "swf_shapecurveto()", "contents": "swf_shapecurveto(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2})$0" },
        { "trigger": "swf_shapecurveto3()", "contents": "swf_shapecurveto3(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3})$0" },
        { "trigger": "swf_shapefillbitmapclip()", "contents": "swf_shapefillbitmapclip(${1:bitmapid})$0" },
        { "trigger": "swf_shapefillbitmaptile()", "contents": "swf_shapefillbitmaptile(${1:bitmapid})$0" },
        { "trigger": "swf_shapefilloff()", "contents": "swf_shapefilloff()" },
        { "trigger": "swf_shapefillsolid()", "contents": "swf_shapefillsolid(${1:r}, ${2:g}, ${3:b}, ${4:a})$0" },
        { "trigger": "swf_shapelinesolid()", "contents": "swf_shapelinesolid(${1:r}, ${2:g}, ${3:b}, ${4:a}, ${5:width})$0" },
        { "trigger": "swf_shapelineto()", "contents": "swf_shapelineto(${1:x}, ${2:y})$0" },
        { "trigger": "swf_shapemoveto()", "contents": "swf_shapemoveto(${1:x}, ${2:y})$0" },
        { "trigger": "swf_showframe()", "contents": "swf_showframe()" },
        { "trigger": "swf_startbutton()", "contents": "swf_startbutton(${1:objid}, ${2:type})$0" },
        { "trigger": "swf_startdoaction()", "contents": "swf_startdoaction()" },
        { "trigger": "swf_startshape()", "contents": "swf_startshape(${1:objid})$0" },
        { "trigger": "swf_startsymbol()", "contents": "swf_startsymbol(${1:objid})$0" },
        { "trigger": "swf_textwidth()", "contents": "swf_textwidth(${1:str})$0" },
        { "trigger": "swf_translate()", "contents": "swf_translate(${1:x}, ${2:y}, ${3:z})$0" },
        { "trigger": "swf_viewport()", "contents": "swf_viewport(${1:xmin}, ${2:xmax}, ${3:ymin}, ${4:ymax})$0" },
        "SWFAction",
        { "trigger": "SWFAction()\tctor", "contents": "SWFAction(${1:script})$0" },
        "SWFBitmap"
        { "trigger": "SWFBitmap()\tctor", "contents": "SWFBitmap(${1:file}${2:[, alphafile]})$0" },
        "SWFButton",
        "SWFDisplayItem",
        "SWFFill",
        "SWFFont",
        { "trigger": "SWFFont()\tctor", "contents": "SWFFont(${1:filename})$0" },
        "SWFFontChar",
        "SWFGradient",
        "SWFMorph",
        "SWFMovie",
        { "trigger": "SWFMovie()\tctor", "contents": "SWFMovie(${1:[version]})$0" },
        "SWFPrebuiltClip",
        { "trigger": "SWFPrebuiltClip()\tctor", "contents": "SWFPrebuiltClip(${1:file})$0" },
        "SWFShape",
        "SWFSound",
        { "trigger": "SWFSound()", "contents": "SWFSound(${1:filename}${2:[, flags]})$0" },
        "SWFSoundInstance",
        "SWFSprite",
        "SWFText",
        "SWFTextField"
        { "trigger": "SWFTextField()\tctor", "contents": "SWFTextField(${1:[flags]})$0" },
        "SWFVideoStream",
        { "trigger": "SWFVideoStream()\tctor", "contents": "SWFVideoStream(${1:[file]})$0" },
        */
        /*
        { "trigger": "sybase_affected_rows()", "contents": "sybase_affected_rows(${1:[link_identifier]})$0" },
        { "trigger": "sybase_close()", "contents": "sybase_close(${1:[link_identifier]})$0" },
        { "trigger": "sybase_connect()", "contents": "sybase_connect($1)$0" },
        { "trigger": "sybase_connect(full)", "contents": "sybase_connect(${1:[servername]}${2:[, username]}${3:[, password]}${4:[, charset]}${5:[, appname]}${6:[, new]})$0" },
        { "trigger": "sybase_data_seek()", "contents": "sybase_data_seek(${1:result_identifier}, ${2:row_number})$0" },
        { "trigger": "sybase_deadlock_retry_count()", "contents": "sybase_deadlock_retry_count(${1:retry_count})$0" },
        { "trigger": "sybase_fetch_array()", "contents": "sybase_fetch_array(${1:result})$0" },
        { "trigger": "sybase_fetch_assoc()", "contents": "sybase_fetch_assoc(${1:result})$0" },
        { "trigger": "sybase_fetch_field()", "contents": "sybase_fetch_field(${1:result})$0" },
        { "trigger": "sybase_fetch_object()", "contents": "sybase_fetch_object(${1:result})$0" },
        { "trigger": "sybase_fetch_row()", "contents": "sybase_fetch_row(${1:result})$0" },
        { "trigger": "sybase_field_seek()", "contents": "sybase_field_seek(${1:result}, ${2:field_offset})$0" },
        { "trigger": "sybase_free_result()", "contents": "sybase_free_result(${1:result})$0" },
        { "trigger": "sybase_get_last_message()", "contents": "sybase_get_last_message()" },
        { "trigger": "sybase_min_client_severity()", "contents": "sybase_min_client_severity(${1:severity})$0" },
        { "trigger": "sybase_min_error_severity()", "contents": "sybase_min_error_severity(${1:severity})$0" },
        { "trigger": "sybase_min_message_severity()", "contents": "sybase_min_message_severity(${1:severity})$0" },
        { "trigger": "sybase_min_server_severity()", "contents": "sybase_min_server_severity(${1:severity})$0" },
        { "trigger": "sybase_num_fields()", "contents": "sybase_num_fields(${1:result})$0" },
        { "trigger": "sybase_num_rows()", "contents": "sybase_num_rows(${1:result})$0" },
        { "trigger": "sybase_pconnect()", "contents": "sybase_pconnect($1)$0" },
        { "trigger": "sybase_pconnect(full)", "contents": "sybase_pconnect(${1:[servername]}${2:[, username]}${3:[, password]}${4:[, charset]}${5:[, appname]})$0" },
        { "trigger": "sybase_query()", "contents": "sybase_query(${1:query})$0" },
        { "trigger": "sybase_result()", "contents": "sybase_result(${1:result}, ${2:row}, ${3:field})$0" },
        { "trigger": "sybase_select_db()", "contents": "sybase_select_db(${1:database_name})$0" },
        { "trigger": "sybase_set_message_handler()", "contents": "sybase_set_message_handler(${1:handler})$0" },
        { "trigger": "sybase_unbuffered_query()", "contents": "sybase_unbuffered_query(${1:query}, ${2:link_identifier})$0" },
        */
        { "trigger": "symlink()", "contents": "symlink(${1:target}, ${2:link})$0" },
        { "trigger": "sys_get_temp_dir()", "contents": "sys_get_temp_dir()" },
        { "trigger": "sys_getloadavg()", "contents": "sys_getloadavg()" },
        { "trigger": "syslog()", "contents": "syslog(${1:priority}, ${2:message})$0" },
        { "trigger": "system()", "contents": "system(${1:command})$0" },
        { "trigger": "taint()", "contents": "taint(${1:strings})$0" },
        { "trigger": "tan()", "contents": "tan(${1:arg})$0" },
        { "trigger": "tanh()", "contents": "tanh(${1:arg})$0" },
        { "trigger": "tcpwrap_check()", "contents": "tcpwrap_check(${1:daemon}, ${2:address})$0" },
        { "trigger": "tempnam()", "contents": "tempnam(${1:dir}, ${2:prefix})$0" },
        { "trigger": "textdomain()", "contents": "textdomain(${1:text_domain})$0" },
        "tidy",
        { "trigger": "tidy()\tctor", "contents": "tidy(${1:[filename]}${2:[, config]}${3:[, encoding]}${4:[, use_include_path]})$0" },
        { "trigger": "tidy_access_count()", "contents": "tidy_access_count(${1:object})$0" },
        { "trigger": "tidy_config_count()", "contents": "tidy_config_count(${1:object})$0" },
        { "trigger": "tidy_error_count()", "contents": "tidy_error_count(${1:object})$0" },
        { "trigger": "tidy_get_error_buffer()", "contents": "tidy_get_error_buffer(${1:object})$0" },
        { "trigger": "tidy_get_output()", "contents": "tidy_get_output(${1:object})$0" },
        { "trigger": "tidy_load_config()", "contents": "tidy_load_config(${1:filename}, ${2:encoding})$0" },
        { "trigger": "tidy_reset_config()", "contents": "tidy_reset_config()" },
        { "trigger": "tidy_save_config()", "contents": "tidy_save_config(${1:filename})$0" },
        { "trigger": "tidy_set_encoding()", "contents": "tidy_set_encoding(${1:encoding})$0" },
        { "trigger": "tidy_setopt()", "contents": "tidy_setopt(${1:option}, ${2:value})$0" },
        { "trigger": "tidy_warning_count()", "contents": "tidy_warning_count(${1:object})$0" },
        "tidyNode",

        { "trigger": "time()", "contents": "time()" },
        { "trigger": "time_nanosleep()", "contents": "time_nanosleep(${1:seconds}, ${2:nanoseconds})$0" },
        { "trigger": "time_sleep_until()", "contents": "time_sleep_until(${1:timestamp})$0" },

        { "trigger": "timezone_abbreviations_list()", "contents": "timezone_abbreviations_list()" },
        { "trigger": "timezone_identifiers_list()", "contents": "timezone_identifiers_list(${1:[what]}${2:[, country]})$0" },
        { "trigger": "timezone_location_get()", "contents": "timezone_location_get(${1:object})$0" },
        { "trigger": "timezone_name_from_abbr()", "contents": "timezone_name_from_abbr(${1:abbr}${2:[, gmtOffset]}${3:[, isdst]})$0" },
        { "trigger": "timezone_name_get()", "contents": "timezone_name_get(${1:object})$0" },
        { "trigger": "timezone_offset_get()", "contents": "timezone_offset_get(${1:object}, ${2:datetime})$0" },
        { "trigger": "timezone_open()", "contents": "timezone_open(${1:timezone})$0" },
        { "trigger": "timezone_transitions_get()", "contents": "timezone_transitions_get(${1:object}${2:[, timestamp_begin]}${3:[, timestamp_end]})$0" },
        { "trigger": "timezone_version_get()", "contents": "timezone_version_get()" },

        { "trigger": "tmpfile()", "contents": "tmpfile()" },
        { "trigger": "token_get_all()", "contents": "token_get_all(${1:source})$0" },
        { "trigger": "token_name()", "contents": "token_name(${1:token})$0" },

        "TokyoTyrant",
        { "trigger": "TokyoTyrant()\tctor", "contents": "TokyoTyrant(${1:[host]}${2:[, port]}${3:[, options]})$0" },
        "TokyoTyrantException",
        "TokyoTyrantIterator",
        { "trigger": "TokyoTyrantIterator()\tctor", "contents": "TokyoTyrantIterator(${1:object})$0" },
        "TokyoTyrantQuery",
        { "trigger": "TokyoTyrantQuery()\tctor", "contents": "TokyoTyrantQuery(${1:table})$0" },
        "TokyoTyrantTable",
        { "trigger": "TokyoTyrantTable()\tctor", "contents": "TokyoTyrantTable(${1:[host]}${2:[, port]}${3:[, options]})$0" },

        { "trigger": "toString()\tReflectionClass/Function", "contents": "toString()" },
        { "trigger": "touch()", "contents": "touch(${1:filename}${2:[, time]}${3:[, atime]})$0" },
        { "trigger": "trait_exists()", "contents": "trait_exists(${1:traitname}${2:[, autoload]})$0" },
        "Transliterator",
        "Traversable",
        { "trigger": "trigger_error()", "contents": "trigger_error(${1:error_msg})$0" },
        { "trigger": "trim()", "contents": "trim(${1:str}${2:[, charlist]})$0" },
        { "trigger": "uasort()", "contents": "uasort(${1:array}, ${2:cmp_function})$0" },
        { "trigger": "ucfirst()", "contents": "ucfirst(${1:str})$0" },
        { "trigger": "ucwords()", "contents": "ucwords(${1:str})$0" },
        /* mnoGoSearch free search engine - not available on Windows - moved to PECL as of PHP 5.1.0
        { "trigger": "udm_add_search_limit()", "contents": "udm_add_search_limit(${1:agent}, ${2:var}, ${3:val})$0" },
        { "trigger": "udm_alloc_agent()", "contents": "udm_alloc_agent(${1:dbaddr})$0" },
        { "trigger": "udm_alloc_agent_array()", "contents": "udm_alloc_agent_array(${1:databases})$0" },
        { "trigger": "udm_api_version()", "contents": "udm_api_version()" },
        { "trigger": "udm_cat_list()", "contents": "udm_cat_list(${1:agent}, ${2:category})$0" },
        { "trigger": "udm_cat_path()", "contents": "udm_cat_path(${1:agent}, ${2:category})$0" },
        { "trigger": "udm_check_charset()", "contents": "udm_check_charset(${1:agent}, ${2:charset})$0" },
        { "trigger": "udm_check_stored()", "contents": "udm_check_stored(${1:agent}, ${2:link}, ${3:doc_id})$0" },
        { "trigger": "udm_clear_search_limits()", "contents": "udm_clear_search_limits(${1:agent})$0" },
        { "trigger": "udm_close_stored()", "contents": "udm_close_stored(${1:agent}, ${2:link})$0" },
        { "trigger": "udm_crc32()", "contents": "udm_crc32(${1:agent}, ${2:str})$0" },
        { "trigger": "udm_errno()", "contents": "udm_errno(${1:agent})$0" },
        { "trigger": "udm_error()", "contents": "udm_error(${1:agent})$0" },
        { "trigger": "udm_find()", "contents": "udm_find(${1:agent}, ${2:query})$0" },
        { "trigger": "udm_free_agent()", "contents": "udm_free_agent(${1:agent})$0" },
        { "trigger": "udm_free_ispell_data()", "contents": "udm_free_ispell_data(${1:agent})$0" },
        { "trigger": "udm_free_res()", "contents": "udm_free_res(${1:res})$0" },
        { "trigger": "udm_get_doc_count()", "contents": "udm_get_doc_count(${1:agent})$0" },
        { "trigger": "udm_get_res_field()", "contents": "udm_get_res_field(${1:res}, ${2:row}, ${3:field})$0" },
        { "trigger": "udm_get_res_param()", "contents": "udm_get_res_param(${1:res}, ${2:param})$0" },
        { "trigger": "udm_hash32()", "contents": "udm_hash32(${1:agent}, ${2:str})$0" },
        { "trigger": "udm_load_ispell_data()", "contents": "udm_load_ispell_data(${1:agent}, ${2:var}, ${3:val1}, ${4:val2}, ${5:flag})$0" },
        { "trigger": "udm_open_stored()", "contents": "udm_open_stored(${1:agent}, ${2:storedaddr})$0" },
        { "trigger": "udm_set_agent_param()", "contents": "udm_set_agent_param(${1:agent}, ${2:var}, ${3:val})$0" },
        */
        { "trigger": "uksort()", "contents": "uksort(${1:array}, ${2:cmp_function})$0" },
        { "trigger": "umask()", "contents": "umask(${1:[mask]})$0" },
        "UnderflowException",
        "UnexpectedValueException",
        { "trigger": "uniqid()", "contents": "uniqid(${1:[prefix]}${2:[, more_entropy]})$0" },
        { "trigger": "unixtojd()", "contents": "unixtojd(${1:[timestamp]})$0" },
        { "trigger": "unlink()", "contents": "unlink(${1:filename}${2:[, resource]})$0" },
        { "trigger": "unpack()", "contents": "unpack(${1:format}, ${2:data})$0" },
        { "trigger": "unregister_tick_function()", "contents": "unregister_tick_function(${1:function_name})$0" },
        { "trigger": "unserialize()", "contents": "unserialize(${1:str})$0" },
        { "trigger": "unset()", "contents": "unset(${1:vars})$0" },
        { "trigger": "untaint()", "contents": "untaint(${1:strings})$0" },
        { "trigger": "urldecode()", "contents": "urldecode(${1:str})$0" },
        { "trigger": "urlencode()", "contents": "urlencode(${1:str})$0" },
        { "trigger": "use_soap_error_handler()", "contents": "use_soap_error_handler(${1:[handler]})$0" },
        { "trigger": "user_error()", "contents": "user_error(${1:error_msg}${2:[, error_type]})$0" },
        { "trigger": "usleep()", "contents": "usleep(${1:micro_seconds})$0" },
        { "trigger": "usort()", "contents": "usort(${1:array}, ${2:cmp_function})$0" },
        { "trigger": "utf8_decode()", "contents": "utf8_decode(${1:data})$0" },
        { "trigger": "utf8_encode()", "contents": "utf8_encode(${1:data})$0" },
        "V8Js",
        "V8JsException",
        { "trigger": "var_dump()", "contents": "var_dump(${1:expression(s)})$0" },
        { "trigger": "var_export()", "contents": "var_export(${1:expression}${2:[, return]})$0" },
        "Variant",
        { "trigger": "Variant()\tctor", "contents": "Variant(${1:[value]}${2:[, type]}${3:[, codepage]})$0" },
        { "trigger": "variant_abs()", "contents": "variant_abs(${1:val})$0" },
        { "trigger": "variant_add()", "contents": "variant_add(${1:left}, ${2:right})$0" },
        { "trigger": "variant_and()", "contents": "variant_and(${1:left}, ${2:right})$0" },
        { "trigger": "variant_cast()", "contents": "variant_cast(${1:variant}, ${2:type})$0" },
        { "trigger": "variant_cat()", "contents": "variant_cat(${1:left}, ${2:right})$0" },
        { "trigger": "variant_cmp()", "contents": "variant_cmp(${1:left}, ${2:right})$0" },
        { "trigger": "variant_date_from_timestamp()", "contents": "variant_date_from_timestamp(${1:timestamp})$0" },
        { "trigger": "variant_date_to_timestamp()", "contents": "variant_date_to_timestamp(${1:variant})$0" },
        { "trigger": "variant_div()", "contents": "variant_div(${1:left}, ${2:right})$0" },
        { "trigger": "variant_eqv()", "contents": "variant_eqv(${1:left}, ${2:right})$0" },
        { "trigger": "variant_fix()", "contents": "variant_fix(${1:variant})$0" },
        { "trigger": "variant_get_type()", "contents": "variant_get_type(${1:variant})$0" },
        { "trigger": "variant_idiv()", "contents": "variant_idiv(${1:left}, ${2:right})$0" },
        { "trigger": "variant_imp()", "contents": "variant_imp(${1:left}, ${2:right})$0" },
        { "trigger": "variant_int()", "contents": "variant_int(${1:variant})$0" },
        { "trigger": "variant_mod()", "contents": "variant_mod(${1:left}, ${2:right})$0" },
        { "trigger": "variant_mul()", "contents": "variant_mul(${1:left}, ${2:right})$0" },
        { "trigger": "variant_neg()", "contents": "variant_neg(${1:variant})$0" },
        { "trigger": "variant_not()", "contents": "variant_not(${1:variant})$0" },
        { "trigger": "variant_or()", "contents": "variant_or(${1:left}, ${2:right})$0" },
        { "trigger": "variant_pow()", "contents": "variant_pow(${1:left}, ${2:right})$0" },
        { "trigger": "variant_round()", "contents": "variant_round(${1:variant}, ${2:decimals})$0" },
        { "trigger": "variant_set()", "contents": "variant_set(${1:variant}, ${2:value})$0" },
        { "trigger": "variant_set_type()", "contents": "variant_set_type(${1:variant}, ${2:type})$0" },
        { "trigger": "variant_sub()", "contents": "variant_sub(${1:left}, ${2:right})$0" },
        { "trigger": "variant_xor()", "contents": "variant_xor(${1:left}, ${2:right})$0" },
        "VarnishAdmin",
        { "trigger": "VarnishAdmin()\tctor", "contents": "VarnishAdmin(${1:[args]})$0" },
        "VarnishLog",
        { "trigger": "VarnishLog()\tctor", "contents": "VarnishLog(${1:[args]})$0" },
        "VarnishStat",
        { "trigger": "VarnishStat()\tctor", "contents": "VarnishStat(${1:[args]})$0" },

        { "trigger": "version_compare()", "contents": "version_compare(${1:version1}, ${2:version2}${3:[, operator]})$0" },
        { "trigger": "vfprintf()", "contents": "vfprintf(${1:handle}, ${2:format}, ${3:args})$0" },
        { "trigger": "virtual()", "contents": "virtual(${1:filename})$0" },
        /* vpopmail - moved to PECL as of PHP 4.3.0
        { "trigger": "vpopmail_add_alias_domain()", "contents": "vpopmail_add_alias_domain(${1:domain}, ${2:aliasdomain})$0" },
        { "trigger": "vpopmail_add_alias_domain_ex()", "contents": "vpopmail_add_alias_domain_ex(${1:olddomain}, ${2:newdomain})$0" },
        { "trigger": "vpopmail_add_domain()", "contents": "vpopmail_add_domain(${1:domain}, ${2:dir}, ${3:uid}, ${4:gid})$0" },
        { "trigger": "vpopmail_add_domain_ex()", "contents": "vpopmail_add_domain_ex(${1:domain}, ${2:passwd})$0" },
        { "trigger": "vpopmail_add_user()", "contents": "vpopmail_add_user(${1:user}, ${2:domain}, ${3:password})$0" },
        { "trigger": "vpopmail_alias_add()", "contents": "vpopmail_alias_add(${1:user}, ${2:domain}, ${3:alias})$0" },
        { "trigger": "vpopmail_alias_del()", "contents": "vpopmail_alias_del(${1:user}, ${2:domain})$0" },
        { "trigger": "vpopmail_alias_del_domain()", "contents": "vpopmail_alias_del_domain(${1:domain})$0" },
        { "trigger": "vpopmail_alias_get()", "contents": "vpopmail_alias_get(${1:alias}, ${2:domain})$0" },
        { "trigger": "vpopmail_alias_get_all()", "contents": "vpopmail_alias_get_all(${1:domain})$0" },
        { "trigger": "vpopmail_auth_user()", "contents": "vpopmail_auth_user(${1:user}, ${2:domain}, ${3:password})$0" },
        { "trigger": "vpopmail_del_domain()", "contents": "vpopmail_del_domain(${1:domain})$0" },
        { "trigger": "vpopmail_del_domain_ex()", "contents": "vpopmail_del_domain_ex(${1:domain})$0" },
        { "trigger": "vpopmail_del_user()", "contents": "vpopmail_del_user(${1:user}, ${2:domain})$0" },
        { "trigger": "vpopmail_error()", "contents": "vpopmail_error()" },
        { "trigger": "vpopmail_passwd()", "contents": "vpopmail_passwd(${1:user}, ${2:domain}, ${3:password})$0" },
        { "trigger": "vpopmail_set_user_quota()", "contents": "vpopmail_set_user_quota(${1:user}, ${2:domain}, ${3:quota})$0" },
        */
        { "trigger": "vprintf()", "contents": "vprintf(${1:format}, ${2:args})$0" },
        { "trigger": "vsprintf()", "contents": "vsprintf(${1:format}, ${2:args})$0" },
        // W32api - moved to PECL as of PHP 5.1.0
        { "trigger": "w32api_deftype()", "contents": "w32api_deftype(${1:typename}, ${2:member1_type}, ${3:member1_name})$0" },
        { "trigger": "w32api_init_dtype()", "contents": "w32api_init_dtype(${1:typename}, ${2:value})$0" },
        { "trigger": "w32api_invoke_function()", "contents": "w32api_invoke_function(${1:funcname}, ${2:argument})$0" },
        { "trigger": "w32api_register_function()", "contents": "w32api_register_function(${1:library}, ${2:function_name}, ${3:return_type})$0" },
        { "trigger": "w32api_set_call_method()", "contents": "w32api_set_call_method(${1:method})$0" },
        // Web Distributed Data Exchange
        { "trigger": "wddx_add_vars()", "contents": "wddx_add_vars(${1:packet_id}, ${2:var_name})$0" },
        { "trigger": "wddx_deserialize()", "contents": "wddx_deserialize(${1:packet})$0" },
        { "trigger": "wddx_packet_end()", "contents": "wddx_packet_end(${1:packet_id})$0" },
        { "trigger": "wddx_packet_start()", "contents": "wddx_packet_start(${1:[comment]})$0" },
        { "trigger": "wddx_serialize_value()", "contents": "wddx_serialize_value(${1:var})$0" },
        { "trigger": "wddx_serialize_vars()", "contents": "wddx_serialize_vars(${1:var_name})$0" },
        { "trigger": "wddx_unserialize()", "contents": "wddx_unserialize(${1:packet})$0" },
        "WeakMap",
        "WeakRef",
        { "trigger": "WeakRef()\tctor", "contents": "WeakRef(${1:[object]})$0" },

        { "trigger": "win32_continue_service()", "contents": "win32_continue_service(${1:servicename}${2:[, machine]})$0" },
        { "trigger": "win32_create_service()", "contents": "win32_create_service(${1:details}${2:[, machine]})$0" },
        { "trigger": "win32_delete_service()", "contents": "win32_delete_service(${1:servicename}${2:[, machine]})$0" },
        { "trigger": "win32_get_last_control_message()", "contents": "win32_get_last_control_message()" },
        { "trigger": "win32_pause_service()", "contents": "win32_pause_service(${1:servicename}${2:[, machine]})$0" },
        { "trigger": "win32_ps_list_procs()", "contents": "win32_ps_list_procs()" },
        { "trigger": "win32_ps_stat_mem()", "contents": "win32_ps_stat_mem()" },
        { "trigger": "win32_ps_stat_proc()", "contents": "win32_ps_stat_proc(${1:[pid=0]})$0" },
        { "trigger": "win32_query_service_status()", "contents": "win32_query_service_status(${1:servicename}${2:[, machine]})$0" },
        { "trigger": "win32_set_service_status()", "contents": "win32_set_service_status(${1:status}${2:[, checkpoint=0]})$0" },
        { "trigger": "win32_start_service()", "contents": "win32_start_service(${1:servicename}${2:[, machine]})$0" },
        { "trigger": "win32_start_service_ctrl_dispatcher()", "contents": "win32_start_service_ctrl_dispatcher(${1:name})$0" },
        { "trigger": "win32_stop_service()", "contents": "win32_stop_service(${1:servicename}${2:[, machine]})$0" },
        // WinCache extension
        { "trigger": "wincache_fcache_fileinfo()", "contents": "wincache_fcache_fileinfo(${1:[summaryonly]})$0" },
        { "trigger": "wincache_fcache_meminfo()", "contents": "wincache_fcache_meminfo()" },
        { "trigger": "wincache_lock()", "contents": "wincache_lock(${1:key}${2:[, isglobal]})$0" },
        { "trigger": "wincache_ocache_fileinfo()", "contents": "wincache_ocache_fileinfo(${1:[summaryonly]})$0" },
        { "trigger": "wincache_ocache_meminfo()", "contents": "wincache_ocache_meminfo()" },
        { "trigger": "wincache_refresh_if_changed()", "contents": "wincache_refresh_if_changed(${1:[files]})$0" },
        { "trigger": "wincache_rplist_fileinfo()", "contents": "wincache_rplist_fileinfo(${1:[summaryonly]})$0" },
        { "trigger": "wincache_rplist_meminfo()", "contents": "wincache_rplist_meminfo()" },
        { "trigger": "wincache_scache_info()", "contents": "wincache_scache_info(${1:[summaryonly]})$0" },
        { "trigger": "wincache_scache_meminfo()", "contents": "wincache_scache_meminfo()" },
        { "trigger": "wincache_ucache_add()", "contents": "wincache_ucache_add(${1:key}, ${2:value})$0" },
        { "trigger": "wincache_ucache_cas()", "contents": "wincache_ucache_cas(${1:key}, ${2:old_value}, ${3:new_value})$0" },
        { "trigger": "wincache_ucache_clear()", "contents": "wincache_ucache_clear()" },
        { "trigger": "wincache_ucache_dec()", "contents": "wincache_ucache_dec(${1:key})$0" },
        { "trigger": "wincache_ucache_delete()", "contents": "wincache_ucache_delete(${1:key})$0" },
        { "trigger": "wincache_ucache_exists()", "contents": "wincache_ucache_exists(${1:key})$0" },
        { "trigger": "wincache_ucache_get()", "contents": "wincache_ucache_get(${1:key})$0" },
        { "trigger": "wincache_ucache_inc()", "contents": "wincache_ucache_inc(${1:key})$0" },
        { "trigger": "wincache_ucache_info()", "contents": "wincache_ucache_info(${1:[summaryonly]}${2:[, key]})$0" },
        { "trigger": "wincache_ucache_meminfo()", "contents": "wincache_ucache_meminfo()" },
        { "trigger": "wincache_ucache_set()", "contents": "wincache_ucache_set(${1:key}, ${2:value})$0" },
        { "trigger": "wincache_unlock()", "contents": "wincache_unlock(${1:key})$0" },

        { "trigger": "wordwrap()", "contents": "wordwrap(${1:str}${2:[, width]}${3:[, break]}${4:[, cut]})$0" },
        // Extended attributes
        { "trigger": "xattr_get()", "contents": "xattr_get(${1:filename}, ${2:name}${3:[, flags]})$0" },
        { "trigger": "xattr_list()", "contents": "xattr_list(${1:filename}${2:[, flags]})$0" },
        { "trigger": "xattr_remove()", "contents": "xattr_remove(${1:filename}, ${2:name}${3:[, flags]})$0" },
        { "trigger": "xattr_set()", "contents": "xattr_set(${1:filename}, ${2:name}, ${3:value}${4:[, flags]})$0" },
        { "trigger": "xattr_supported()", "contents": "xattr_supported(${1:filename}${2:[, flags]})$0" },

        { "trigger": "xdiff_file_bdiff()", "contents": "xdiff_file_bdiff(${1:old_file}, ${2:new_file}, ${3:dest})$0" },
        { "trigger": "xdiff_file_bdiff_size()", "contents": "xdiff_file_bdiff_size(${1:file})$0" },
        { "trigger": "xdiff_file_bpatch()", "contents": "xdiff_file_bpatch(${1:file}, ${2:patch}, ${3:dest})$0" },
        { "trigger": "xdiff_file_diff()", "contents": "xdiff_file_diff(${1:old_file}, ${2:new_file}, ${3:dest})$0" },
        { "trigger": "xdiff_file_diff_binary()", "contents": "xdiff_file_diff_binary(${1:old_file}, ${2:new_file}, ${3:dest})$0" },
        { "trigger": "xdiff_file_merge3()", "contents": "xdiff_file_merge3(${1:old_file}, ${2:new_file1}, ${3:new_file2}, ${4:dest})$0" },
        { "trigger": "xdiff_file_patch()", "contents": "xdiff_file_patch(${1:file}, ${2:patch}, ${3:dest})$0" },
        { "trigger": "xdiff_file_patch_binary()", "contents": "xdiff_file_patch_binary(${1:file}, ${2:patch}, ${3:dest})$0" },
        { "trigger": "xdiff_file_rabdiff()", "contents": "xdiff_file_rabdiff(${1:old_file}, ${2:new_file}, ${3:dest})$0" },
        { "trigger": "xdiff_string_bdiff()", "contents": "xdiff_string_bdiff(${1:old_data}, ${2:new_data})$0" },
        { "trigger": "xdiff_string_bdiff_size()", "contents": "xdiff_string_bdiff_size(${1:patch})$0" },
        { "trigger": "xdiff_string_bpatch()", "contents": "xdiff_string_bpatch(${1:str}, ${2:patch})$0" },
        { "trigger": "xdiff_string_diff()", "contents": "xdiff_string_diff(${1:old_data}, ${2:new_data})$0" },
        { "trigger": "xdiff_string_diff_binary()", "contents": "xdiff_string_diff_binary(${1:old_data}, ${2:new_data})$0" },
        { "trigger": "xdiff_string_merge3()", "contents": "xdiff_string_merge3(${1:old_data}, ${2:new_data1}, ${3:new_data2})$0" },
        { "trigger": "xdiff_string_patch()", "contents": "xdiff_string_patch(${1:str}, ${2:patch})$0" },
        { "trigger": "xdiff_string_patch_binary()", "contents": "xdiff_string_patch_binary(${1:str}, ${2:patch})$0" },
        { "trigger": "xdiff_string_rabdiff()", "contents": "xdiff_string_rabdiff(${1:old_data}, ${2:new_data})$0" },
        // Xhprof profiler
        { "trigger": "xhprof_disable()", "contents": "xhprof_disable()" },
        { "trigger": "xhprof_enable()", "contents": "xhprof_enable(${1:[flags]}${2:[, options]})$0" },
        { "trigger": "xhprof_sample_disable()", "contents": "xhprof_sample_disable()" },
        { "trigger": "xhprof_sample_enable()", "contents": "xhprof_sample_enable()" },

        { "trigger": "xml_error_string()", "contents": "xml_error_string(${1:code})$0" },
        { "trigger": "xml_get_current_byte_index()", "contents": "xml_get_current_byte_index(${1:parser})$0" },
        { "trigger": "xml_get_current_column_number()", "contents": "xml_get_current_column_number(${1:parser})$0" },
        { "trigger": "xml_get_current_line_number()", "contents": "xml_get_current_line_number(${1:parser})$0" },
        { "trigger": "xml_get_error_code()", "contents": "xml_get_error_code(${1:parser})$0" },
        { "trigger": "xml_parse()", "contents": "xml_parse(${1:parser}, ${2:data}${3:[, is_final]})$0" },
        { "trigger": "xml_parse_into_struct()", "contents": "xml_parse_into_struct(${1:parser}, ${2:data}, ${3:values}${4:[, index]})$0" },
        { "trigger": "xml_parser_create()", "contents": "xml_parser_create(${1:[encoding]})$0" },
        { "trigger": "xml_parser_create_ns()", "contents": "xml_parser_create_ns(${1:[encoding]}${2:[, separator]})$0" },
        { "trigger": "xml_parser_free()", "contents": "xml_parser_free(${1:parser})$0" },
        { "trigger": "xml_parser_get_option()", "contents": "xml_parser_get_option(${1:parser}, ${2:option})$0" },
        { "trigger": "xml_parser_set_option()", "contents": "xml_parser_set_option(${1:parser}, ${2:option}, ${3:value})$0" },
        { "trigger": "xml_set_character_data_handler()", "contents": "xml_set_character_data_handler(${1:parser}, ${2:handler})$0" },
        { "trigger": "xml_set_character_data_handler()", "contents": "xml_set_character_data_handler(${1:parser}, ${2:handler})$0" },
        { "trigger": "xml_set_default_handler()", "contents": "xml_set_default_handler(${1:parser}, ${2:handler})$0" },
        { "trigger": "xml_set_element_handler()", "contents": "xml_set_element_handler(${1:parser}, ${2:start_element_handler}, ${3:end_element_handler})$0" },
        { "trigger": "xml_set_end_namespace_decl_handler()", "contents": "xml_set_end_namespace_decl_handler(${1:parser}, ${2:handler})$0" },
        { "trigger": "xml_set_external_entity_ref_handler()", "contents": "xml_set_external_entity_ref_handler(${1:parser}, ${2:handler})$0" },
        { "trigger": "xml_set_notation_decl_handler()", "contents": "xml_set_notation_decl_handler(${1:parser}, ${2:handler})$0" },
        { "trigger": "xml_set_object()", "contents": "xml_set_object(${1:parser}, ${2:object})$0" },
        { "trigger": "xml_set_processing_instruction_handler()", "contents": "xml_set_processing_instruction_handler(${1:parser}, ${2:handler})$0" },
        { "trigger": "xml_set_start_namespace_decl_handler()", "contents": "xml_set_start_namespace_decl_handler(${1:parser}, ${2:handler})$0" },
        { "trigger": "xml_set_unparsed_entity_decl_handler()", "contents": "xml_set_unparsed_entity_decl_handler(${1:parser}, ${2:handler})$0" },

        "XMLReader",
        { "trigger": "close()\tXMLReader", "contents": "close()" },
        { "trigger": "expand()\tXMLReader", "contents": "expand(${1:[basenode]})$0" },
        { "trigger": "getAttribute()\tXMLReader", "contents": "getAttribute(${1:name})$0" },
        { "trigger": "getAttributeNo()\tXMLReader", "contents": "getAttributeNo(${1:index})$0" },
        { "trigger": "getAttributeNs()\tXMLReader", "contents": "getAttributeNs(${1:localName}, ${2:namespaceURI})$0" },
        { "trigger": "getParserProperty()\tXMLReader", "contents": "getParserProperty(${1:property})$0" },
        { "trigger": "isValid()\tXMLReader", "contents": "isValid()" },
        { "trigger": "lookupNamespace()\tXMLReader", "contents": "lookupNamespace(${1:prefix})$0" },
        { "trigger": "moveToAttribute()\tXMLReader", "contents": "moveToAttribute(${1:name})$0" },
        { "trigger": "moveToAttributeNo()\tXMLReader", "contents": "moveToAttributeNo(${1:index})$0" },
        { "trigger": "moveToAttributeNs()\tXMLReader", "contents": "moveToAttributeNs(${1:localName}, ${2:namespaceURI})$0" },
        { "trigger": "moveToElement()\tXMLReader", "contents": "moveToElement()" },
        { "trigger": "moveToFirstAttribute()\tXMLReader", "contents": "moveToFirstAttribute()" },
        { "trigger": "moveToNextAttribute()\tXMLReader", "contents": "moveToNextAttribute()" },
        { "trigger": "next()\tXMLReader", "contents": "next(${1:[localname]})$0" },
        { "trigger": "open()\tXMLReader", "contents": "open(${1:URI}${2:[, encoding]}${3:[, options]})$0" },
        { "trigger": "read()\tXMLReader", "contents": "read()" },
        { "trigger": "readInnerXML()\tXMLReader", "contents": "readInnerXML()" },
        { "trigger": "readOuterXML()\tXMLReader", "contents": "readOuterXML()" },
        { "trigger": "readString()\tXMLReader", "contents": "readString()" },
        { "trigger": "setParserProperty()\tXMLReader", "contents": "setParserProperty(${1:property}, ${2:value})$0" },
        { "trigger": "setRelaxNGSchema()\tXMLReader", "contents": "setRelaxNGSchema(${1:filename})$0" },
        { "trigger": "setRelaxNGSchemaSource()\tXMLReader", "contents": "setRelaxNGSchemaSource(${1:source})$0" },
        { "trigger": "setSchema()\tXMLReader", "contents": "setSchema(${1:filename})$0" },
        { "trigger": "xml()\tXMLReader", "contents": "xml(${1:source}${2:[, encoding]}${3:[, options]})$0" },

        // XML-RPC servers and clients
        { "trigger": "xmlrpc_decode()", "contents": "xmlrpc_decode(${1:xml}${2:[, encoding]})$0" },
        { "trigger": "xmlrpc_decode_request()", "contents": "xmlrpc_decode_request(${1:xml}, ${2:method}${3:[, encoding]})$0" },
        { "trigger": "xmlrpc_encode()", "contents": "xmlrpc_encode(${1:value})$0" },
        { "trigger": "xmlrpc_encode_request()", "contents": "xmlrpc_encode_request(${1:method}, ${2:params}${3:[, output_options]})$0" },
        { "trigger": "xmlrpc_get_type()", "contents": "xmlrpc_get_type(${1:value})$0" },
        { "trigger": "xmlrpc_is_fault()", "contents": "xmlrpc_is_fault(${1:arg})$0" },
        { "trigger": "xmlrpc_parse_method_descriptions()", "contents": "xmlrpc_parse_method_descriptions(${1:xml})$0" },
        { "trigger": "xmlrpc_server_add_introspection_data()", "contents": "xmlrpc_server_add_introspection_data(${1:server}, ${2:desc})$0" },
        { "trigger": "xmlrpc_server_call_method()", "contents": "xmlrpc_server_call_method(${1:server}, ${2:xml}, ${3:user_data}${4:[, output_options]})$0" },
        { "trigger": "xmlrpc_server_create()", "contents": "xmlrpc_server_create()" },
        { "trigger": "xmlrpc_server_destroy()", "contents": "xmlrpc_server_destroy(${1:server})$0" },
        { "trigger": "xmlrpc_server_register_introspection_callback()", "contents": "xmlrpc_server_register_introspection_callback(${1:server}, ${2:function})$0" },
        { "trigger": "xmlrpc_server_register_method()", "contents": "xmlrpc_server_register_method(${1:server}, ${2:method_name}, ${3:function})$0" },
        { "trigger": "xmlrpc_set_type()", "contents": "xmlrpc_set_type(${1:value}, ${2:type})$0" },

        "XMLWriter",
        { "trigger": "endAttribute()\tXMLWriter", "contents": "endAttribute()" },
        { "trigger": "endCData()\tXMLWriter", "contents": "endCData()" },
        { "trigger": "endComment()\tXMLWriter", "contents": "endComment()" },
        { "trigger": "endDocument()\tXMLWriter", "contents": "endDocument()" },
        { "trigger": "endDTD()\tXMLWriter", "contents": "endDTD()" },
        { "trigger": "endDTDAttlist()\tXMLWriter", "contents": "endDTDAttlist()" },
        { "trigger": "endDTDElement()\tXMLWriter", "contents": "endDTDElement()" },
        { "trigger": "endDTDEntity()\tXMLWriter", "contents": "endDTDEntity()" },
        { "trigger": "endEntity()\tXMLWriter", "contents": "endEntity()" },
        { "trigger": "endPI()\tXMLWriter", "contents": "endPI()" },
        { "trigger": "flush()\tXMLWriter", "contents": "flush(${1:[empty]}$0)" },
        { "trigger": "fullEndElement()\tXMLWriter", "contents": "fullEndElement()" },
        { "trigger": "openMemory()\tXMLWriter", "contents": "openMemory()" },
        { "trigger": "openURI()\tXMLWriter", "contents": "openURI(${1:uri})$0" },
        { "trigger": "outputMemory()\tXMLWriter", "contents": "outputMemory(${1:[flush]})$0" },
        { "trigger": "setIndentString()\tXMLWriter", "contents": "setIndentString(${1:indentString})$0" },
        { "trigger": "setIndent()\tXMLWriter", "contents": "setIndent(${1:indent})$0" },
        { "trigger": "startAttributeNS()\tXMLWriter", "contents": "startAttributeNS(${1:prefix}, ${2:name}, ${3:uri})$0" },
        { "trigger": "startAttribute()\tXMLWriter", "contents": "startAttribute(${1:name})$0" },
        { "trigger": "startCData()\tXMLWriter", "contents": "startCData()" },
        { "trigger": "startComment()\tXMLWriter", "contents": "startComment()" },
        { "trigger": "startDocument()\tXMLWriter", "contents": "startDocument(${1:[version]}${2:[, encoding]}${3:[, standalone]})" },
        { "trigger": "startDTD()\tXMLWriter", "contents": "startDTD(${1:qualifiedName}${2:[, publicId]}${3:[, systemId]})$0" },
        { "trigger": "startDTDAttlist()\tXMLWriter", "contents": "startDTDAttlist(${1:name})$0" },
        { "trigger": "startDTDElement()\tXMLWriter", "contents": "startDTDElement(${1:qualifiedName})$0" },
        { "trigger": "startDTDEntity()\tXMLWriter", "contents": "startDTDEntity(${1:name}, ${2:isparam})$0" },
        { "trigger": "startElement()\tXMLWriter", "contents": "startElement(${1:name})$0" },
        { "trigger": "startElementNS()\tXMLWriter", "contents": "startElementNS(${1:prefix}, ${2:name}, ${3:uri})$0" },
        { "trigger": "startPI()\tXMLWriter", "contents": "startPI(${1:target})$0" },
        { "trigger": "text()\tXMLWriter", "contents": "text(${1:content})$0" },
        { "trigger": "writeAttributeNS()\tXMLWriter", "contents": "writeAttributeNS(${1:prefix}, ${2:name}, ${3:uri}, ${4:content})$0" },
        { "trigger": "writeAttribute()\tXMLWriter", "contents": "writeAttribute(${1:name}, ${2:value})$0" },
        { "trigger": "writeCData()\tXMLWriter", "contents": "writeCData(${1:content})$0" },
        { "trigger": "writeComment()\tXMLWriter", "contents": "writeComment(${1:content})$0" },
        { "trigger": "writeDTDAttlist()\tXMLWriter", "contents": "writeDTDAttlist(${1:name}, ${2:content})$0" },
        { "trigger": "writeDTDElement()\tXMLWriter", "contents": "writeDTDElement(${1:name}, ${2:content})$0" },
        { "trigger": "writeDTDEntity()\tXMLWriter", "contents": "writeDTDEntity(${1:name}, ${2:content}, ${3:pe}, ${4:pubid}, ${5:sysid}, ${6:ndataid})$0" },
        { "trigger": "writeDTD()\tXMLWriter", "contents": "writeDTD(${1:name}${2:[, publicId]}${3:[, systemId]}${4:[, subset]})$0" },
        { "trigger": "writeElement()\tXMLWriter", "contents": "writeElement(${1:name}${2:[, content]})$0" },
        { "trigger": "writeElementNS()\tXMLWriter", "contents": "writeElementNS(${1:prefix}, ${2:name}, ${3:uri}${4:[, content]})$0" },
        { "trigger": "writePI()\tXMLWriter", "contents": "writePI(${1:target}, ${2:content})$0" },
        { "trigger": "writeRaw()\tXMLWriter", "contents": "writeRaw(${1:content})$0" },

        { "trigger": "xmlwriter_end_attribute()", "contents": "xmlwriter_end_attribute(${1:xmlwriter})$0" },
        { "trigger": "xmlwriter_end_cdata()", "contents": "xmlwriter_end_cdata(${1:xmlwriter})$0" },
        { "trigger": "xmlwriter_end_comment()", "contents": "xmlwriter_end_comment(${1:xmlwriter})$0" },
        { "trigger": "xmlwriter_end_document()", "contents": "xmlwriter_end_document(${1:xmlwriter})$0" },
        { "trigger": "xmlwriter_end_dtd()", "contents": "xmlwriter_end_dtd(${1:xmlwriter})$0" },
        { "trigger": "xmlwriter_end_dtd_attlist()", "contents": "xmlwriter_end_dtd_attlist(${1:xmlwriter})$0" },
        { "trigger": "xmlwriter_end_dtd_element()", "contents": "xmlwriter_end_dtd_element(${1:xmlwriter})$0" },
        { "trigger": "xmlwriter_end_dtd_entity()", "contents": "xmlwriter_end_dtd_entity(${1:xmlwriter})$0" },
        { "trigger": "xmlwriter_end_element()", "contents": "xmlwriter_end_element(${1:xmlwriter})$0" },
        { "trigger": "xmlwriter_end_pi()", "contents": "xmlwriter_end_pi(${1:xmlwriter})$0" },
        { "trigger": "xmlwriter_flush()", "contents": "xmlwriter_flush(${1:xmlwriter}${2:[, empty]})$0" },
        { "trigger": "xmlwriter_full_end_element()", "contents": "xmlwriter_full_end_element(${1:xmlwriter})$0" },
        { "trigger": "xmlwriter_open_memory()", "contents": "xmlwriter_open_memory()" },
        { "trigger": "xmlwriter_open_uri()", "contents": "xmlwriter_open_uri(${1:uri})$0" },
        { "trigger": "xmlwriter_output_memory()", "contents": "xmlwriter_output_memory(${1:xmlwriter}${2:[, flush]})$0" },
        { "trigger": "xmlwriter_set_indent()", "contents": "xmlwriter_set_indent(${1:xmlwriter}, ${2:indent})$0" },
        { "trigger": "xmlwriter_set_indent_string()", "contents": "xmlwriter_set_indent_string(${1:xmlwriter}, ${2:indentString})$0" },
        { "trigger": "xmlwriter_start_attribute()", "contents": "xmlwriter_start_attribute(${1:xmlwriter}, ${2:name})$0" },
        { "trigger": "xmlwriter_start_attribute_ns()", "contents": "xmlwriter_start_attribute_ns(${1:xmlwriter}, ${2:prefix}, ${3:name}, ${4:uri})$0" },
        { "trigger": "xmlwriter_start_cdata()", "contents": "xmlwriter_start_cdata(${1:xmlwriter})$0" },
        { "trigger": "xmlwriter_start_comment()", "contents": "xmlwriter_start_comment(${1:xmlwriter})$0" },
        { "trigger": "xmlwriter_start_document()", "contents": "xmlwriter_start_document(${1:xmlwriter}${2:[, version]}${3:[, encoding]}${4:[, standalone]})$0" },
        { "trigger": "xmlwriter_start_dtd()", "contents": "xmlwriter_start_dtd(${1:xmlwriter}, ${2:qualifiedName}${3:[, publicId]}${4:[, systemId]})$0" },
        { "trigger": "xmlwriter_start_dtd_attlist()", "contents": "xmlwriter_start_dtd_attlist(${1:xmlwriter}, ${2:name})$0" },
        { "trigger": "xmlwriter_start_dtd_element()", "contents": "xmlwriter_start_dtd_element(${1:xmlwriter}, ${2:qualifiedName})$0" },
        { "trigger": "xmlwriter_start_dtd_entity()", "contents": "xmlwriter_start_dtd_entity(${1:xmlwriter}, ${2:name}, ${3:isparam})$0" },
        { "trigger": "xmlwriter_start_element()", "contents": "xmlwriter_start_element(${1:xmlwriter}, ${2:name})$0" },
        { "trigger": "xmlwriter_start_element_ns()", "contents": "xmlwriter_start_element_ns(${1:xmlwriter}, ${2:prefix}, ${3:name}, ${4:uri})$0" },
        { "trigger": "xmlwriter_start_pi()", "contents": "xmlwriter_start_pi(${1:xmlwriter}, ${2:target})$0" },
        { "trigger": "xmlwriter_text()", "contents": "xmlwriter_text(${1:xmlwriter}, ${2:content})$0" },
        { "trigger": "xmlwriter_write_attribute()", "contents": "xmlwriter_write_attribute(${1:xmlwriter}, ${2:name}, ${3:value})$0" },
        { "trigger": "xmlwriter_write_attribute_ns()", "contents": "xmlwriter_write_attribute_ns(${1:xmlwriter}, ${2:prefix}, ${3:name}, ${4:uri}, ${5:content})$0" },
        { "trigger": "xmlwriter_write_cdata()", "contents": "xmlwriter_write_cdata(${1:xmlwriter}, ${2:content})$0" },
        { "trigger": "xmlwriter_write_comment()", "contents": "xmlwriter_write_comment(${1:xmlwriter}, ${2:content})$0" },
        { "trigger": "xmlwriter_write_dtd()", "contents": "xmlwriter_write_dtd(${1:xmlwriter}, ${2:name}${3:[, publicId]}${4:[, systemId]}${5:[, subset]})$0" },
        { "trigger": "xmlwriter_write_dtd_attlist()", "contents": "xmlwriter_write_dtd_attlist(${1:xmlwriter}, ${2:name}, ${3:content})$0" },
        { "trigger": "xmlwriter_write_dtd_element()", "contents": "xmlwriter_write_dtd_element(${1:xmlwriter}, ${2:name}, ${3:content})$0" },
        { "trigger": "xmlwriter_write_dtd_entity()", "contents": "xmlwriter_write_dtd_entity(${1:xmlwriter}, ${2:name}, ${3:content}, ${4:pe}, ${5:pubid}, ${6:sysid}, ${7:ndataid})$0" },
        { "trigger": "xmlwriter_write_element()", "contents": "xmlwriter_write_element(${1:xmlwriter}, ${2:name}${3:[, content]})$0" },
        { "trigger": "xmlwriter_write_element_ns()", "contents": "xmlwriter_write_element_ns(${1:xmlwriter}, ${2:prefix}, ${3:name}, ${4:uri}${5:[, content]})$0" },
        { "trigger": "xmlwriter_write_pi()", "contents": "xmlwriter_write_pi(${1:xmlwriter}, ${2:target}, ${3:content})$0" },
        { "trigger": "xmlwriter_write_raw()", "contents": "xmlwriter_write_raw(${1:xmlwriter}, ${2:content})$0" },
        // cf DOMXPath class (PHP 5)
        { "trigger": "xpath_eval()", "contents": "xpath_eval(${1:xpath_context}, ${2:xpath_expression}${3:[, contextnode]})$0" },
        { "trigger": "xpath_eval_expression()", "contents": "xpath_eval_expression(${1:xpath_context}, ${2:expression}${3:[, contextnode]})$0" },
        { "trigger": "xpath_new_context()", "contents": "xpath_new_context(${1:dom_document})$0" },
        { "trigger": "xpath_register_ns()", "contents": "xpath_register_ns(${1:xpath_context}, ${2:prefix}, ${3:uri})$0" },
        { "trigger": "xpath_register_ns_auto()", "contents": "xpath_register_ns_auto(${1:xpath_context}${2:[, contextnode]})$0" },

        { "trigger": "xptr_eval()", "contents": "xptr_eval(${1:xpath_context}, ${2:eval_str}${3:[, contextnode]})$0" },
        { "trigger": "xptr_new_context()", "contents": "xptr_new_context()" },

        "XSLTProcessor",
        { "trigger": "getParameter()\tXSLTProcessor", "contents": "getParameter(${1:namespaceURI}, ${2:localName})$0" },
        { "trigger": "getSecurityPrefs()\tXSLTProcessor", "contents": "getSecurityPrefs()" },
        { "trigger": "hasExsltSupport()\tXSLTProcessor", "contents": "hasExsltSupport()" },
        { "trigger": "importStylesheet()\tXSLTProcessor", "contents": "importStylesheet(${1:stylesheet})$0" },
        { "trigger": "registerPHPFunctions()\tXSLTProcessor", "contents": "registerPHPFunctions(${1:[restrict]})$0" },
        { "trigger": "removeParameter()\tXSLTProcessor", "contents": "removeParameter(${1:namespaceURI}, ${2:localName})$0" },
        { "trigger": "setParameter()\tXSLTProcessor", "contents": "setParameter(${1:namespace}, ${2:name/value_or_options})$0" },
        { "trigger": "setProfiling()\tXSLTProcessor", "contents": "setProfiling(${1:filename})$0" },
        { "trigger": "setSecurityPrefs()\tXSLTProcessor", "contents": "setSecurityPrefs(${1:securityPrefs})$0" },
        { "trigger": "transformToDoc()\tXSLTProcessor", "contents": "transformToDoc(${1:doc})$0" },
        { "trigger": "transformToURI()\tXSLTProcessor", "contents": "transformToURI(${1:doc}, ${2:uri})$0" },
        { "trigger": "transformToXML()\tXSLTProcessor", "contents": "transformToXML(${1:doc})$0" },

        // XSLT moved to PECL as of PHP 5.0.0 - use XSL extension for PHP 5
        { "trigger": "xslt_backend_info()", "contents": "xslt_backend_info()" },
        { "trigger": "xslt_backend_name()", "contents": "xslt_backend_name()" },
        { "trigger": "xslt_backend_version()", "contents": "xslt_backend_version()" },
        { "trigger": "xslt_create()", "contents": "xslt_create()" },
        { "trigger": "xslt_errno()", "contents": "xslt_errno(${1:xh})$0" },
        { "trigger": "xslt_error()", "contents": "xslt_error(${1:xh})$0" },
        { "trigger": "xslt_free()", "contents": "xslt_free(${1:xh})$0" },
        { "trigger": "xslt_getopt()", "contents": "xslt_getopt(${1:processor})$0" },
        { "trigger": "xslt_process()", "contents": "xslt_process(${1:xh}, ${2:xmlcontainer}, ${3:xslcontainer})$0" },
        { "trigger": "xslt_set_base()", "contents": "xslt_set_base(${1:xh}, ${2:uri})$0" },
        { "trigger": "xslt_set_encoding()", "contents": "xslt_set_encoding(${1:xh}, ${2:encoding})$0" },
        { "trigger": "xslt_set_error_handler()", "contents": "xslt_set_error_handler(${1:xh}, ${2:handler})$0" },
        { "trigger": "xslt_set_log()", "contents": "xslt_set_log(${1:xh})$0" },
        { "trigger": "xslt_set_object()", "contents": "xslt_set_object(${1:processor}, ${2:obj})$0" },
        { "trigger": "xslt_set_sax_handler()", "contents": "xslt_set_sax_handler(${1:xh}, ${2:handlers})$0" },
        { "trigger": "xslt_set_sax_handlers()", "contents": "xslt_set_sax_handlers(${1:processor}, ${2:handlers})$0" },
        { "trigger": "xslt_set_scheme_handler()", "contents": "xslt_set_scheme_handler(${1:xh}, ${2:handlers})$0" },
        { "trigger": "xslt_set_scheme_handlers()", "contents": "xslt_set_scheme_handlers(${1:xh}, ${2:handlers})$0" },
        { "trigger": "xslt_setopt()", "contents": "xslt_setopt(${1:processor}, ${2:newmask})$0" },

        /* Yet Another Framework (Yaf) - web applications
        "Yaf_Action_Abstract",
        "Yaf_Application",
        "Yaf_Bootstrap_Abstract",
        "Yaf_Config_Abstract",
        "Yaf_Config_Ini",
        { "trigger": "Yaf_Config_Ini()\tctor", "contents": "Yaf_Config_Ini(${1:config_file}${2:[, section]})$0" },
        "Yaf_Config_Simple",
        { "trigger": "Yaf_Config_Simple()\tctor", "contents": "Yaf_Config_Simple(${1:config_file}${2:[, section]})$0" },
        "Yaf_Controller_Abstract",
        "Yaf_Dispatcher",
        "Yaf_Exception",
        "Yaf_Exception_DispatchFailed",
        "Yaf_Exception_LoadFailed",
        "Yaf_Exception_LoadFailed_Action",
        "Yaf_Exception_LoadFailed_Controller",
        "Yaf_Exception_LoadFailed_Module",
        "Yaf_Exception_LoadFailed_View",
        "Yaf_Exception_RouterFailed",
        "Yaf_Exception_StartupError",
        "Yaf_Exception_TypeError",
        "Yaf_Loader",
        "Yaf_Plugin_Abstract",
        "Yaf_Registry",
        "Yaf_Request_Abstract",
        "Yaf_Request_Http",
        "Yaf_Request_Simple",
        "Yaf_Response_Abstract",
        "Yaf_Route_Interface",
        "Yaf_Route_Map",
        { "trigger": "Yaf_Route_Map()\tctor", "contents": "Yaf_Route_Map(${1:[controller_pref]}${2:[, delimiter]})$0" },
        "Yaf_Route_Regex",
        { "trigger": "Yaf_Route_Regex()\tctor", "contents": "Yaf_Route_Regex(${1:match}, ${2:route}${3:[, map]}${4:[, verify]})$0" },
        "Yaf_Route_Rewrite",
        { "trigger": "Yaf_Route_Rewrite()\tctor", "contents": "Yaf_Route_Rewrite(${1:match}, ${2:route}${3:[, verify]})$0" },
         "Yaf_Route_Simple",
        { "trigger": "Yaf_Route_Simple()\tctor", "contents": "Yaf_Route_Simple(${1:module_name}, ${2:controller_name}, ${3:action_name})$0" },
        "Yaf_Route_Static",
        "Yaf_Route_Supervar",
        { "trigger": "Yaf_Route_Supervar()\tctor", "contents": "Yaf_Route_Supervar(${1:supervar_name})$0" },
        "Yaf_Router",
        "Yaf_Session",
        "Yaf_View_Interface",
        "Yaf_View_Simple",
        { "trigger": "Yaf_View_Simple()\tctor", "contents": "Yaf_View_Simple(${1:template_dir}${2:[, options]})$0" },
        */

        /* Yaml- PECL extension not bundled with PHP
        { "trigger": "yaml_emit()", "contents": "yaml_emit(${1:data}${2:[, encoding]}${3:[, linebreak]}${4:[, callbacks]})$0" },
        { "trigger": "yaml_emit_file()", "contents": "yaml_emit_file(${1:filename}, ${2:data}${3:[, encoding]}${4:[, linebreak]}${5:[, callbacks]})$0" },
        { "trigger": "yaml_parse()", "contents": "yaml_parse(${1:input}${2:[, pos]}${3:[, ndocs]}${4:[, callbacks]})$0" },
        { "trigger": "yaml_parse_file()", "contents": "yaml_parse_file(${1:filename}${2:[, pos]}${3:[, ndocs]}${4:[, callbacks]})$0" },
        { "trigger": "yaml_parse_url()", "contents": "yaml_parse_url(${1:url}${2:[, pos]}${3:[, ndocs]}${4:[, callbacks]})$0" },
        */
        /* YAZ toolkit - moved to PECL as of PHP 5.0.0
        { "trigger": "yaz_addinfo()", "contents": "yaz_addinfo(${1:id})$0" },
        { "trigger": "yaz_ccl_conf()", "contents": "yaz_ccl_conf(${1:id}, ${2:config})$0" },
        { "trigger": "yaz_ccl_parse()", "contents": "yaz_ccl_parse(${1:id}, ${2:query}, ${3:result})$0" },
        { "trigger": "yaz_close()", "contents": "yaz_close(${1:id})$0" },
        { "trigger": "yaz_connect()", "contents": "yaz_connect(${1:zurl})$0" },
        { "trigger": "yaz_database()", "contents": "yaz_database(${1:id}, ${2:databases})$0" },
        { "trigger": "yaz_element()", "contents": "yaz_element(${1:id}, ${2:elementset})$0" },
        { "trigger": "yaz_errno()", "contents": "yaz_errno(${1:id})$0" },
        { "trigger": "yaz_error()", "contents": "yaz_error(${1:id})$0" },
        { "trigger": "yaz_es()", "contents": "yaz_es(${1:id}, ${2:type}, ${3:args})$0" },
        { "trigger": "yaz_es_result()", "contents": "yaz_es_result(${1:id})$0" },
        { "trigger": "yaz_get_option()", "contents": "yaz_get_option(${1:id}, ${2:name})$0" },
        { "trigger": "yaz_hits()", "contents": "yaz_hits(${1:id})$0" },
        { "trigger": "yaz_itemorder()", "contents": "yaz_itemorder(${1:id}, ${2:args})$0" },
        { "trigger": "yaz_present()", "contents": "yaz_present(${1:id})$0" },
        { "trigger": "yaz_range()", "contents": "yaz_range(${1:id}, ${2:start}, ${3:number})$0" },
        { "trigger": "yaz_record()", "contents": "yaz_record(${1:id}, ${2:pos}, ${3:type})$0" },
        { "trigger": "yaz_scan()", "contents": "yaz_scan(${1:id}, ${2:type}, ${3:startterm})$0" },
        { "trigger": "yaz_scan_result()", "contents": "yaz_scan_result(${1:id})$0" },
        { "trigger": "yaz_schema()", "contents": "yaz_schema(${1:id}, ${2:schema})$0" },
        { "trigger": "yaz_search()", "contents": "yaz_search(${1:id}, ${2:type}, ${3:query})$0" },
        { "trigger": "yaz_set_option()", "contents": "yaz_set_option(${1:id}, ${2:name}, ${3:value})$0" },
        { "trigger": "yaz_sort()", "contents": "yaz_sort(${1:id}, ${2:criteria})$0" },
        { "trigger": "yaz_syntax()", "contents": "yaz_syntax(${1:id}, ${2:syntax})$0" },
        { "trigger": "yaz_wait()", "contents": "yaz_wait(${1:[options]})$0" },
        */
        /* Yellow Pages/NIS - not available on Windows - moved to PECL as of PHP 5.1.0
        { "trigger": "yp_all()", "contents": "yp_all(${1:domain}, ${2:map}, ${3:callback})$0" },
        { "trigger": "yp_cat()", "contents": "yp_cat(${1:domain}, ${2:map})$0" },
        { "trigger": "yp_err_string()", "contents": "yp_err_string(${1:errorcode})$0" },
        { "trigger": "yp_errno()", "contents": "yp_errno()" },
        { "trigger": "yp_first()", "contents": "yp_first(${1:domain}, ${2:map})$0" },
        { "trigger": "yp_get_default_domain()", "contents": "yp_get_default_domain()" },
        { "trigger": "yp_master()", "contents": "yp_master(${1:domain}, ${2:map})$0" },
        { "trigger": "yp_match()", "contents": "yp_match(${1:domain}, ${2:map}, ${3:key})$0" },
        { "trigger": "yp_next()", "contents": "yp_next(${1:domain}, ${2:map}, ${3:key})$0" },
        { "trigger": "yp_order()", "contents": "yp_order(${1:domain}, ${2:map})$0" },
        */
        { "trigger": "zend_logo_guid()", "contents": "zend_logo_guid()" },
        { "trigger": "zend_thread_id()", "contents": "zend_thread_id()" },
        { "trigger": "zend_version()", "contents": "zend_version()" },

        { "trigger": "zip_close()", "contents": "zip_close(${1:zip})$0" },
        { "trigger": "zip_entry_close()", "contents": "zip_entry_close(${1:zip_entry})$0" },
        { "trigger": "zip_entry_compressedsize()", "contents": "zip_entry_compressedsize(${1:zip_entry})$0" },
        { "trigger": "zip_entry_compressionmethod()", "contents": "zip_entry_compressionmethod(${1:zip_entry})$0" },
        { "trigger": "zip_entry_filesize()", "contents": "zip_entry_filesize(${1:zip_entry})$0" },
        { "trigger": "zip_entry_name()", "contents": "zip_entry_name(${1:zip_entry})$0" },
        { "trigger": "zip_entry_open()", "contents": "zip_entry_open(${1:zip}, ${2:zip_entry})$0" },
        { "trigger": "zip_entry_read()", "contents": "zip_entry_read(${1:zip_entry})$0" },
        { "trigger": "zip_open()", "contents": "zip_open(${1:filename})$0" },
        { "trigger": "zip_read()", "contents": "zip_read(${1:zip})$0" },
        "ZipArchive",
        { "trigger": "zlib_decode()", "contents": "zlib_decode(${1:data}${2:[, max_decoded_len]})$0" },
        { "trigger": "zlib_encode()", "contents": "zlib_encode(${1:data}, ${2:encoding}${3:[, level=-1]})$0" },
        { "trigger": "zlib_get_coding_type()", "contents": "zlib_get_coding_type()" }
    ]
}